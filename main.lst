   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
  18               	wait_ms:
  20               	.Ltext1:
   1:mstimer.c     **** static volatile uint16_t ms;
   2:mstimer.c     **** 
   3:mstimer.c     **** static void tick(void);
   4:mstimer.c     **** static void wait_ms(uint16_t n);
   5:mstimer.c     **** static void mstimer_init(void);
   6:mstimer.c     **** 
   7:mstimer.c     **** static void mstimer_init(void)
   8:mstimer.c     **** {
   9:mstimer.c     **** 	TCCR2A = (1 << WGM21);
  10:mstimer.c     **** 	TCCR2B = (1 << CS21) | (1 << CS20);
  11:mstimer.c     **** 	OCR2A = 250;
  12:mstimer.c     **** 	TIMSK2 = (1 << OCIE2A);
  13:mstimer.c     **** }
  14:mstimer.c     **** 
  15:mstimer.c     **** static void mstimer_disable(void)
  16:mstimer.c     **** {
  17:mstimer.c     **** 	TCCR2B &= ~((1 << CS21) | (1 << CS20));
  18:mstimer.c     **** 	cli();
  19:mstimer.c     **** }
  20:mstimer.c     **** 
  21:mstimer.c     **** static void mstimer_enable(void)
  22:mstimer.c     **** {
  23:mstimer.c     **** 	TCCR2B |= (1 << CS21) | (1 << CS20);
  24:mstimer.c     **** 	sei();
  25:mstimer.c     **** }
  26:mstimer.c     **** 
  27:mstimer.c     **** void wait_ms(uint16_t n)
  28:mstimer.c     **** {
  22               	.LM0:
  23               	.LFBB1:
  24               	/* prologue: function */
  25               	/* frame size = 0 */
  26               	/* stack size = 0 */
  27               	.L__stack_usage = 0
  29:mstimer.c     **** 	uint16_t target = ms + n;
  29               	.LM1:
  30 0000 2091 0000 		lds r18,ms
  31 0004 3091 0000 		lds r19,ms+1
  33               	.LM2:
  34 0008 280F      		add r18,r24
  35 000a 391F      		adc r19,r25
  36               	.L2:
  30:mstimer.c     **** 	while(ms != target) ;
  38               	.LM3:
  39 000c 8091 0000 		lds r24,ms
  40 0010 9091 0000 		lds r25,ms+1
  42               	.LM4:
  43 0014 8217      		cp r24,r18
  44 0016 9307      		cpc r25,r19
  45 0018 01F4      		brne .L2
  46               	/* epilogue start */
  31:mstimer.c     **** }
  48               	.LM5:
  49 001a 0895      		ret
  54               	.Lscope1:
  64               	lcd_rect:
  66               	.Ltext2:
   1:graphics.c    **** #include "lcd.c"
   2:graphics.c    **** #include "lcd_font.c"
   3:graphics.c    **** 
   4:graphics.c    **** #define LCD_BLACK             0x0000
   5:graphics.c    **** #define LCD_BLUE              0x001F
   6:graphics.c    **** #define LCD_RED               0xF800
   7:graphics.c    **** #define LCD_GREEN             0x07E0
   8:graphics.c    **** #define LCD_CYAN              0x07FF
   9:graphics.c    **** #define LCD_MAGENTA           0xF81F
  10:graphics.c    **** #define LCD_YELLOW            0xFFE0
  11:graphics.c    **** #define LCD_WHITE             0xFFFF
  12:graphics.c    **** 
  13:graphics.c    **** #define COLOR_565(R, G, B) \
  14:graphics.c    **** 	((((R) & 0xF8) << 8) | (((G) & 0xFC) << 3) | (((B) & 0xF8) >> 3))
  15:graphics.c    **** 
  16:graphics.c    **** static uint16_t _color;
  17:graphics.c    **** 
  18:graphics.c    **** static int16_t abs(int16_t v)
  19:graphics.c    **** {
  20:graphics.c    **** 	return v < 0 ? -v : v;
  21:graphics.c    **** }
  22:graphics.c    **** 
  23:graphics.c    **** static void lcd_clear(void)
  24:graphics.c    **** {
  25:graphics.c    **** 	uint16_t i;
  26:graphics.c    **** 	uint8_t hi, lo;
  27:graphics.c    **** 	i = LCD_WIDTH * (LCD_HEIGHT / 4);
  28:graphics.c    **** 	hi = (uint8_t)(_color >> 8);
  29:graphics.c    **** 	lo = (uint8_t)_color;
  30:graphics.c    **** 	LCD_WINDOW_BEGIN(0, 0, LCD_WIDTH - 1, LCD_HEIGHT - 1);
  31:graphics.c    **** 	while(i--)
  32:graphics.c    **** 	{
  33:graphics.c    **** 		WRITE_8(hi);
  34:graphics.c    **** 		WRITE_8(lo);
  35:graphics.c    **** 
  36:graphics.c    **** 		WRITE_8(hi);
  37:graphics.c    **** 		WRITE_8(lo);
  38:graphics.c    **** 
  39:graphics.c    **** 		WRITE_8(hi);
  40:graphics.c    **** 		WRITE_8(lo);
  41:graphics.c    **** 
  42:graphics.c    **** 		WRITE_8(hi);
  43:graphics.c    **** 		WRITE_8(lo);
  44:graphics.c    **** 	}
  45:graphics.c    **** 
  46:graphics.c    **** 	LCD_WINDOW_END();
  47:graphics.c    **** }
  48:graphics.c    **** 
  49:graphics.c    **** static void lcd_rect(int16_t x, int16_t y, int16_t w, int16_t h)
  50:graphics.c    **** {
  68               	.LM6:
  69               	.LFBB2:
  70               	/* prologue: function */
  71               	/* frame size = 0 */
  72               	/* stack size = 0 */
  73               	.L__stack_usage = 0
  74 001c FA01      		movw r30,r20
  75 001e A901      		movw r20,r18
  51:graphics.c    **** 	uint16_t end;
  52:graphics.c    **** 	uint8_t hi, lo;
  53:graphics.c    **** 	hi = (uint8_t)(_color >> 8);
  54:graphics.c    **** 	lo = (uint8_t)_color;
  55:graphics.c    **** 	if(!w || !h)
  77               	.LM7:
  78 0020 3097      		sbiw r30,0
  79 0022 01F4      		brne .+2
  80 0024 00C0      		rjmp .L4
  82               	.LM8:
  83 0026 232B      		or r18,r19
  84 0028 01F4      		brne .+2
  85 002a 00C0      		rjmp .L4
  86 002c 9C01      		movw r18,r24
  87 002e 97FF      		sbrs r25,7
  88 0030 00C0      		rjmp .L6
  89 0032 30E0      		ldi r19,0
  90 0034 20E0      		ldi r18,0
  91               	.L6:
  92 0036 CB01      		movw r24,r22
  93 0038 77FF      		sbrs r23,7
  94 003a 00C0      		rjmp .L7
  95 003c 90E0      		ldi r25,0
  96 003e 80E0      		ldi r24,0
  97               	.L7:
  56:graphics.c    **** 	{
  57:graphics.c    **** 		return;
  58:graphics.c    **** 	}
  59:graphics.c    **** 
  60:graphics.c    **** 	if(x < 0)
  61:graphics.c    **** 	{
  62:graphics.c    **** 		x = 0;
  63:graphics.c    **** 	}
  64:graphics.c    **** 
  65:graphics.c    **** 	if(y < 0)
  66:graphics.c    **** 	{
  67:graphics.c    **** 		y = 0;
  68:graphics.c    **** 	}
  69:graphics.c    **** 
  70:graphics.c    **** 	if(x + w >= LCD_WIDTH)
  99               	.LM9:
 100 0040 B901      		movw r22,r18
 101 0042 6E0F      		add r22,r30
 102 0044 7F1F      		adc r23,r31
 104               	.LM10:
 105 0046 603F      		cpi r22,-16
 106 0048 7105      		cpc r23,__zero_reg__
 107 004a 04F0      		brlt .L8
  71:graphics.c    **** 	{
  72:graphics.c    **** 		w = LCD_WIDTH - x;
 109               	.LM11:
 110 004c E0EF      		ldi r30,lo8(-16)
 111 004e F0E0      		ldi r31,0
 112 0050 E21B      		sub r30,r18
 113 0052 F30B      		sbc r31,r19
 114               	.L8:
  73:graphics.c    **** 	}
  74:graphics.c    **** 
  75:graphics.c    **** 	if(y + h >= LCD_HEIGHT)
 116               	.LM12:
 117 0054 BC01      		movw r22,r24
 118 0056 640F      		add r22,r20
 119 0058 751F      		adc r23,r21
 121               	.LM13:
 122 005a 6034      		cpi r22,64
 123 005c 7140      		sbci r23,1
 124 005e 04F0      		brlt .L9
  76:graphics.c    **** 	{
  77:graphics.c    **** 		h = LCD_HEIGHT - y;
 126               	.LM14:
 127 0060 40E4      		ldi r20,lo8(64)
 128 0062 51E0      		ldi r21,lo8(1)
 129 0064 481B      		sub r20,r24
 130 0066 590B      		sbc r21,r25
 131               	.L9:
  53:graphics.c    **** 	lo = (uint8_t)_color;
 133               	.LM15:
 134 0068 A091 0000 		lds r26,_color
 135 006c B091 0000 		lds r27,_color+1
  78:graphics.c    **** 	}
  79:graphics.c    **** 
  80:graphics.c    **** 	LCD_WINDOW_BEGIN(x, y, x + w - 1, y + h - 1);
 137               	.LM16:
 138 0070 4598      		cbi 0x8,5
 139 0072 4498      		cbi 0x8,4
 140 0074 12B8      		out 0x2,__zero_reg__
 141 0076 4398      		cbi 0x8,3
 142 0078 439A      		sbi 0x8,3
 143 007a 6AE2      		ldi r22,lo8(42)
 144 007c 62B9      		out 0x2,r22
 145 007e 4398      		cbi 0x8,3
 146 0080 439A      		sbi 0x8,3
 147 0082 449A      		sbi 0x8,4
 148 0084 32B9      		out 0x2,r19
 149 0086 4398      		cbi 0x8,3
 150 0088 439A      		sbi 0x8,3
 151 008a 449A      		sbi 0x8,4
 152 008c 22B9      		out 0x2,r18
 153 008e 4398      		cbi 0x8,3
 154 0090 439A      		sbi 0x8,3
 155 0092 449A      		sbi 0x8,4
 156 0094 B901      		movw r22,r18
 157 0096 6E0F      		add r22,r30
 158 0098 7F1F      		adc r23,r31
 159 009a 6150      		subi r22,1
 160 009c 7109      		sbc r23,__zero_reg__
 161 009e 72B9      		out 0x2,r23
 162 00a0 4398      		cbi 0x8,3
 163 00a2 439A      		sbi 0x8,3
 164 00a4 449A      		sbi 0x8,4
 165 00a6 2150      		subi r18,lo8(-(-1))
 166 00a8 2E0F      		add r18,r30
 167 00aa 22B9      		out 0x2,r18
 168 00ac 4398      		cbi 0x8,3
 169 00ae 439A      		sbi 0x8,3
 170 00b0 459A      		sbi 0x8,5
 171 00b2 4598      		cbi 0x8,5
 172 00b4 4498      		cbi 0x8,4
 173 00b6 12B8      		out 0x2,__zero_reg__
 174 00b8 4398      		cbi 0x8,3
 175 00ba 439A      		sbi 0x8,3
 176 00bc 2BE2      		ldi r18,lo8(43)
 177 00be 22B9      		out 0x2,r18
 178 00c0 4398      		cbi 0x8,3
 179 00c2 439A      		sbi 0x8,3
 180 00c4 449A      		sbi 0x8,4
 181 00c6 92B9      		out 0x2,r25
 182 00c8 4398      		cbi 0x8,3
 183 00ca 439A      		sbi 0x8,3
 184 00cc 449A      		sbi 0x8,4
 185 00ce 82B9      		out 0x2,r24
 186 00d0 4398      		cbi 0x8,3
 187 00d2 439A      		sbi 0x8,3
 188 00d4 449A      		sbi 0x8,4
 189 00d6 9C01      		movw r18,r24
 190 00d8 240F      		add r18,r20
 191 00da 351F      		adc r19,r21
 192 00dc 2150      		subi r18,1
 193 00de 3109      		sbc r19,__zero_reg__
 194 00e0 32B9      		out 0x2,r19
 195 00e2 4398      		cbi 0x8,3
 196 00e4 439A      		sbi 0x8,3
 197 00e6 449A      		sbi 0x8,4
 198 00e8 8150      		subi r24,lo8(-(-1))
 199 00ea 840F      		add r24,r20
 200 00ec 82B9      		out 0x2,r24
 201 00ee 4398      		cbi 0x8,3
 202 00f0 439A      		sbi 0x8,3
 203 00f2 459A      		sbi 0x8,5
 204 00f4 4598      		cbi 0x8,5
 205 00f6 4498      		cbi 0x8,4
 206 00f8 12B8      		out 0x2,__zero_reg__
 207 00fa 4398      		cbi 0x8,3
 208 00fc 439A      		sbi 0x8,3
 209 00fe 8CE2      		ldi r24,lo8(44)
 210 0100 82B9      		out 0x2,r24
 211 0102 4398      		cbi 0x8,3
 212 0104 439A      		sbi 0x8,3
 213 0106 449A      		sbi 0x8,4
 214               	.L11:
  81:graphics.c    **** 	do
  82:graphics.c    **** 	{
  83:graphics.c    **** 		end = w;
 216               	.LM17:
 217 0108 CF01      		movw r24,r30
 218               	.L10:
  84:graphics.c    **** 		do
  85:graphics.c    **** 		{
  86:graphics.c    **** 			WRITE_8(hi);
 220               	.LM18:
 221 010a B2B9      		out 0x2,r27
 222 010c 4398      		cbi 0x8,3
 223 010e 439A      		sbi 0x8,3
  87:graphics.c    **** 			WRITE_8(lo);
 225               	.LM19:
 226 0110 A2B9      		out 0x2,r26
 227 0112 4398      		cbi 0x8,3
 228 0114 439A      		sbi 0x8,3
  88:graphics.c    **** 		}
  89:graphics.c    **** 		while(--end);
 230               	.LM20:
 231 0116 0197      		sbiw r24,1
 232 0118 01F4      		brne .L10
  90:graphics.c    **** 	}
  91:graphics.c    **** 	while(--h);
 234               	.LM21:
 235 011a 4150      		subi r20,1
 236 011c 5109      		sbc r21,__zero_reg__
 237 011e 01F4      		brne .L11
  92:graphics.c    **** 	LCD_WINDOW_END();
 239               	.LM22:
 240 0120 459A      		sbi 0x8,5
 241               	.L4:
 242               	/* epilogue start */
  93:graphics.c    **** }
 244               	.LM23:
 245 0122 0895      		ret
 250               	.Lscope2:
 258               	lcd_rect_border:
  94:graphics.c    **** 
  95:graphics.c    **** static void lcd_pixel(int16_t x, int16_t y)
  96:graphics.c    **** {
  97:graphics.c    **** 	if(x < 0 || y < 0 || x >= LCD_WIDTH || y >= LCD_HEIGHT)
  98:graphics.c    **** 	{
  99:graphics.c    **** 		return;
 100:graphics.c    **** 	}
 101:graphics.c    **** 
 102:graphics.c    **** 	LCD_WINDOW_BEGIN((uint16_t)x, (uint16_t)y, (uint16_t)x + 1, (uint16_t)y + 1);
 103:graphics.c    **** 	WRITE_8((uint8_t)(_color >> 8));
 104:graphics.c    **** 	WRITE_8((uint8_t)_color);
 105:graphics.c    **** 	LCD_WINDOW_END();
 106:graphics.c    **** }
 107:graphics.c    **** 
 108:graphics.c    **** static void lcd_line(int16_t x0, int16_t y0, int16_t x1, int16_t y1)
 109:graphics.c    **** {
 110:graphics.c    **** 	int16_t dx, dy, sx, sy, e0, e1;
 111:graphics.c    **** 	dx = abs(x1 - x0);
 112:graphics.c    **** 	sx = x0 < x1 ? 1 : -1;
 113:graphics.c    **** 	dy = abs(y1 - y0);
 114:graphics.c    **** 	sy = y0 < y1 ? 1 : -1;
 115:graphics.c    **** 	e0 = (dx > dy ? dx : -dy) / 2;
 116:graphics.c    **** 	while(x0 != x1 && y0 != y1)
 117:graphics.c    **** 	{
 118:graphics.c    **** 		lcd_pixel(x0, y0);
 119:graphics.c    **** 		e1 = e0;
 120:graphics.c    **** 		if(e1 > -dx)
 121:graphics.c    **** 		{
 122:graphics.c    **** 			e0 -= dy;
 123:graphics.c    **** 			x0 += sx;
 124:graphics.c    **** 		}
 125:graphics.c    **** 
 126:graphics.c    **** 		if(e1 < dy)
 127:graphics.c    **** 		{
 128:graphics.c    **** 			e0 += dx;
 129:graphics.c    **** 			y0 += sy;
 130:graphics.c    **** 		}
 131:graphics.c    **** 	}
 132:graphics.c    **** }
 133:graphics.c    **** 
 134:graphics.c    **** static uint8_t lcd_char(uint16_t x, uint16_t y, char c)
 135:graphics.c    **** {
 136:graphics.c    **** 	uint8_t width = 0;
 137:graphics.c    **** 	if(c >= 32 && c <= 126)
 138:graphics.c    **** 	{
 139:graphics.c    **** 		uint8_t col, row, data;
 140:graphics.c    **** 		c -= 32;
 141:graphics.c    **** 		width = pgm_read_byte(font_default_widths + c);
 142:graphics.c    **** 		for(row = 0; row < FONT_HEIGHT; ++row)
 143:graphics.c    **** 		{
 144:graphics.c    **** 			data = pgm_read_byte(font_default_chars + (c * FONT_HEIGHT + row));
 145:graphics.c    **** 			for(col = 0; col < width; ++col)
 146:graphics.c    **** 			{
 147:graphics.c    **** 				if((data >> col) & 1)
 148:graphics.c    **** 				{
 149:graphics.c    **** 					lcd_pixel(x + col, y + row);
 150:graphics.c    **** 				}
 151:graphics.c    **** 			}
 152:graphics.c    **** 		}
 153:graphics.c    **** 	}
 154:graphics.c    **** 
 155:graphics.c    **** 	return width;
 156:graphics.c    **** }
 157:graphics.c    **** 
 158:graphics.c    **** static uint16_t lcd_string(uint16_t x, uint16_t y, const char *s)
 159:graphics.c    **** {
 160:graphics.c    **** 	char c;
 161:graphics.c    **** 	for(; (c = *s); ++s)
 162:graphics.c    **** 	{
 163:graphics.c    **** 		x += lcd_char(x, y, c);
 164:graphics.c    **** 	}
 165:graphics.c    **** 
 166:graphics.c    **** 	return x;
 167:graphics.c    **** }
 168:graphics.c    **** 
 169:graphics.c    **** static uint16_t lcd_string_P(uint16_t x, uint16_t y, const char *s)
 170:graphics.c    **** {
 171:graphics.c    **** 	char c;
 172:graphics.c    **** 	for(; (c = pgm_read_byte(s)); ++s)
 173:graphics.c    **** 	{
 174:graphics.c    **** 		x += lcd_char(x, y, c);
 175:graphics.c    **** 	}
 176:graphics.c    **** 
 177:graphics.c    **** 	return x;
 178:graphics.c    **** }
 179:graphics.c    **** 
 180:graphics.c    **** static uint8_t lcd_width_char(char c)
 181:graphics.c    **** {
 182:graphics.c    **** 	uint8_t x = 0;
 183:graphics.c    **** 	if(c >= 32 && c <= 126)
 184:graphics.c    **** 	{
 185:graphics.c    **** 		c -= 32;
 186:graphics.c    **** 		x += pgm_read_byte(font_default_widths + c);
 187:graphics.c    **** 	}
 188:graphics.c    **** 
 189:graphics.c    **** 	return x;
 190:graphics.c    **** }
 191:graphics.c    **** 
 192:graphics.c    **** static uint16_t lcd_string_width(const char *s)
 193:graphics.c    **** {
 194:graphics.c    **** 	uint16_t x = 0;
 195:graphics.c    **** 	char c;
 196:graphics.c    **** 	for(; (c = *s); ++s)
 197:graphics.c    **** 	{
 198:graphics.c    **** 		x += lcd_width_char(c);
 199:graphics.c    **** 	}
 200:graphics.c    **** 
 201:graphics.c    **** 	return x;
 202:graphics.c    **** }
 203:graphics.c    **** 
 204:graphics.c    **** static uint16_t lcd_string_width_P(const char *s)
 205:graphics.c    **** {
 206:graphics.c    **** 	uint16_t x = 0;
 207:graphics.c    **** 	char c;
 208:graphics.c    **** 	for(; (c = pgm_read_byte(s)); ++s)
 209:graphics.c    **** 	{
 210:graphics.c    **** 		x += lcd_width_char(c);
 211:graphics.c    **** 	}
 212:graphics.c    **** 
 213:graphics.c    **** 	return x;
 214:graphics.c    **** }
 215:graphics.c    **** 
 216:graphics.c    **** static uint16_t lcd_string_width_len(const char *s, uint8_t len)
 217:graphics.c    **** {
 218:graphics.c    **** 	uint16_t x = 0;
 219:graphics.c    **** 	uint8_t i;
 220:graphics.c    **** 	char c;
 221:graphics.c    **** 	for(i = 0; i < len; ++i)
 222:graphics.c    **** 	{
 223:graphics.c    **** 		c = s[i];
 224:graphics.c    **** 		x += lcd_width_char(c);
 225:graphics.c    **** 	}
 226:graphics.c    **** 
 227:graphics.c    **** 	return x;
 228:graphics.c    **** }
 229:graphics.c    **** 
 230:graphics.c    **** static void lcd_string_ml(uint16_t x, uint16_t y, uint8_t h, const char *s)
 231:graphics.c    **** {
 232:graphics.c    **** 	uint16_t x0;
 233:graphics.c    **** 	char c;
 234:graphics.c    **** 	for(x0 = x; (c = *s); ++s)
 235:graphics.c    **** 	{
 236:graphics.c    **** 		if(c == '\n')
 237:graphics.c    **** 		{
 238:graphics.c    **** 			y += h;
 239:graphics.c    **** 			x0 = x;
 240:graphics.c    **** 			continue;
 241:graphics.c    **** 		}
 242:graphics.c    **** 
 243:graphics.c    **** 		x0 += lcd_char(x0, y, c);
 244:graphics.c    **** 	}
 245:graphics.c    **** }
 246:graphics.c    **** 
 247:graphics.c    **** #define lcd_vline(x, y, h) lcd_rect(x, y, 1, h)
 248:graphics.c    **** #define lcd_hline(x, y, w) lcd_rect(x, y, w, 1)
 249:graphics.c    **** #define lcd_color(color) _color = color
 250:graphics.c    **** 
 251:graphics.c    **** static void lcd_rect_border(int16_t x, int16_t y, int16_t w, int16_t h)
 252:graphics.c    **** {
 260               	.LM24:
 261               	.LFBB3:
 262 0124 CF92      		push r12
 263 0126 DF92      		push r13
 264 0128 EF92      		push r14
 265 012a FF92      		push r15
 266 012c 0F93      		push r16
 267 012e 1F93      		push r17
 268 0130 CF93      		push r28
 269 0132 DF93      		push r29
 270               	/* prologue: function */
 271               	/* frame size = 0 */
 272               	/* stack size = 8 */
 273               	.L__stack_usage = 8
 274 0134 EC01      		movw r28,r24
 275 0136 8B01      		movw r16,r22
 276 0138 6A01      		movw r12,r20
 277 013a 7901      		movw r14,r18
 253:graphics.c    **** 	lcd_hline(x, y, w);
 279               	.LM25:
 280 013c 21E0      		ldi r18,lo8(1)
 281 013e 30E0      		ldi r19,0
 282 0140 0E94 0000 		call lcd_rect
 254:graphics.c    **** 	lcd_hline(x, y + h - 1, w);
 284               	.LM26:
 285 0144 B801      		movw r22,r16
 286 0146 6E0D      		add r22,r14
 287 0148 7F1D      		adc r23,r15
 288 014a 6150      		subi r22,1
 289 014c 7109      		sbc r23,__zero_reg__
 290 014e 21E0      		ldi r18,lo8(1)
 291 0150 30E0      		ldi r19,0
 292 0152 A601      		movw r20,r12
 293 0154 CE01      		movw r24,r28
 294 0156 0E94 0000 		call lcd_rect
 255:graphics.c    **** 
 256:graphics.c    **** 	lcd_vline(x, y + 1, h - 2);
 296               	.LM27:
 297 015a 82E0      		ldi r24,2
 298 015c E81A      		sub r14,r24
 299 015e F108      		sbc r15,__zero_reg__
 300 0160 0F5F      		subi r16,-1
 301 0162 1F4F      		sbci r17,-1
 302 0164 9701      		movw r18,r14
 303 0166 41E0      		ldi r20,lo8(1)
 304 0168 50E0      		ldi r21,0
 305 016a B801      		movw r22,r16
 306 016c CE01      		movw r24,r28
 307 016e 0E94 0000 		call lcd_rect
 257:graphics.c    **** 	lcd_vline(x + w - 1, y + 1, h - 2);
 309               	.LM28:
 310 0172 CE01      		movw r24,r28
 311 0174 8C0D      		add r24,r12
 312 0176 9D1D      		adc r25,r13
 313 0178 9701      		movw r18,r14
 314 017a 41E0      		ldi r20,lo8(1)
 315 017c 50E0      		ldi r21,0
 316 017e B801      		movw r22,r16
 317 0180 0197      		sbiw r24,1
 318               	/* epilogue start */
 258:graphics.c    **** }
 320               	.LM29:
 321 0182 DF91      		pop r29
 322 0184 CF91      		pop r28
 323 0186 1F91      		pop r17
 324 0188 0F91      		pop r16
 325 018a FF90      		pop r15
 326 018c EF90      		pop r14
 327 018e DF90      		pop r13
 328 0190 CF90      		pop r12
 257:graphics.c    **** 	lcd_vline(x + w - 1, y + 1, h - 2);
 330               	.LM30:
 331 0192 0C94 0000 		jmp lcd_rect
 333               	.Lscope3:
 341               	lcd_rect_border2:
 259:graphics.c    **** 
 260:graphics.c    **** static void lcd_rect_border2(int16_t x, int16_t y, int16_t w, int16_t h)
 261:graphics.c    **** {
 343               	.LM31:
 344               	.LFBB4:
 345 0196 CF92      		push r12
 346 0198 DF92      		push r13
 347 019a EF92      		push r14
 348 019c FF92      		push r15
 349 019e 0F93      		push r16
 350 01a0 1F93      		push r17
 351 01a2 CF93      		push r28
 352 01a4 DF93      		push r29
 353               	/* prologue: function */
 354               	/* frame size = 0 */
 355               	/* stack size = 8 */
 356               	.L__stack_usage = 8
 357 01a6 EC01      		movw r28,r24
 358 01a8 8B01      		movw r16,r22
 359 01aa 6A01      		movw r12,r20
 360 01ac 7901      		movw r14,r18
 262:graphics.c    **** 	lcd_rect(x, y, w, 2);
 362               	.LM32:
 363 01ae 22E0      		ldi r18,lo8(2)
 364 01b0 30E0      		ldi r19,0
 365 01b2 0E94 0000 		call lcd_rect
 263:graphics.c    **** 	lcd_rect(x, y + h - 2, w, 2);
 367               	.LM33:
 368 01b6 B801      		movw r22,r16
 369 01b8 6E0D      		add r22,r14
 370 01ba 7F1D      		adc r23,r15
 372               	.LM34:
 373 01bc 6250      		subi r22,2
 374 01be 7109      		sbc r23,__zero_reg__
 375 01c0 22E0      		ldi r18,lo8(2)
 376 01c2 30E0      		ldi r19,0
 377 01c4 A601      		movw r20,r12
 378 01c6 CE01      		movw r24,r28
 379 01c8 0E94 0000 		call lcd_rect
 264:graphics.c    **** 
 265:graphics.c    **** 	lcd_rect(x, y + 2, 2, h - 4);
 381               	.LM35:
 382 01cc 84E0      		ldi r24,4
 383 01ce E81A      		sub r14,r24
 384 01d0 F108      		sbc r15,__zero_reg__
 385 01d2 0E5F      		subi r16,-2
 386 01d4 1F4F      		sbci r17,-1
 387 01d6 9701      		movw r18,r14
 388 01d8 42E0      		ldi r20,lo8(2)
 389 01da 50E0      		ldi r21,0
 390 01dc B801      		movw r22,r16
 391 01de CE01      		movw r24,r28
 392 01e0 0E94 0000 		call lcd_rect
 266:graphics.c    **** 	lcd_rect(x + w - 2, y + 2, 2, h - 4);
 394               	.LM36:
 395 01e4 CE01      		movw r24,r28
 396 01e6 8C0D      		add r24,r12
 397 01e8 9D1D      		adc r25,r13
 399               	.LM37:
 400 01ea 9701      		movw r18,r14
 401 01ec 42E0      		ldi r20,lo8(2)
 402 01ee 50E0      		ldi r21,0
 403 01f0 B801      		movw r22,r16
 404 01f2 0297      		sbiw r24,2
 405               	/* epilogue start */
 267:graphics.c    **** }
 407               	.LM38:
 408 01f4 DF91      		pop r29
 409 01f6 CF91      		pop r28
 410 01f8 1F91      		pop r17
 411 01fa 0F91      		pop r16
 412 01fc FF90      		pop r15
 413 01fe EF90      		pop r14
 414 0200 DF90      		pop r13
 415 0202 CF90      		pop r12
 266:graphics.c    **** 	lcd_rect(x + w - 2, y + 2, 2, h - 4);
 417               	.LM39:
 418 0204 0C94 0000 		jmp lcd_rect
 420               	.Lscope4:
 426               	uart_tx:
 428               	.Ltext3:
   1:uart.c        **** #include <stdint.h>
   2:uart.c        **** #include <avr/io.h>
   3:uart.c        **** #include <avr/interrupt.h>
   4:uart.c        **** #include <avr/pgmspace.h>
   5:uart.c        **** 
   6:uart.c        **** #define UART_BAUD  9600
   7:uart.c        **** #define _BAUD          (((F_CPU / (UART_BAUD * 16UL))) - 1)
   8:uart.c        **** 
   9:uart.c        **** static void uart_init(void)
  10:uart.c        **** {
  11:uart.c        **** 	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
  12:uart.c        **** 	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
  13:uart.c        **** 	UBRR0L = (uint8_t)(_BAUD & 0xFF);
  14:uart.c        **** 	UBRR0H = (uint8_t)((_BAUD >> 8) & 0xFF);
  15:uart.c        **** }
  16:uart.c        **** 
  17:uart.c        **** static void uart_tx(char c)
  18:uart.c        **** {
 430               	.LM40:
 431               	.LFBB5:
 432               	/* prologue: function */
 433               	/* frame size = 0 */
 434               	/* stack size = 0 */
 435               	.L__stack_usage = 0
 436               	.L23:
  19:uart.c        **** 	while(!(UCSR0A & (1 << UDRE0))) ;
 438               	.LM41:
 439 0208 9091 C000 		lds r25,192
 441               	.LM42:
 442 020c 95FF      		sbrs r25,5
 443 020e 00C0      		rjmp .L23
  20:uart.c        **** 	UDR0 = c;
 445               	.LM43:
 446 0210 8093 C600 		sts 198,r24
 447               	/* epilogue start */
  21:uart.c        **** }
 449               	.LM44:
 450 0214 0895      		ret
 452               	.Lscope5:
 457               	key_shift:
 459               	.Ltext4:
   1:keyboard.c    **** static uint8_t cur_key, kbd_mode = 2;
   2:keyboard.c    **** 
   3:keyboard.c    **** typedef struct KEYBOARD_KEY
   4:keyboard.c    **** {
   5:keyboard.c    **** 	uint8_t X, Y, W, Left, Right, Up, Down;
   6:keyboard.c    **** 	char Key, KeyShift;
   7:keyboard.c    **** 
   8:keyboard.c    **** } KeyboardKey;
   9:keyboard.c    **** 
  10:keyboard.c    **** static const KeyboardKey keys[51] PROGMEM =
  11:keyboard.c    **** {
  12:keyboard.c    **** 	/* Row 0 - 14 Keys */
  13:keyboard.c    **** 	{ .X =   0, .Y =  1, .W = 16, .Left = 0xFF, .Right =    1, .Up = 0xFF, .Down =   14, .Key = '`',  
  14:keyboard.c    **** 	{ .X =  17, .Y =  1, .W = 15, .Left =    0, .Right =    2, .Up = 0xFF, .Down =   15, .Key = '1',  
  15:keyboard.c    **** 	{ .X =  33, .Y =  1, .W = 15, .Left =    1, .Right =    3, .Up = 0xFF, .Down =   16, .Key = '2',  
  16:keyboard.c    **** 	{ .X =  49, .Y =  1, .W = 15, .Left =    2, .Right =    4, .Up = 0xFF, .Down =   17, .Key = '3',  
  17:keyboard.c    **** 	{ .X =  65, .Y =  1, .W = 15, .Left =    3, .Right =    5, .Up = 0xFF, .Down =   18, .Key = '4',  
  18:keyboard.c    **** 	{ .X =  81, .Y =  1, .W = 15, .Left =    4, .Right =    6, .Up = 0xFF, .Down =   19, .Key = '5',  
  19:keyboard.c    **** 	{ .X =  97, .Y =  1, .W = 15, .Left =    5, .Right =    7, .Up = 0xFF, .Down =   20, .Key = '6',  
  20:keyboard.c    **** 	{ .X = 113, .Y =  1, .W = 15, .Left =    6, .Right =    8, .Up = 0xFF, .Down =   21, .Key = '7',  
  21:keyboard.c    **** 	{ .X = 129, .Y =  1, .W = 15, .Left =    7, .Right =    9, .Up = 0xFF, .Down =   22, .Key = '8',  
  22:keyboard.c    **** 	{ .X = 145, .Y =  1, .W = 15, .Left =    8, .Right =   10, .Up = 0xFF, .Down =   23, .Key = '9',  
  23:keyboard.c    **** 	{ .X = 161, .Y =  1, .W = 15, .Left =    9, .Right =   11, .Up = 0xFF, .Down =   24, .Key = '0',  
  24:keyboard.c    **** 	{ .X = 177, .Y =  1, .W = 15, .Left =   10, .Right =   12, .Up = 0xFF, .Down =   25, .Key = '-',  
  25:keyboard.c    **** 	{ .X = 193, .Y =  1, .W = 15, .Left =   11, .Right =   13, .Up = 0xFF, .Down =   26, .Key = '+',  
  26:keyboard.c    **** 	{ .X = 209, .Y =  1, .W = 31, .Left =   12, .Right = 0xFF, .Up = 0xFF, .Down =   27, .Key = '\b', 
  27:keyboard.c    **** 
  28:keyboard.c    **** 	/* Row 1 - 14 Keys */
  29:keyboard.c    **** 	{ .X =   0, .Y = 17, .W = 24, .Left = 0xFF, .Right =   15, .Up =    0, .Down = 0xFF, .Key = '\t', 
  30:keyboard.c    **** 	{ .X =  25, .Y = 17, .W = 15, .Left =   14, .Right =   16, .Up =    1, .Down =   28, .Key = 'q',  
  31:keyboard.c    **** 	{ .X =  41, .Y = 17, .W = 15, .Left =   15, .Right =   17, .Up =    2, .Down =   29, .Key = 'w',  
  32:keyboard.c    **** 	{ .X =  57, .Y = 17, .W = 15, .Left =   16, .Right =   18, .Up =    3, .Down =   30, .Key = 'e',  
  33:keyboard.c    **** 	{ .X =  73, .Y = 17, .W = 15, .Left =   17, .Right =   19, .Up =    4, .Down =   31, .Key = 'r',  
  34:keyboard.c    **** 	{ .X =  89, .Y = 17, .W = 15, .Left =   18, .Right =   20, .Up =    5, .Down =   32, .Key = 't',  
  35:keyboard.c    **** 	{ .X = 105, .Y = 17, .W = 15, .Left =   19, .Right =   21, .Up =    6, .Down =   33, .Key = 'y',  
  36:keyboard.c    **** 	{ .X = 121, .Y = 17, .W = 15, .Left =   20, .Right =   22, .Up =    7, .Down =   34, .Key = 'u',  
  37:keyboard.c    **** 	{ .X = 137, .Y = 17, .W = 15, .Left =   21, .Right =   23, .Up =    8, .Down =   35, .Key = 'i',  
  38:keyboard.c    **** 	{ .X = 153, .Y = 17, .W = 15, .Left =   22, .Right =   24, .Up =    9, .Down =   36, .Key = 'o',  
  39:keyboard.c    **** 	{ .X = 169, .Y = 17, .W = 15, .Left =   23, .Right =   25, .Up =   10, .Down =   37, .Key = 'p',  
  40:keyboard.c    **** 	{ .X = 185, .Y = 17, .W = 15, .Left =   24, .Right =   26, .Up =   11, .Down =   38, .Key = '{',  
  41:keyboard.c    **** 	{ .X = 201, .Y = 17, .W = 15, .Left =   25, .Right =   27, .Up =   12, .Down =   39, .Key = '}',  
  42:keyboard.c    **** 	{ .X = 217, .Y = 17, .W = 23, .Left =   26, .Right = 0xFF, .Up =   13, .Down =   39, .Key = '|',  
  43:keyboard.c    **** 
  44:keyboard.c    **** 	/* Row 2 - 11 Keys */
  45:keyboard.c    **** 	{ .X =  29, .Y = 33, .W = 15, .Left = 0xFF, .Right =   29, .Up =   15, .Down =   40, .Key = 'a',  
  46:keyboard.c    **** 	{ .X =  45, .Y = 33, .W = 15, .Left =   28, .Right =   30, .Up =   16, .Down =   41, .Key = 's',  
  47:keyboard.c    **** 	{ .X =  61, .Y = 33, .W = 15, .Left =   29, .Right =   31, .Up =   17, .Down =   42, .Key = 'd',  
  48:keyboard.c    **** 	{ .X =  77, .Y = 33, .W = 15, .Left =   30, .Right =   32, .Up =   18, .Down =   43, .Key = 'f',  
  49:keyboard.c    **** 	{ .X =  93, .Y = 33, .W = 15, .Left =   31, .Right =   33, .Up =   19, .Down =   44, .Key = 'g',  
  50:keyboard.c    **** 	{ .X = 109, .Y = 33, .W = 15, .Left =   32, .Right =   34, .Up =   20, .Down =   45, .Key = 'h',  
  51:keyboard.c    **** 	{ .X = 125, .Y = 33, .W = 15, .Left =   33, .Right =   35, .Up =   21, .Down =   46, .Key = 'j',  
  52:keyboard.c    **** 	{ .X = 141, .Y = 33, .W = 15, .Left =   34, .Right =   36, .Up =   22, .Down =   47, .Key = 'k',  
  53:keyboard.c    **** 	{ .X = 157, .Y = 33, .W = 15, .Left =   35, .Right =   37, .Up =   23, .Down =   48, .Key = 'l',  
  54:keyboard.c    **** 	{ .X = 173, .Y = 33, .W = 15, .Left =   36, .Right =   38, .Up =   24, .Down =   49, .Key = ':',  
  55:keyboard.c    **** 	{ .X = 189, .Y = 33, .W = 15, .Left =   37, .Right =   39, .Up =   25, .Down =   49, .Key = '"',  
  56:keyboard.c    **** 	{ .X = 205, .Y = 33, .W = 35, .Left =   38, .Right = 0xFF, .Up =   26, .Down =   49, .Key = '\n', 
  57:keyboard.c    **** 
  58:keyboard.c    **** 	/* Row 3 - 10 Keys */
  59:keyboard.c    **** 	{ .X =  33, .Y = 49, .W = 15, .Left = 0xFF, .Right =   41, .Up =   28, .Down =   50, .Key = 'z', .
  60:keyboard.c    **** 	{ .X =  49, .Y = 49, .W = 15, .Left =   40, .Right =   42, .Up =   29, .Down =   50, .Key = 'x', .
  61:keyboard.c    **** 	{ .X =  65, .Y = 49, .W = 15, .Left =   41, .Right =   43, .Up =   30, .Down =   50, .Key = 'c', .
  62:keyboard.c    **** 	{ .X =  81, .Y = 49, .W = 15, .Left =   42, .Right =   44, .Up =   31, .Down =   50, .Key = 'v', .
  63:keyboard.c    **** 	{ .X =  97, .Y = 49, .W = 15, .Left =   43, .Right =   45, .Up =   32, .Down =   50, .Key = 'b', .
  64:keyboard.c    **** 	{ .X = 113, .Y = 49, .W = 15, .Left =   44, .Right =   46, .Up =   33, .Down =   50, .Key = 'n', .
  65:keyboard.c    **** 	{ .X = 129, .Y = 49, .W = 15, .Left =   45, .Right =   47, .Up =   34, .Down =   50, .Key = 'm', .
  66:keyboard.c    **** 	{ .X = 145, .Y = 49, .W = 15, .Left =   46, .Right =   48, .Up =   35, .Down =   50, .Key = '<', .
  67:keyboard.c    **** 	{ .X = 161, .Y = 49, .W = 15, .Left =   47, .Right =   49, .Up =   36, .Down =   50, .Key = '>', .
  68:keyboard.c    **** 	{ .X = 177, .Y = 49, .W = 15, .Left =   48, .Right = 0xFF, .Up =   37, .Down =   50, .Key = '?', .
  69:keyboard.c    **** 
  70:keyboard.c    **** 	/* Row 4 - 1 Key */
  71:keyboard.c    **** 	{ .X =  65, .Y = 65, .W = 95, .Left = 0xFF, .Right = 0xFF, .Up =   44, .Down = 0xFF, .Key = ' ', .
  72:keyboard.c    **** };
  73:keyboard.c    **** 
  74:keyboard.c    **** static void event_key(uint8_t key, uint8_t ascii);
  75:keyboard.c    **** 
  76:keyboard.c    **** static uint8_t key_shift(uint8_t k)
  77:keyboard.c    **** {
 461               	.LM45:
 462               	.LFBB6:
 463               	/* prologue: function */
 464               	/* frame size = 0 */
 465               	/* stack size = 0 */
 466               	.L__stack_usage = 0
 467 0216 99E0      		ldi r25,lo8(9)
 468 0218 899F      		mul r24,r25
 469 021a F001      		movw r30,r0
 470 021c 1124      		clr __zero_reg__
  78:keyboard.c    **** 	return kbd_mode ? pgm_read_byte(&(keys[k].KeyShift)) : pgm_read_byte(&(keys[k].Key));
 472               	.LM46:
 473 021e 8091 0000 		lds r24,kbd_mode
 474 0222 8823      		tst r24
 475 0224 01F0      		breq .L27
 476               	.LBB43:
 478               	.LM47:
 479 0226 E050      		subi r30,lo8(-(keys+8))
 480 0228 F040      		sbci r31,hi8(-(keys+8))
 481               	.L29:
 482               	.LBE43:
 483               	.LBB44:
 485               	.LM48:
 486               	/* #APP */
 487               	 ;  78 "keyboard.c" 1
 488 022a 8491      		lpm r24, Z
 489               		
 490               	 ;  0 "" 2
 491               	/* #NOAPP */
 492               	/* epilogue start */
 493               	.LBE44:
  79:keyboard.c    **** }
 495               	.LM49:
 496 022c 0895      		ret
 497               	.L27:
 498               	.LBB45:
  78:keyboard.c    **** 	return kbd_mode ? pgm_read_byte(&(keys[k].KeyShift)) : pgm_read_byte(&(keys[k].Key));
 500               	.LM50:
 501 022e E050      		subi r30,lo8(-(keys+7))
 502 0230 F040      		sbci r31,hi8(-(keys+7))
 503 0232 00C0      		rjmp .L29
 504               	.LBE45:
 515               	.Lscope6:
 517               	.global	__addsf3
 518               	.global	__subsf3
 519               	.global	__mulsf3
 520               	.global	__eqsf2
 521               	.global	__divsf3
 522               	.global	__gesf2
 523               	.global	__lesf2
 530               	calc_solve:
 532               	.Ltext5:
   1:calc.c        **** #include <math.h>
   2:calc.c        **** #include <ctype.h>
   3:calc.c        **** #include <stdint.h>
   4:calc.c        **** #include <stdlib.h>
   5:calc.c        **** 
   6:calc.c        **** enum CHAR
   7:calc.c        **** {
   8:calc.c        **** 	CHAR_X = 'x',
   9:calc.c        **** 	CHAR_DP = '.',
  10:calc.c        **** 	CHAR_LP = '(',
  11:calc.c        **** 	CHAR_RP = ')',
  12:calc.c        **** 	CHAR_ADD = '+',
  13:calc.c        **** 	CHAR_SUB = '-',
  14:calc.c        **** 	CHAR_MUL = '*',
  15:calc.c        **** 	CHAR_DIV = '/',
  16:calc.c        **** 	CHAR_POW = '^',
  17:calc.c        **** };
  18:calc.c        **** 
  19:calc.c        **** enum PGM_STRING
  20:calc.c        **** {
  21:calc.c        **** 	ERROR_NOERROR,
  22:calc.c        **** 	ERROR_SYNTAX,
  23:calc.c        **** 	ERROR_MATH,
  24:calc.c        **** 	ERROR_NOMEM,
  25:calc.c        **** 	ERROR_RANGE,
  26:calc.c        **** 	STR_SIN,
  27:calc.c        **** 	STR_COS,
  28:calc.c        **** 	STR_TAN,
  29:calc.c        **** 	STR_ASIN,
  30:calc.c        **** 	STR_ACOS,
  31:calc.c        **** 	STR_ATAN,
  32:calc.c        **** 	STR_START,
  33:calc.c        **** 	STR_STEP,
  34:calc.c        **** 	STR_ERROR,
  35:calc.c        **** };
  36:calc.c        **** 
  37:calc.c        **** enum TOKEN_TYPE
  38:calc.c        **** {
  39:calc.c        **** 	/* Infix */
  40:calc.c        **** 	TT_NULL,
  41:calc.c        **** 	TT_NUMBER,
  42:calc.c        **** 	TT_X,
  43:calc.c        **** 	TT_LP,
  44:calc.c        **** 	TT_RP,
  45:calc.c        **** 
  46:calc.c        **** 	/* Postfix */
  47:calc.c        **** 	/* Unary */
  48:calc.c        **** 	TT_UNARY_MINUS,
  49:calc.c        **** 	TT_LOG,
  50:calc.c        **** 	TT_SIN,
  51:calc.c        **** 	TT_COS,
  52:calc.c        **** 	TT_TAN,
  53:calc.c        **** 	TT_ASIN,
  54:calc.c        **** 	TT_ACOS,
  55:calc.c        **** 	TT_ATAN,
  56:calc.c        **** 
  57:calc.c        **** 	/* Binary */
  58:calc.c        **** 	TT_ADD,
  59:calc.c        **** 	TT_SUB,
  60:calc.c        **** 	TT_MUL,
  61:calc.c        **** 	TT_DIV,
  62:calc.c        **** 	TT_POW,
  63:calc.c        **** };
  64:calc.c        **** 
  65:calc.c        **** #define NUMBER_STACK_SIZE      32
  66:calc.c        **** #define OPERATOR_STACK_SIZE    32
  67:calc.c        **** #define TOKEN_LIST_SIZE        32
  68:calc.c        **** #define OUTPUT_PRECISION        4
  69:calc.c        **** #define MODE_TABLE_STEP_BIG    10
  70:calc.c        **** #define TERM_MAX_LEN          256
  71:calc.c        **** 
  72:calc.c        **** #define UNSHIFT(key)             (key & ~(1 << 4))
  73:calc.c        **** #define RAD_TO_DEG(rad)          ((rad) * (180.0 / M_PI))
  74:calc.c        **** #define DEG_TO_RAD(deg)          ((deg) * M_PI / 180.0)
  75:calc.c        **** #define SIND(x)                  (sin(DEG_TO_RAD((float)(x))))
  76:calc.c        **** #define COSD(x)                  (cos(DEG_TO_RAD((float)(x))))
  77:calc.c        **** #define TAND(x)                  (tan(DEG_TO_RAD((float)(x))))
  78:calc.c        **** #define ASIND(x)                 (RAD_TO_DEG(asin((float)(x))))
  79:calc.c        **** #define ACOSD(x)                 (RAD_TO_DEG(acos((float)(x))))
  80:calc.c        **** #define ATAND(x)                 (RAD_TO_DEG(atan((float)(x))))
  81:calc.c        **** #define FORMAT_NUMBER(v, s, n) \
  82:calc.c        **** 	(uint8_t *)dtostrf(v, n, OUTPUT_PRECISION, (char *)s)
  83:calc.c        **** 
  84:calc.c        **** static uint8_t tok_cnt;
  85:calc.c        **** static uint8_t op_stack[OPERATOR_STACK_SIZE];
  86:calc.c        **** static float num_stack[NUMBER_STACK_SIZE];
  87:calc.c        **** static uint8_t tok_type_list[TOKEN_LIST_SIZE];
  88:calc.c        **** static float tok_num_list[TOKEN_LIST_SIZE];
  89:calc.c        **** 
  90:calc.c        **** static uint8_t calc_prepare(char *term);
  91:calc.c        **** static uint8_t calc_solve(float x, float *y);
  92:calc.c        **** static uint8_t asin_acos_range(float n);
  93:calc.c        **** static uint8_t get_precedence(uint8_t tt);
  94:calc.c        **** 
  95:calc.c        **** /* Calculation */
  96:calc.c        **** static uint8_t calc_prepare(char *term)
  97:calc.c        **** {
  98:calc.c        **** 	uint8_t c, cur_type, isop, top_stack, top_num;
  99:calc.c        **** 	cur_type = TT_NULL;
 100:calc.c        **** 	tok_cnt = 0;
 101:calc.c        **** 	top_num = 0;
 102:calc.c        **** 	top_stack = 0;
 103:calc.c        **** 	while((c = *term))
 104:calc.c        **** 	{
 105:calc.c        **** 		isop = 1;
 106:calc.c        **** 
 107:calc.c        **** 		/* Tokenizer */
 108:calc.c        **** 		if(isdigit(c))
 109:calc.c        **** 		{
 110:calc.c        **** 			/* Numbers */
 111:calc.c        **** 			char *begin, dps;
 112:calc.c        **** 			float n, power;
 113:calc.c        **** 
 114:calc.c        **** 			/* Find the end of the float */
 115:calc.c        **** 			for(dps = 0, begin = term; (c = *term); ++term)
 116:calc.c        **** 			{
 117:calc.c        **** 				if(c == CHAR_DP)
 118:calc.c        **** 				{
 119:calc.c        **** 					if(++dps > 1)
 120:calc.c        **** 					{
 121:calc.c        **** 						/* Return a syntax error if there
 122:calc.c        **** 						is more than one decimal point */
 123:calc.c        **** 						return ERROR_SYNTAX;
 124:calc.c        **** 					}
 125:calc.c        **** 				}
 126:calc.c        **** 				else if(!isdigit(c))
 127:calc.c        **** 				{
 128:calc.c        **** 					/* Break when the end of the number
 129:calc.c        **** 					(non digit character) is reached */
 130:calc.c        **** 					break;
 131:calc.c        **** 				}
 132:calc.c        **** 			}
 133:calc.c        **** 
 134:calc.c        **** 			/* Digits before the decimal point */
 135:calc.c        **** 			for(n = 0.0; begin < term; ++begin)
 136:calc.c        **** 			{
 137:calc.c        **** 				if((c = *begin) == CHAR_DP)
 138:calc.c        **** 				{
 139:calc.c        **** 					/* Skip the decimal point, if present */
 140:calc.c        **** 					++begin;
 141:calc.c        **** 					break;
 142:calc.c        **** 				}
 143:calc.c        **** 
 144:calc.c        **** 				n = n * 10.0 + c - '0';
 145:calc.c        **** 			}
 146:calc.c        **** 
 147:calc.c        **** 			/* Digits after the decimal point */
 148:calc.c        **** 			for(power = 1.0; begin < term; ++begin)
 149:calc.c        **** 			{
 150:calc.c        **** 				n = n * 10.0 + *begin - '0';
 151:calc.c        **** 				power *= 10.0;
 152:calc.c        **** 			}
 153:calc.c        **** 
 154:calc.c        **** 			if(tok_cnt >= TOKEN_LIST_SIZE - 1)
 155:calc.c        **** 			{
 156:calc.c        **** 				return ERROR_NOMEM;
 157:calc.c        **** 			}
 158:calc.c        **** 
 159:calc.c        **** 			tok_type_list[tok_cnt++] = cur_type = TT_NUMBER;
 160:calc.c        **** 			tok_num_list[top_num++] = n / power;
 161:calc.c        **** 			isop = 0;
 162:calc.c        **** 		}
 163:calc.c        **** 		else
 164:calc.c        **** 		{
 165:calc.c        **** 			/* Translate characters to tokens */
 166:calc.c        **** 			switch(c)
 167:calc.c        **** 			{
 168:calc.c        **** 			case CHAR_SUB:
 169:calc.c        **** 				switch(cur_type)
 170:calc.c        **** 				{
 171:calc.c        **** 				case TT_NULL:
 172:calc.c        **** 				case TT_ADD:
 173:calc.c        **** 				case TT_SUB:
 174:calc.c        **** 				case TT_MUL:
 175:calc.c        **** 				case TT_DIV:
 176:calc.c        **** 				case TT_POW:
 177:calc.c        **** 				case TT_LP:
 178:calc.c        **** 					cur_type = TT_UNARY_MINUS;
 179:calc.c        **** 					break;
 180:calc.c        **** 
 181:calc.c        **** 				case TT_NUMBER:
 182:calc.c        **** 				case TT_X:
 183:calc.c        **** 				case TT_RP:
 184:calc.c        **** 					cur_type = TT_SUB;
 185:calc.c        **** 					break;
 186:calc.c        **** 				}
 187:calc.c        **** 				break;
 188:calc.c        **** 
 189:calc.c        **** 			case CHAR_X:
 190:calc.c        **** 				if(tok_cnt >= TOKEN_LIST_SIZE - 1)
 191:calc.c        **** 				{
 192:calc.c        **** 					return ERROR_NOMEM;
 193:calc.c        **** 				}
 194:calc.c        **** 
 195:calc.c        **** 				tok_type_list[tok_cnt++] =
 196:calc.c        **** 					cur_type = TT_X;
 197:calc.c        **** 				isop = 0;
 198:calc.c        **** 				break;
 199:calc.c        **** 
 200:calc.c        **** 			/* Parenthesis */
 201:calc.c        **** 			case CHAR_LP:
 202:calc.c        **** 				/* Push onto the operator stack */
 203:calc.c        **** 				if(top_stack >= OPERATOR_STACK_SIZE - 1)
 204:calc.c        **** 				{
 205:calc.c        **** 					return ERROR_NOMEM;
 206:calc.c        **** 				}
 207:calc.c        **** 
 208:calc.c        **** 				op_stack[top_stack++] = cur_type = TT_LP;
 209:calc.c        **** 				isop = 0;
 210:calc.c        **** 				break;
 211:calc.c        **** 
 212:calc.c        **** 			case CHAR_RP:
 213:calc.c        **** 			{
 214:calc.c        **** 				/* Pop all operators from the stack
 215:calc.c        **** 				until the opening bracket is found */
 216:calc.c        **** 				uint8_t t, i;
 217:calc.c        **** 				cur_type = TT_RP;
 218:calc.c        **** 				i = 1;
 219:calc.c        **** 				while(i)
 220:calc.c        **** 				{
 221:calc.c        **** 					if(top_stack == 0)
 222:calc.c        **** 					{
 223:calc.c        **** 						/* Missing opening bracket */
 224:calc.c        **** 						return ERROR_SYNTAX;
 225:calc.c        **** 					}
 226:calc.c        **** 
 227:calc.c        **** 					if((t = op_stack[top_stack - 1]) == TT_LP)
 228:calc.c        **** 					{
 229:calc.c        **** 						i = 0;
 230:calc.c        **** 					}
 231:calc.c        **** 					else
 232:calc.c        **** 					{
 233:calc.c        **** 						if(tok_cnt >= TOKEN_LIST_SIZE - 1)
 234:calc.c        **** 						{
 235:calc.c        **** 							return ERROR_NOMEM;
 236:calc.c        **** 						}
 237:calc.c        **** 
 238:calc.c        **** 						tok_type_list[tok_cnt++] = t;
 239:calc.c        **** 					}
 240:calc.c        **** 
 241:calc.c        **** 					--top_stack;
 242:calc.c        **** 				}
 243:calc.c        **** 
 244:calc.c        **** 				isop = 0;
 245:calc.c        **** 				break;
 246:calc.c        **** 			}
 247:calc.c        **** 
 248:calc.c        **** 			/* Operators */
 249:calc.c        **** 			case CHAR_ADD:
 250:calc.c        **** 				cur_type = TT_ADD;
 251:calc.c        **** 				break;
 252:calc.c        **** 
 253:calc.c        **** 			case CHAR_MUL:
 254:calc.c        **** 				cur_type = TT_MUL;
 255:calc.c        **** 				break;
 256:calc.c        **** 
 257:calc.c        **** 			case CHAR_DIV:
 258:calc.c        **** 				cur_type = TT_DIV;
 259:calc.c        **** 				break;
 260:calc.c        **** 
 261:calc.c        **** 			case CHAR_POW:
 262:calc.c        **** 				cur_type = TT_POW;
 263:calc.c        **** 				break;
 264:calc.c        **** 
 265:calc.c        **** 			/* Logarithm */
 266:calc.c        **** 			case 'l':
 267:calc.c        **** 				cur_type = TT_LOG;
 268:calc.c        **** 				goto add2;
 269:calc.c        **** 
 270:calc.c        **** 			/* Trigonometric functions */
 271:calc.c        **** 			case 'a':
 272:calc.c        **** 				switch(*(++term))
 273:calc.c        **** 				{
 274:calc.c        **** 				case 's':
 275:calc.c        **** 					cur_type = TT_ASIN;
 276:calc.c        **** 					break;
 277:calc.c        **** 
 278:calc.c        **** 				case 'c':
 279:calc.c        **** 					cur_type = TT_ACOS;
 280:calc.c        **** 					break;
 281:calc.c        **** 
 282:calc.c        **** 				case 't':
 283:calc.c        **** 					cur_type = TT_ATAN;
 284:calc.c        **** 					break;
 285:calc.c        **** 				}
 286:calc.c        **** 
 287:calc.c        **** 				goto add2;
 288:calc.c        **** 
 289:calc.c        **** 			case 's':
 290:calc.c        **** 				cur_type = TT_SIN;
 291:calc.c        **** 				goto add2;
 292:calc.c        **** 
 293:calc.c        **** 			case 'c':
 294:calc.c        **** 				cur_type = TT_COS;
 295:calc.c        **** 				goto add2;
 296:calc.c        **** 
 297:calc.c        **** 			case 't':
 298:calc.c        **** 				cur_type = TT_TAN;
 299:calc.c        **** 
 300:calc.c        **** 			add2:
 301:calc.c        **** 				term += 2;
 302:calc.c        **** 			}
 303:calc.c        **** 
 304:calc.c        **** 			++term;
 305:calc.c        **** 		}
 306:calc.c        **** 
 307:calc.c        **** 		/* RPN converter using the
 308:calc.c        **** 		shunting yard algorithm */
 309:calc.c        **** 		if(isop)
 310:calc.c        **** 		{
 311:calc.c        **** 			/* Any operator: Pop all operators from
 312:calc.c        **** 			the stack that have a lower precedence */
 313:calc.c        **** 			uint8_t precedence, tmp;
 314:calc.c        **** 			precedence = get_precedence(cur_type);
 315:calc.c        **** 			while(top_stack > 0)
 316:calc.c        **** 			{
 317:calc.c        **** 				tmp = op_stack[top_stack - 1];
 318:calc.c        **** 				if((get_precedence(tmp) > precedence) ||
 319:calc.c        **** 					(tmp == TT_LP))
 320:calc.c        **** 				{
 321:calc.c        **** 					break;
 322:calc.c        **** 				}
 323:calc.c        **** 
 324:calc.c        **** 				--top_stack;
 325:calc.c        **** 				if(tok_cnt >= TOKEN_LIST_SIZE - 1)
 326:calc.c        **** 				{
 327:calc.c        **** 					return ERROR_NOMEM;
 328:calc.c        **** 				}
 329:calc.c        **** 
 330:calc.c        **** 				tok_type_list[tok_cnt++] = tmp;
 331:calc.c        **** 			}
 332:calc.c        **** 
 333:calc.c        **** 			if(top_stack >= OPERATOR_STACK_SIZE - 1)
 334:calc.c        **** 			{
 335:calc.c        **** 				return ERROR_NOMEM;
 336:calc.c        **** 			}
 337:calc.c        **** 
 338:calc.c        **** 			op_stack[top_stack++] = cur_type;
 339:calc.c        **** 		}
 340:calc.c        **** 	}
 341:calc.c        **** 
 342:calc.c        **** 	/* Pop all remaining operators from the stack */
 343:calc.c        **** 	while(top_stack > 0)
 344:calc.c        **** 	{
 345:calc.c        **** 		if(tok_cnt >= TOKEN_LIST_SIZE - 1)
 346:calc.c        **** 		{
 347:calc.c        **** 			return ERROR_NOMEM;
 348:calc.c        **** 		}
 349:calc.c        **** 
 350:calc.c        **** 		tok_type_list[tok_cnt++] =
 351:calc.c        **** 			op_stack[--top_stack];
 352:calc.c        **** 	}
 353:calc.c        **** 
 354:calc.c        **** 	return 0;
 355:calc.c        **** }
 356:calc.c        **** 
 357:calc.c        **** static uint8_t calc_solve(float x, float *y)
 358:calc.c        **** {
 534               	.LM51:
 535               	.LFBB7:
 536 0234 4F92      		push r4
 537 0236 5F92      		push r5
 538 0238 6F92      		push r6
 539 023a 7F92      		push r7
 540 023c 8F92      		push r8
 541 023e 9F92      		push r9
 542 0240 AF92      		push r10
 543 0242 BF92      		push r11
 544 0244 CF92      		push r12
 545 0246 DF92      		push r13
 546 0248 EF92      		push r14
 547 024a FF92      		push r15
 548 024c 0F93      		push r16
 549 024e 1F93      		push r17
 550 0250 CF93      		push r28
 551 0252 DF93      		push r29
 552 0254 CDB7      		in r28,__SP_L__
 553 0256 DEB7      		in r29,__SP_H__
 554 0258 2A97      		sbiw r28,10
 555 025a 0FB6      		in __tmp_reg__,__SREG__
 556 025c F894      		cli
 557 025e DEBF      		out __SP_H__,r29
 558 0260 0FBE      		out __SREG__,__tmp_reg__
 559 0262 CDBF      		out __SP_L__,r28
 560               	/* prologue: function */
 561               	/* frame size = 10 */
 562               	/* stack size = 26 */
 563               	.L__stack_usage = 26
 564 0264 E62E      		mov r14,r22
 565 0266 772E      		mov r7,r23
 566 0268 682E      		mov r6,r24
 567 026a 592E      		mov r5,r25
 568 026c 5A01      		movw r10,r20
 359:calc.c        **** 	float op_left, op_right;
 360:calc.c        **** 	uint8_t tok_type_i, tok_num_i, top_num;
 361:calc.c        **** 	tok_type_i = 0;
 362:calc.c        **** 	tok_num_i = 0;
 363:calc.c        **** 	top_num = 0;
 364:calc.c        **** 	for(; tok_type_i < tok_cnt; ++tok_type_i)
 570               	.LM52:
 571 026e 4090 0000 		lds r4,tok_cnt
 572 0272 80E0      		ldi r24,lo8(tok_type_list)
 573 0274 882E      		mov r8,r24
 574 0276 80E0      		ldi r24,hi8(tok_type_list)
 575 0278 982E      		mov r9,r24
 577               	.LM53:
 578 027a 6401      		movw r12,r8
 363:calc.c        **** 	for(; tok_type_i < tok_cnt; ++tok_type_i)
 580               	.LM54:
 581 027c 1986      		std Y+9,__zero_reg__
 362:calc.c        **** 	top_num = 0;
 583               	.LM55:
 584 027e F12C      		mov r15,__zero_reg__
 585               	.L31:
 587               	.LM56:
 588 0280 8C2D      		mov r24,r12
 589 0282 8819      		sub r24,r8
 590 0284 8415      		cp r24,r4
 591 0286 00F0      		brlo .L58
 365:calc.c        **** 	{
 366:calc.c        **** 		switch(tok_type_list[tok_type_i])
 367:calc.c        **** 		{
 368:calc.c        **** 		case TT_NUMBER:
 369:calc.c        **** 			if(top_num >= NUMBER_STACK_SIZE - 1)
 370:calc.c        **** 			{
 371:calc.c        **** 				return ERROR_NOMEM;
 372:calc.c        **** 			}
 373:calc.c        **** 
 374:calc.c        **** 			num_stack[top_num++] =
 375:calc.c        **** 				tok_num_list[tok_num_i++];
 376:calc.c        **** 			break;
 377:calc.c        **** 
 378:calc.c        **** 		case TT_X:
 379:calc.c        **** 			if(top_num >= NUMBER_STACK_SIZE - 1)
 380:calc.c        **** 			{
 381:calc.c        **** 				return ERROR_NOMEM;
 382:calc.c        **** 			}
 383:calc.c        **** 
 384:calc.c        **** 			num_stack[top_num++] = x;
 385:calc.c        **** 			break;
 386:calc.c        **** 
 387:calc.c        **** 		default:
 388:calc.c        **** 			op_right = 0;
 389:calc.c        **** 			if(tok_type_list[tok_type_i] < TT_ADD)
 390:calc.c        **** 			{
 391:calc.c        **** 				if(top_num == 0)
 392:calc.c        **** 				{
 393:calc.c        **** 					/* Buffer underflow */
 394:calc.c        **** 					return ERROR_SYNTAX;
 395:calc.c        **** 				}
 396:calc.c        **** 			}
 397:calc.c        **** 			else
 398:calc.c        **** 			{
 399:calc.c        **** 				if(top_num <= 1)
 400:calc.c        **** 				{
 401:calc.c        **** 					/* Buffer underflow */
 402:calc.c        **** 					return ERROR_SYNTAX;
 403:calc.c        **** 				}
 404:calc.c        **** 
 405:calc.c        **** 				op_right = num_stack[--top_num];
 406:calc.c        **** 			}
 407:calc.c        **** 
 408:calc.c        **** 			op_left = num_stack[--top_num];
 409:calc.c        **** 			switch(tok_type_list[tok_type_i])
 410:calc.c        **** 			{
 411:calc.c        **** 			case TT_UNARY_MINUS:
 412:calc.c        **** 				op_left = -op_left;
 413:calc.c        **** 				break;
 414:calc.c        **** 
 415:calc.c        **** 			case TT_ADD:
 416:calc.c        **** 				op_left += op_right;
 417:calc.c        **** 				break;
 418:calc.c        **** 
 419:calc.c        **** 			case TT_SUB:
 420:calc.c        **** 				op_left -= op_right;
 421:calc.c        **** 				break;
 422:calc.c        **** 
 423:calc.c        **** 			case TT_MUL:
 424:calc.c        **** 				op_left *= op_right;
 425:calc.c        **** 				break;
 426:calc.c        **** 
 427:calc.c        **** 			case TT_DIV:
 428:calc.c        **** 				if(op_right == 0.0)
 429:calc.c        **** 				{
 430:calc.c        **** 					/* Division by zero */
 431:calc.c        **** 					return ERROR_MATH;
 432:calc.c        **** 				}
 433:calc.c        **** 
 434:calc.c        **** 				op_left /= op_right;
 435:calc.c        **** 				break;
 436:calc.c        **** 
 437:calc.c        **** 			case TT_LOG:
 438:calc.c        **** 				op_left = log(op_left);
 439:calc.c        **** 				break;
 440:calc.c        **** 
 441:calc.c        **** 			case TT_SIN:
 442:calc.c        **** 				op_left = SIND(op_left);
 443:calc.c        **** 				break;
 444:calc.c        **** 
 445:calc.c        **** 			case TT_COS:
 446:calc.c        **** 				op_left = COSD(op_left);
 447:calc.c        **** 				break;
 448:calc.c        **** 
 449:calc.c        **** 			case TT_TAN:
 450:calc.c        **** 				op_left = TAND(op_left);
 451:calc.c        **** 				break;
 452:calc.c        **** 
 453:calc.c        **** 			case TT_ASIN:
 454:calc.c        **** 				if(!asin_acos_range(op_left))
 455:calc.c        **** 				{
 456:calc.c        **** 					return ERROR_RANGE;
 457:calc.c        **** 				}
 458:calc.c        **** 				op_left = ASIND(op_left);
 459:calc.c        **** 				break;
 460:calc.c        **** 
 461:calc.c        **** 			case TT_ACOS:
 462:calc.c        **** 				if(!asin_acos_range(op_left))
 463:calc.c        **** 				{
 464:calc.c        **** 					return ERROR_RANGE;
 465:calc.c        **** 				}
 466:calc.c        **** 				op_left = ACOSD(op_left);
 467:calc.c        **** 				break;
 468:calc.c        **** 
 469:calc.c        **** 			case TT_ATAN:
 470:calc.c        **** 				op_left = ATAND(op_left);
 471:calc.c        **** 				break;
 472:calc.c        **** 
 473:calc.c        **** 			case TT_POW:
 474:calc.c        **** 				op_left = pow(op_left, op_right);
 475:calc.c        **** 				break;
 476:calc.c        **** 
 477:calc.c        **** 			default:
 478:calc.c        **** 				continue;
 479:calc.c        **** 			}
 480:calc.c        **** 
 481:calc.c        **** 			if(top_num >= NUMBER_STACK_SIZE - 1)
 482:calc.c        **** 			{
 483:calc.c        **** 				return ERROR_NOMEM;
 484:calc.c        **** 			}
 485:calc.c        **** 
 486:calc.c        **** 			num_stack[top_num++] = op_left;
 487:calc.c        **** 			break;
 488:calc.c        **** 		}
 489:calc.c        **** 	}
 490:calc.c        **** 
 491:calc.c        **** 	if(top_num != 1)
 593               	.LM57:
 594 0288 8985      		ldd r24,Y+9
 595 028a 8130      		cpi r24,lo8(1)
 596 028c 01F0      		breq .+2
 597 028e 00C0      		rjmp .L67
 492:calc.c        **** 	{
 493:calc.c        **** 		return ERROR_SYNTAX;
 494:calc.c        **** 	}
 495:calc.c        **** 
 496:calc.c        **** 	*y = num_stack[--top_num];
 599               	.LM58:
 600 0290 8091 0000 		lds r24,num_stack
 601 0294 9091 0000 		lds r25,num_stack+1
 602 0298 A091 0000 		lds r26,num_stack+2
 603 029c B091 0000 		lds r27,num_stack+3
 604 02a0 F501      		movw r30,r10
 605 02a2 8083      		st Z,r24
 606 02a4 9183      		std Z+1,r25
 607 02a6 A283      		std Z+2,r26
 608 02a8 B383      		std Z+3,r27
 497:calc.c        **** 	return 0;
 610               	.LM59:
 611 02aa 80E0      		ldi r24,0
 612               	.L30:
 613               	/* epilogue start */
 498:calc.c        **** }
 615               	.LM60:
 616 02ac 2A96      		adiw r28,10
 617 02ae 0FB6      		in __tmp_reg__,__SREG__
 618 02b0 F894      		cli
 619 02b2 DEBF      		out __SP_H__,r29
 620 02b4 0FBE      		out __SREG__,__tmp_reg__
 621 02b6 CDBF      		out __SP_L__,r28
 622 02b8 DF91      		pop r29
 623 02ba CF91      		pop r28
 624 02bc 1F91      		pop r17
 625 02be 0F91      		pop r16
 626 02c0 FF90      		pop r15
 627 02c2 EF90      		pop r14
 628 02c4 DF90      		pop r13
 629 02c6 CF90      		pop r12
 630 02c8 BF90      		pop r11
 631 02ca AF90      		pop r10
 632 02cc 9F90      		pop r9
 633 02ce 8F90      		pop r8
 634 02d0 7F90      		pop r7
 635 02d2 6F90      		pop r6
 636 02d4 5F90      		pop r5
 637 02d6 4F90      		pop r4
 638 02d8 0895      		ret
 639               	.L58:
 366:calc.c        **** 		{
 641               	.LM61:
 642 02da D601      		movw r26,r12
 643 02dc ED91      		ld r30,X+
 644 02de 6D01      		movw r12,r26
 366:calc.c        **** 		{
 646               	.LM62:
 647 02e0 E130      		cpi r30,lo8(1)
 648 02e2 01F0      		breq .L32
 649 02e4 E230      		cpi r30,lo8(2)
 650 02e6 01F4      		brne .+2
 651 02e8 00C0      		rjmp .L33
 389:calc.c        **** 			{
 653               	.LM63:
 654 02ea ED30      		cpi r30,lo8(13)
 655 02ec 00F0      		brlo .+2
 656 02ee 00C0      		rjmp .L37
 391:calc.c        **** 				{
 658               	.LM64:
 659 02f0 A985      		ldd r26,Y+9
 660 02f2 AA23      		tst r26
 661 02f4 01F4      		brne .+2
 662 02f6 00C0      		rjmp .L67
 388:calc.c        **** 			if(tok_type_list[tok_type_i] < TT_ADD)
 664               	.LM65:
 665 02f8 1D82      		std Y+5,__zero_reg__
 666 02fa 1E82      		std Y+6,__zero_reg__
 667 02fc 1F82      		std Y+7,__zero_reg__
 668 02fe 1886      		std Y+8,__zero_reg__
 669               	.L38:
 408:calc.c        **** 			switch(tok_type_list[tok_type_i])
 671               	.LM66:
 672 0300 3985      		ldd r19,Y+9
 673 0302 3150      		subi r19,lo8(-(-1))
 674 0304 3A87      		std Y+10,r19
 675 0306 44E0      		ldi r20,lo8(4)
 676 0308 349F      		mul r19,r20
 677 030a 8001      		movw r16,r0
 678 030c 1124      		clr __zero_reg__
 679 030e D801      		movw r26,r16
 680 0310 A050      		subi r26,lo8(-(num_stack))
 681 0312 B040      		sbci r27,hi8(-(num_stack))
 682 0314 2D91      		ld r18,X+
 683 0316 3D91      		ld r19,X+
 684 0318 4D91      		ld r20,X+
 685 031a 5C91      		ld r21,X
 686 031c 2983      		std Y+1,r18
 687 031e 3A83      		std Y+2,r19
 688 0320 4B83      		std Y+3,r20
 689 0322 5C83      		std Y+4,r21
 690 0324 E550      		subi r30,lo8(-(-5))
 691 0326 ED30      		cpi r30,lo8(13)
 692 0328 00F4      		brsh .L36
 693 032a F0E0      		ldi r31,0
 694 032c E050      		subi r30,lo8(-(gs(.L40)))
 695 032e F040      		sbci r31,hi8(-(gs(.L40)))
 696 0330 0C94 0000 		jmp __tablejump2__
 697               		.section	.jumptables.gcc.calc_solve,"a",@progbits
 698               		.p2align	1
 699               	.L40:
 700 0000 0000      		.word gs(.L52)
 701 0002 0000      		.word gs(.L51)
 702 0004 0000      		.word gs(.L50)
 703 0006 0000      		.word gs(.L49)
 704 0008 0000      		.word gs(.L48)
 705 000a 0000      		.word gs(.L47)
 706 000c 0000      		.word gs(.L46)
 707 000e 0000      		.word gs(.L45)
 708 0010 0000      		.word gs(.L44)
 709 0012 0000      		.word gs(.L43)
 710 0014 0000      		.word gs(.L42)
 711 0016 0000      		.word gs(.L41)
 712 0018 0000      		.word gs(.L39)
 713               		.text
 714               	.L32:
 369:calc.c        **** 			{
 716               	.LM67:
 717 0334 B985      		ldd r27,Y+9
 718 0336 BF31      		cpi r27,lo8(31)
 719 0338 00F0      		brlo .+2
 720 033a 00C0      		rjmp .L66
 374:calc.c        **** 				tok_num_list[tok_num_i++];
 722               	.LM68:
 723 033c BF5F      		subi r27,lo8(-(1))
 724 033e BA87      		std Y+10,r27
 374:calc.c        **** 				tok_num_list[tok_num_i++];
 726               	.LM69:
 727 0340 3985      		ldd r19,Y+9
 728 0342 24E0      		ldi r18,lo8(4)
 729 0344 329F      		mul r19,r18
 730 0346 F001      		movw r30,r0
 731 0348 1124      		clr __zero_reg__
 732 034a E050      		subi r30,lo8(-(num_stack))
 733 034c F040      		sbci r31,hi8(-(num_stack))
 375:calc.c        **** 			break;
 735               	.LM70:
 736 034e 44E0      		ldi r20,lo8(4)
 737 0350 F49E      		mul r15,r20
 738 0352 D001      		movw r26,r0
 739 0354 1124      		clr __zero_reg__
 740 0356 A050      		subi r26,lo8(-(tok_num_list))
 741 0358 B040      		sbci r27,hi8(-(tok_num_list))
 374:calc.c        **** 				tok_num_list[tok_num_i++];
 743               	.LM71:
 744 035a 8D91      		ld r24,X+
 745 035c 9D91      		ld r25,X+
 746 035e 0D90      		ld __tmp_reg__,X+
 747 0360 BC91      		ld r27,X
 748 0362 A02D      		mov r26,__tmp_reg__
 749 0364 8083      		st Z,r24
 750 0366 9183      		std Z+1,r25
 751 0368 A283      		std Z+2,r26
 752 036a B383      		std Z+3,r27
 375:calc.c        **** 			break;
 754               	.LM72:
 755 036c F394      		inc r15
 756               	.L36:
 362:calc.c        **** 	top_num = 0;
 758               	.LM73:
 759 036e 5A85      		ldd r21,Y+10
 760 0370 5987      		std Y+9,r21
 761 0372 00C0      		rjmp .L31
 762               	.L33:
 379:calc.c        **** 			{
 764               	.LM74:
 765 0374 5985      		ldd r21,Y+9
 766 0376 5F31      		cpi r21,lo8(31)
 767 0378 00F0      		brlo .+2
 768 037a 00C0      		rjmp .L66
 384:calc.c        **** 			break;
 770               	.LM75:
 771 037c 5F5F      		subi r21,lo8(-(1))
 772 037e 5A87      		std Y+10,r21
 384:calc.c        **** 			break;
 774               	.LM76:
 775 0380 9985      		ldd r25,Y+9
 776 0382 84E0      		ldi r24,lo8(4)
 777 0384 989F      		mul r25,r24
 778 0386 F001      		movw r30,r0
 779 0388 1124      		clr __zero_reg__
 780 038a E050      		subi r30,lo8(-(num_stack))
 781 038c F040      		sbci r31,hi8(-(num_stack))
 782 038e 8E2D      		mov r24,r14
 783 0390 972D      		mov r25,r7
 784 0392 A62D      		mov r26,r6
 785 0394 B52D      		mov r27,r5
 786 0396 8083      		st Z,r24
 787 0398 9183      		std Z+1,r25
 788 039a A283      		std Z+2,r26
 789 039c B383      		std Z+3,r27
 385:calc.c        **** 
 791               	.LM77:
 792 039e 00C0      		rjmp .L36
 793               	.L37:
 399:calc.c        **** 				{
 795               	.LM78:
 796 03a0 B985      		ldd r27,Y+9
 797 03a2 B230      		cpi r27,lo8(2)
 798 03a4 00F4      		brsh .+2
 799 03a6 00C0      		rjmp .L67
 405:calc.c        **** 			}
 801               	.LM79:
 802 03a8 B150      		subi r27,lo8(-(-1))
 803 03aa B987      		std Y+9,r27
 804 03ac F4E0      		ldi r31,lo8(4)
 805 03ae BF9F      		mul r27,r31
 806 03b0 D001      		movw r26,r0
 807 03b2 1124      		clr __zero_reg__
 808 03b4 A050      		subi r26,lo8(-(num_stack))
 809 03b6 B040      		sbci r27,hi8(-(num_stack))
 810 03b8 2D91      		ld r18,X+
 811 03ba 3D91      		ld r19,X+
 812 03bc 4D91      		ld r20,X+
 813 03be 5C91      		ld r21,X
 814 03c0 2D83      		std Y+5,r18
 815 03c2 3E83      		std Y+6,r19
 816 03c4 4F83      		std Y+7,r20
 817 03c6 5887      		std Y+8,r21
 818 03c8 00C0      		rjmp .L38
 819               	.L52:
 412:calc.c        **** 				break;
 821               	.LM80:
 822 03ca 8981      		ldd r24,Y+1
 823 03cc 9A81      		ldd r25,Y+2
 824 03ce AB81      		ldd r26,Y+3
 825 03d0 BC81      		ldd r27,Y+4
 826 03d2 B058      		subi r27,0x80
 827               	.L53:
 481:calc.c        **** 			{
 829               	.LM81:
 830 03d4 3A85      		ldd r19,Y+10
 831 03d6 3F31      		cpi r19,lo8(31)
 832 03d8 00F0      		brlo .+2
 833 03da 00C0      		rjmp .L66
 486:calc.c        **** 			break;
 835               	.LM82:
 836 03dc F801      		movw r30,r16
 837 03de E050      		subi r30,lo8(-(num_stack))
 838 03e0 F040      		sbci r31,hi8(-(num_stack))
 839 03e2 8083      		st Z,r24
 840 03e4 9183      		std Z+1,r25
 841 03e6 A283      		std Z+2,r26
 842 03e8 B383      		std Z+3,r27
 487:calc.c        **** 		}
 844               	.LM83:
 845 03ea 4985      		ldd r20,Y+9
 846 03ec 4A87      		std Y+10,r20
 847 03ee 00C0      		rjmp .L36
 848               	.L44:
 416:calc.c        **** 				break;
 850               	.LM84:
 851 03f0 2981      		ldd r18,Y+1
 852 03f2 3A81      		ldd r19,Y+2
 853 03f4 4B81      		ldd r20,Y+3
 854 03f6 5C81      		ldd r21,Y+4
 855 03f8 6D81      		ldd r22,Y+5
 856 03fa 7E81      		ldd r23,Y+6
 857 03fc 8F81      		ldd r24,Y+7
 858 03fe 9885      		ldd r25,Y+8
 859 0400 0E94 0000 		call __addsf3
 860               	.L73:
 474:calc.c        **** 				break;
 862               	.LM85:
 863 0404 382F      		mov r19,r24
 864 0406 292F      		mov r18,r25
 865 0408 CB01      		movw r24,r22
 866 040a A32F      		mov r26,r19
 867 040c B22F      		mov r27,r18
 475:calc.c        **** 
 869               	.LM86:
 870 040e 00C0      		rjmp .L53
 871               	.L43:
 420:calc.c        **** 				break;
 873               	.LM87:
 874 0410 2D81      		ldd r18,Y+5
 875 0412 3E81      		ldd r19,Y+6
 876 0414 4F81      		ldd r20,Y+7
 877 0416 5885      		ldd r21,Y+8
 878 0418 6981      		ldd r22,Y+1
 879 041a 7A81      		ldd r23,Y+2
 880 041c 8B81      		ldd r24,Y+3
 881 041e 9C81      		ldd r25,Y+4
 882 0420 0E94 0000 		call __subsf3
 883 0424 00C0      		rjmp .L73
 884               	.L42:
 424:calc.c        **** 				break;
 886               	.LM88:
 887 0426 2981      		ldd r18,Y+1
 888 0428 3A81      		ldd r19,Y+2
 889 042a 4B81      		ldd r20,Y+3
 890 042c 5C81      		ldd r21,Y+4
 891 042e 6D81      		ldd r22,Y+5
 892 0430 7E81      		ldd r23,Y+6
 893 0432 8F81      		ldd r24,Y+7
 894 0434 9885      		ldd r25,Y+8
 895               	.L75:
 466:calc.c        **** 				break;
 897               	.LM89:
 898 0436 0E94 0000 		call __mulsf3
 899 043a 00C0      		rjmp .L73
 900               	.L41:
 428:calc.c        **** 				{
 902               	.LM90:
 903 043c 20E0      		ldi r18,0
 904 043e 30E0      		ldi r19,0
 905 0440 A901      		movw r20,r18
 906 0442 6D81      		ldd r22,Y+5
 907 0444 7E81      		ldd r23,Y+6
 908 0446 8F81      		ldd r24,Y+7
 909 0448 9885      		ldd r25,Y+8
 910 044a 0E94 0000 		call __eqsf2
 911 044e 8823      		tst r24
 912 0450 01F4      		brne .+2
 913 0452 00C0      		rjmp .L63
 434:calc.c        **** 				break;
 915               	.LM91:
 916 0454 2D81      		ldd r18,Y+5
 917 0456 3E81      		ldd r19,Y+6
 918 0458 4F81      		ldd r20,Y+7
 919 045a 5885      		ldd r21,Y+8
 920 045c 6981      		ldd r22,Y+1
 921 045e 7A81      		ldd r23,Y+2
 922 0460 8B81      		ldd r24,Y+3
 923 0462 9C81      		ldd r25,Y+4
 924 0464 0E94 0000 		call __divsf3
 925 0468 00C0      		rjmp .L73
 926               	.L51:
 438:calc.c        **** 				break;
 928               	.LM92:
 929 046a 6981      		ldd r22,Y+1
 930 046c 7A81      		ldd r23,Y+2
 931 046e 8B81      		ldd r24,Y+3
 932 0470 9C81      		ldd r25,Y+4
 933 0472 0E94 0000 		call log
 934 0476 00C0      		rjmp .L73
 935               	.L50:
 442:calc.c        **** 				break;
 937               	.LM93:
 938 0478 2BED      		ldi r18,lo8(-37)
 939 047a 3FE0      		ldi r19,lo8(15)
 940 047c 49E4      		ldi r20,lo8(73)
 941 047e 50E4      		ldi r21,lo8(64)
 942 0480 6981      		ldd r22,Y+1
 943 0482 7A81      		ldd r23,Y+2
 944 0484 8B81      		ldd r24,Y+3
 945 0486 9C81      		ldd r25,Y+4
 946 0488 0E94 0000 		call __mulsf3
 947 048c 20E0      		ldi r18,0
 948 048e 30E0      		ldi r19,0
 949 0490 44E3      		ldi r20,lo8(52)
 950 0492 53E4      		ldi r21,lo8(67)
 951 0494 6983      		std Y+1,r22
 952 0496 7A83      		std Y+2,r23
 953 0498 8B83      		std Y+3,r24
 954 049a 9C83      		std Y+4,r25
 955 049c 6981      		ldd r22,Y+1
 956 049e 7A81      		ldd r23,Y+2
 957 04a0 8B81      		ldd r24,Y+3
 958 04a2 9C81      		ldd r25,Y+4
 959 04a4 0E94 0000 		call __divsf3
 960 04a8 6983      		std Y+1,r22
 961 04aa 7A83      		std Y+2,r23
 962 04ac 8B83      		std Y+3,r24
 963 04ae 9C83      		std Y+4,r25
 964 04b0 6981      		ldd r22,Y+1
 965 04b2 7A81      		ldd r23,Y+2
 966 04b4 8B81      		ldd r24,Y+3
 967 04b6 9C81      		ldd r25,Y+4
 968 04b8 0E94 0000 		call sin
 969 04bc 00C0      		rjmp .L73
 970               	.L49:
 446:calc.c        **** 				break;
 972               	.LM94:
 973 04be 2BED      		ldi r18,lo8(-37)
 974 04c0 3FE0      		ldi r19,lo8(15)
 975 04c2 49E4      		ldi r20,lo8(73)
 976 04c4 50E4      		ldi r21,lo8(64)
 977 04c6 6981      		ldd r22,Y+1
 978 04c8 7A81      		ldd r23,Y+2
 979 04ca 8B81      		ldd r24,Y+3
 980 04cc 9C81      		ldd r25,Y+4
 981 04ce 0E94 0000 		call __mulsf3
 982 04d2 20E0      		ldi r18,0
 983 04d4 30E0      		ldi r19,0
 984 04d6 44E3      		ldi r20,lo8(52)
 985 04d8 53E4      		ldi r21,lo8(67)
 986 04da 6983      		std Y+1,r22
 987 04dc 7A83      		std Y+2,r23
 988 04de 8B83      		std Y+3,r24
 989 04e0 9C83      		std Y+4,r25
 990 04e2 6981      		ldd r22,Y+1
 991 04e4 7A81      		ldd r23,Y+2
 992 04e6 8B81      		ldd r24,Y+3
 993 04e8 9C81      		ldd r25,Y+4
 994 04ea 0E94 0000 		call __divsf3
 995 04ee 6983      		std Y+1,r22
 996 04f0 7A83      		std Y+2,r23
 997 04f2 8B83      		std Y+3,r24
 998 04f4 9C83      		std Y+4,r25
 999 04f6 6981      		ldd r22,Y+1
 1000 04f8 7A81      		ldd r23,Y+2
 1001 04fa 8B81      		ldd r24,Y+3
 1002 04fc 9C81      		ldd r25,Y+4
 1003 04fe 0E94 0000 		call cos
 1004 0502 00C0      		rjmp .L73
 1005               	.L48:
 450:calc.c        **** 				break;
 1007               	.LM95:
 1008 0504 2BED      		ldi r18,lo8(-37)
 1009 0506 3FE0      		ldi r19,lo8(15)
 1010 0508 49E4      		ldi r20,lo8(73)
 1011 050a 50E4      		ldi r21,lo8(64)
 1012 050c 6981      		ldd r22,Y+1
 1013 050e 7A81      		ldd r23,Y+2
 1014 0510 8B81      		ldd r24,Y+3
 1015 0512 9C81      		ldd r25,Y+4
 1016 0514 0E94 0000 		call __mulsf3
 1017 0518 20E0      		ldi r18,0
 1018 051a 30E0      		ldi r19,0
 1019 051c 44E3      		ldi r20,lo8(52)
 1020 051e 53E4      		ldi r21,lo8(67)
 1021 0520 6983      		std Y+1,r22
 1022 0522 7A83      		std Y+2,r23
 1023 0524 8B83      		std Y+3,r24
 1024 0526 9C83      		std Y+4,r25
 1025 0528 6981      		ldd r22,Y+1
 1026 052a 7A81      		ldd r23,Y+2
 1027 052c 8B81      		ldd r24,Y+3
 1028 052e 9C81      		ldd r25,Y+4
 1029 0530 0E94 0000 		call __divsf3
 1030 0534 6983      		std Y+1,r22
 1031 0536 7A83      		std Y+2,r23
 1032 0538 8B83      		std Y+3,r24
 1033 053a 9C83      		std Y+4,r25
 1034 053c 6981      		ldd r22,Y+1
 1035 053e 7A81      		ldd r23,Y+2
 1036 0540 8B81      		ldd r24,Y+3
 1037 0542 9C81      		ldd r25,Y+4
 1038 0544 0E94 0000 		call tan
 1039 0548 00C0      		rjmp .L73
 1040               	.L47:
 1041               	.LBB46:
 1042               	.LBB47:
 499:calc.c        **** 
 500:calc.c        **** static uint8_t asin_acos_range(float n)
 501:calc.c        **** {
 502:calc.c        **** 	return n >= -1 && n <= 1;
 1044               	.LM96:
 1045 054a 20E0      		ldi r18,0
 1046 054c 30E0      		ldi r19,0
 1047 054e 40E8      		ldi r20,lo8(-128)
 1048 0550 5FEB      		ldi r21,lo8(-65)
 1049 0552 6981      		ldd r22,Y+1
 1050 0554 7A81      		ldd r23,Y+2
 1051 0556 8B81      		ldd r24,Y+3
 1052 0558 9C81      		ldd r25,Y+4
 1053 055a 0E94 0000 		call __gesf2
 1054 055e 87FD      		sbrc r24,7
 1055 0560 00C0      		rjmp .L72
 1056 0562 20E0      		ldi r18,0
 1057 0564 30E0      		ldi r19,0
 1058 0566 40E8      		ldi r20,lo8(-128)
 1059 0568 5FE3      		ldi r21,lo8(63)
 1060 056a 6981      		ldd r22,Y+1
 1061 056c 7A81      		ldd r23,Y+2
 1062 056e 8B81      		ldd r24,Y+3
 1063 0570 9C81      		ldd r25,Y+4
 1064 0572 0E94 0000 		call __lesf2
 1065 0576 1816      		cp __zero_reg__,r24
 1066 0578 04F0      		brlt .+2
 1067 057a 00C0      		rjmp .L55
 1068               	.L72:
 1069               	.LBE47:
 1070               	.LBE46:
 456:calc.c        **** 				}
 1072               	.LM97:
 1073 057c 84E0      		ldi r24,lo8(4)
 1074 057e 00C0      		rjmp .L30
 1075               	.L46:
 1076               	.LBB48:
 1077               	.LBB49:
 1079               	.LM98:
 1080 0580 20E0      		ldi r18,0
 1081 0582 30E0      		ldi r19,0
 1082 0584 40E8      		ldi r20,lo8(-128)
 1083 0586 5FEB      		ldi r21,lo8(-65)
 1084 0588 6981      		ldd r22,Y+1
 1085 058a 7A81      		ldd r23,Y+2
 1086 058c 8B81      		ldd r24,Y+3
 1087 058e 9C81      		ldd r25,Y+4
 1088 0590 0E94 0000 		call __gesf2
 1089 0594 87FD      		sbrc r24,7
 1090 0596 00C0      		rjmp .L72
 1091 0598 20E0      		ldi r18,0
 1092 059a 30E0      		ldi r19,0
 1093 059c 40E8      		ldi r20,lo8(-128)
 1094 059e 5FE3      		ldi r21,lo8(63)
 1095 05a0 6981      		ldd r22,Y+1
 1096 05a2 7A81      		ldd r23,Y+2
 1097 05a4 8B81      		ldd r24,Y+3
 1098 05a6 9C81      		ldd r25,Y+4
 1099 05a8 0E94 0000 		call __lesf2
 1100 05ac 1816      		cp __zero_reg__,r24
 1101 05ae 04F0      		brlt .L72
 1102               	.LBE49:
 1103               	.LBE48:
 466:calc.c        **** 				break;
 1105               	.LM99:
 1106 05b0 6981      		ldd r22,Y+1
 1107 05b2 7A81      		ldd r23,Y+2
 1108 05b4 8B81      		ldd r24,Y+3
 1109 05b6 9C81      		ldd r25,Y+4
 1110 05b8 0E94 0000 		call acos
 1111 05bc 00C0      		rjmp .L74
 1112               	.L45:
 470:calc.c        **** 				break;
 1114               	.LM100:
 1115 05be 6981      		ldd r22,Y+1
 1116 05c0 7A81      		ldd r23,Y+2
 1117 05c2 8B81      		ldd r24,Y+3
 1118 05c4 9C81      		ldd r25,Y+4
 1119 05c6 0E94 0000 		call atan
 1120               	.L74:
 466:calc.c        **** 				break;
 1122               	.LM101:
 1123 05ca 20EE      		ldi r18,lo8(-32)
 1124 05cc 3EE2      		ldi r19,lo8(46)
 1125 05ce 45E6      		ldi r20,lo8(101)
 1126 05d0 52E4      		ldi r21,lo8(66)
 1127 05d2 6983      		std Y+1,r22
 1128 05d4 7A83      		std Y+2,r23
 1129 05d6 8B83      		std Y+3,r24
 1130 05d8 9C83      		std Y+4,r25
 1131 05da 6981      		ldd r22,Y+1
 1132 05dc 7A81      		ldd r23,Y+2
 1133 05de 8B81      		ldd r24,Y+3
 1134 05e0 9C81      		ldd r25,Y+4
 1135 05e2 00C0      		rjmp .L75
 1136               	.L39:
 474:calc.c        **** 				break;
 1138               	.LM102:
 1139 05e4 2D81      		ldd r18,Y+5
 1140 05e6 3E81      		ldd r19,Y+6
 1141 05e8 4F81      		ldd r20,Y+7
 1142 05ea 5885      		ldd r21,Y+8
 1143 05ec 6981      		ldd r22,Y+1
 1144 05ee 7A81      		ldd r23,Y+2
 1145 05f0 8B81      		ldd r24,Y+3
 1146 05f2 9C81      		ldd r25,Y+4
 1147 05f4 0E94 0000 		call pow
 1148 05f8 00C0      		rjmp .L73
 1149               	.L63:
 431:calc.c        **** 				}
 1151               	.LM103:
 1152 05fa 82E0      		ldi r24,lo8(2)
 1153 05fc 00C0      		rjmp .L30
 1154               	.L66:
 371:calc.c        **** 			}
 1156               	.LM104:
 1157 05fe 83E0      		ldi r24,lo8(3)
 1158 0600 00C0      		rjmp .L30
 1159               	.L67:
 394:calc.c        **** 				}
 1161               	.LM105:
 1162 0602 81E0      		ldi r24,lo8(1)
 1163 0604 00C0      		rjmp .L30
 1164               	.L55:
 458:calc.c        **** 				break;
 1166               	.LM106:
 1167 0606 6981      		ldd r22,Y+1
 1168 0608 7A81      		ldd r23,Y+2
 1169 060a 8B81      		ldd r24,Y+3
 1170 060c 9C81      		ldd r25,Y+4
 1171 060e 0E94 0000 		call asin
 1172 0612 00C0      		rjmp .L74
 1177               	.Lscope7:
 1182               	lcd_pixel:
 1184               	.Ltext6:
  96:graphics.c    **** 	if(x < 0 || y < 0 || x >= LCD_WIDTH || y >= LCD_HEIGHT)
 1186               	.LM107:
 1187               	.LFBB8:
 1188               	/* prologue: function */
 1189               	/* frame size = 0 */
 1190               	/* stack size = 0 */
 1191               	.L__stack_usage = 0
 1192 0614 9C01      		movw r18,r24
  97:graphics.c    **** 	{
 1194               	.LM108:
 1195 0616 803F      		cpi r24,-16
 1196 0618 9105      		cpc r25,__zero_reg__
 1197 061a 00F0      		brlo .+2
 1198 061c 00C0      		rjmp .L76
  97:graphics.c    **** 	{
 1200               	.LM109:
 1201 061e CB01      		movw r24,r22
 1202 0620 6034      		cpi r22,64
 1203 0622 41E0      		ldi r20,1
 1204 0624 7407      		cpc r23,r20
 1205 0626 00F0      		brlo .+2
 1206 0628 00C0      		rjmp .L76
 1207               	.LBB52:
 1208               	.LBB53:
 102:graphics.c    **** 	WRITE_8((uint8_t)(_color >> 8));
 1210               	.LM110:
 1211 062a 4598      		cbi 0x8,5
 1212 062c 4498      		cbi 0x8,4
 1213 062e 12B8      		out 0x2,__zero_reg__
 1214 0630 4398      		cbi 0x8,3
 1215 0632 439A      		sbi 0x8,3
 1216 0634 3AE2      		ldi r19,lo8(42)
 1217 0636 32B9      		out 0x2,r19
 1218 0638 4398      		cbi 0x8,3
 1219 063a 439A      		sbi 0x8,3
 1220 063c 449A      		sbi 0x8,4
 1221 063e 12B8      		out 0x2,__zero_reg__
 1222 0640 4398      		cbi 0x8,3
 1223 0642 439A      		sbi 0x8,3
 1224 0644 449A      		sbi 0x8,4
 1225 0646 22B9      		out 0x2,r18
 1226 0648 4398      		cbi 0x8,3
 1227 064a 439A      		sbi 0x8,3
 1228 064c 449A      		sbi 0x8,4
 1229 064e 12B8      		out 0x2,__zero_reg__
 1230 0650 4398      		cbi 0x8,3
 1231 0652 439A      		sbi 0x8,3
 1232 0654 449A      		sbi 0x8,4
 1233 0656 2F5F      		subi r18,lo8(-(1))
 1234 0658 22B9      		out 0x2,r18
 1235 065a 4398      		cbi 0x8,3
 1236 065c 439A      		sbi 0x8,3
 1237 065e 459A      		sbi 0x8,5
 1238 0660 4598      		cbi 0x8,5
 1239 0662 4498      		cbi 0x8,4
 1240 0664 12B8      		out 0x2,__zero_reg__
 1241 0666 4398      		cbi 0x8,3
 1242 0668 439A      		sbi 0x8,3
 1243 066a 2BE2      		ldi r18,lo8(43)
 1244 066c 22B9      		out 0x2,r18
 1245 066e 4398      		cbi 0x8,3
 1246 0670 439A      		sbi 0x8,3
 1247 0672 449A      		sbi 0x8,4
 1248 0674 72B9      		out 0x2,r23
 1249 0676 4398      		cbi 0x8,3
 1250 0678 439A      		sbi 0x8,3
 1251 067a 449A      		sbi 0x8,4
 1252 067c 62B9      		out 0x2,r22
 1253 067e 4398      		cbi 0x8,3
 1254 0680 439A      		sbi 0x8,3
 1255 0682 449A      		sbi 0x8,4
 1256 0684 0196      		adiw r24,1
 1257 0686 92B9      		out 0x2,r25
 1258 0688 4398      		cbi 0x8,3
 1259 068a 439A      		sbi 0x8,3
 1260 068c 449A      		sbi 0x8,4
 1261 068e 6F5F      		subi r22,lo8(-(1))
 1262 0690 62B9      		out 0x2,r22
 1263 0692 4398      		cbi 0x8,3
 1264 0694 439A      		sbi 0x8,3
 1265 0696 459A      		sbi 0x8,5
 1266 0698 4598      		cbi 0x8,5
 1267 069a 4498      		cbi 0x8,4
 1268 069c 12B8      		out 0x2,__zero_reg__
 1269 069e 4398      		cbi 0x8,3
 1270 06a0 439A      		sbi 0x8,3
 1271 06a2 8CE2      		ldi r24,lo8(44)
 1272 06a4 82B9      		out 0x2,r24
 1273 06a6 4398      		cbi 0x8,3
 1274 06a8 439A      		sbi 0x8,3
 1275 06aa 449A      		sbi 0x8,4
 103:graphics.c    **** 	WRITE_8((uint8_t)_color);
 1277               	.LM111:
 1278 06ac 8091 0000 		lds r24,_color+1
 1279 06b0 82B9      		out 0x2,r24
 1280 06b2 4398      		cbi 0x8,3
 1281 06b4 439A      		sbi 0x8,3
 104:graphics.c    **** 	LCD_WINDOW_END();
 1283               	.LM112:
 1284 06b6 8091 0000 		lds r24,_color
 1285 06ba 82B9      		out 0x2,r24
 1286 06bc 4398      		cbi 0x8,3
 1287 06be 439A      		sbi 0x8,3
 105:graphics.c    **** }
 1289               	.LM113:
 1290 06c0 459A      		sbi 0x8,5
 1291               	.L76:
 1292               	/* epilogue start */
 1293               	.LBE53:
 1294               	.LBE52:
 106:graphics.c    **** 
 1296               	.LM114:
 1297 06c2 0895      		ret
 1299               	.Lscope8:
 1306               	lcd_char:
 135:graphics.c    **** 	uint8_t width = 0;
 1308               	.LM115:
 1309               	.LFBB9:
 1310 06c4 5F92      		push r5
 1311 06c6 6F92      		push r6
 1312 06c8 7F92      		push r7
 1313 06ca 8F92      		push r8
 1314 06cc 9F92      		push r9
 1315 06ce AF92      		push r10
 1316 06d0 BF92      		push r11
 1317 06d2 CF92      		push r12
 1318 06d4 DF92      		push r13
 1319 06d6 EF92      		push r14
 1320 06d8 FF92      		push r15
 1321 06da 0F93      		push r16
 1322 06dc 1F93      		push r17
 1323 06de CF93      		push r28
 1324 06e0 DF93      		push r29
 1325               	/* prologue: function */
 1326               	/* frame size = 0 */
 1327               	/* stack size = 15 */
 1328               	.L__stack_usage = 15
 1329 06e2 3C01      		movw r6,r24
 1330 06e4 5B01      		movw r10,r22
 137:graphics.c    **** 	{
 1332               	.LM116:
 1333 06e6 4052      		subi r20,lo8(-(-32))
 136:graphics.c    **** 	if(c >= 32 && c <= 126)
 1335               	.LM117:
 1336 06e8 512C      		mov r5,__zero_reg__
 137:graphics.c    **** 	{
 1338               	.LM118:
 1339 06ea 4F35      		cpi r20,lo8(95)
 1340 06ec 00F4      		brsh .L78
 1341               	.LBB54:
 1342               	.LBB55:
 141:graphics.c    **** 		for(row = 0; row < FONT_HEIGHT; ++row)
 1344               	.LM119:
 1345 06ee E42F      		mov r30,r20
 1346 06f0 F0E0      		ldi r31,0
 1347 06f2 E050      		subi r30,lo8(-(font_default_widths))
 1348 06f4 F040      		sbci r31,hi8(-(font_default_widths))
 1349               	/* #APP */
 1350               	 ;  141 "graphics.c" 1
 1351 06f6 5490      		lpm r5, Z
 1352               		
 1353               	 ;  0 "" 2
 1354               	/* #NOAPP */
 1355               	.LBE55:
 1356               	.LBB56:
 144:graphics.c    **** 			for(col = 0; col < width; ++col)
 1358               	.LM120:
 1359 06f8 8BE0      		ldi r24,lo8(11)
 1360 06fa 489F      		mul r20,r24
 1361 06fc E001      		movw r28,r0
 1362 06fe 1124      		clr __zero_reg__
 1363 0700 10E0      		ldi r17,0
 1364 0702 00E0      		ldi r16,0
 1365 0704 C050      		subi r28,lo8(-(font_default_chars))
 1366 0706 D040      		sbci r29,hi8(-(font_default_chars))
 1367               	.L83:
 1368 0708 FE01      		movw r30,r28
 1369 070a E00F      		add r30,r16
 1370 070c F11F      		adc r31,r17
 1371               	/* #APP */
 1372               	 ;  144 "graphics.c" 1
 1373 070e E491      		lpm r30, Z
 1374               		
 1375               	 ;  0 "" 2
 1376               	/* #NOAPP */
 1377               	.LBE56:
 145:graphics.c    **** 			{
 1379               	.LM121:
 1380 0710 F12C      		mov r15,__zero_reg__
 1381 0712 E12C      		mov r14,__zero_reg__
 147:graphics.c    **** 				{
 1383               	.LM122:
 1384 0714 CE2E      		mov r12,r30
 1385 0716 D12C      		mov r13,__zero_reg__
 149:graphics.c    **** 				}
 1387               	.LM123:
 1388 0718 4501      		movw r8,r10
 1389 071a 800E      		add r8,r16
 1390 071c 911E      		adc r9,r17
 1391               	.L80:
 145:graphics.c    **** 			{
 1393               	.LM124:
 1394 071e E514      		cp r14,r5
 1395 0720 00F0      		brlo .L82
 142:graphics.c    **** 		{
 1397               	.LM125:
 1398 0722 0F5F      		subi r16,-1
 1399 0724 1F4F      		sbci r17,-1
 1400 0726 0B30      		cpi r16,11
 1401 0728 1105      		cpc r17,__zero_reg__
 1402 072a 01F4      		brne .L83
 1403               	.L78:
 1404               	.LBE54:
 156:graphics.c    **** 
 1406               	.LM126:
 1407 072c 852D      		mov r24,r5
 1408               	/* epilogue start */
 1409 072e DF91      		pop r29
 1410 0730 CF91      		pop r28
 1411 0732 1F91      		pop r17
 1412 0734 0F91      		pop r16
 1413 0736 FF90      		pop r15
 1414 0738 EF90      		pop r14
 1415 073a DF90      		pop r13
 1416 073c CF90      		pop r12
 1417 073e BF90      		pop r11
 1418 0740 AF90      		pop r10
 1419 0742 9F90      		pop r9
 1420 0744 8F90      		pop r8
 1421 0746 7F90      		pop r7
 1422 0748 6F90      		pop r6
 1423 074a 5F90      		pop r5
 1424 074c 0895      		ret
 1425               	.L82:
 1426               	.LBB57:
 147:graphics.c    **** 				{
 1428               	.LM127:
 1429 074e C601      		movw r24,r12
 1430 0750 0E2C      		mov r0,r14
 1431 0752 00C0      		rjmp 2f
 1432               		1:
 1433 0754 9595      		asr r25
 1434 0756 8795      		ror r24
 1435               		2:
 1436 0758 0A94      		dec r0
 1437 075a 02F4      		brpl 1b
 147:graphics.c    **** 				{
 1439               	.LM128:
 1440 075c 80FF      		sbrs r24,0
 1441 075e 00C0      		rjmp .L81
 149:graphics.c    **** 				}
 1443               	.LM129:
 1444 0760 B401      		movw r22,r8
 1445 0762 C301      		movw r24,r6
 1446 0764 8E0D      		add r24,r14
 1447 0766 9F1D      		adc r25,r15
 1448 0768 0E94 0000 		call lcd_pixel
 1449               	.L81:
 1450 076c 8FEF      		ldi r24,-1
 1451 076e E81A      		sub r14,r24
 1452 0770 F80A      		sbc r15,r24
 1453 0772 00C0      		rjmp .L80
 1454               	.LBE57:
 1465               	.Lscope9:
 1470               	lcd_string:
 159:graphics.c    **** 	char c;
 1472               	.LM130:
 1473               	.LFBB10:
 1474 0774 EF92      		push r14
 1475 0776 FF92      		push r15
 1476 0778 0F93      		push r16
 1477 077a 1F93      		push r17
 1478 077c CF93      		push r28
 1479 077e DF93      		push r29
 1480               	/* prologue: function */
 1481               	/* frame size = 0 */
 1482               	/* stack size = 6 */
 1483               	.L__stack_usage = 6
 1484 0780 F62E      		mov r15,r22
 1485 0782 E72E      		mov r14,r23
 1486 0784 8A01      		movw r16,r20
 161:graphics.c    **** 	{
 1488               	.LM131:
 1489 0786 EC01      		movw r28,r24
 1490               	.L90:
 161:graphics.c    **** 	{
 1492               	.LM132:
 1493 0788 F801      		movw r30,r16
 1494 078a 4191      		ld r20,Z+
 1495 078c 8F01      		movw r16,r30
 161:graphics.c    **** 	{
 1497               	.LM133:
 1498 078e 4111      		cpse r20,__zero_reg__
 1499 0790 00C0      		rjmp .L91
 167:graphics.c    **** 
 1501               	.LM134:
 1502 0792 CE01      		movw r24,r28
 1503               	/* epilogue start */
 1504 0794 DF91      		pop r29
 1505 0796 CF91      		pop r28
 1506 0798 1F91      		pop r17
 1507 079a 0F91      		pop r16
 1508 079c FF90      		pop r15
 1509 079e EF90      		pop r14
 1510 07a0 0895      		ret
 1511               	.L91:
 163:graphics.c    **** 	}
 1513               	.LM135:
 1514 07a2 6F2D      		mov r22,r15
 1515 07a4 7E2D      		mov r23,r14
 1516 07a6 CE01      		movw r24,r28
 1517 07a8 0E94 0000 		call lcd_char
 163:graphics.c    **** 	}
 1519               	.LM136:
 1520 07ac C80F      		add r28,r24
 1521 07ae D11D      		adc r29,__zero_reg__
 1522 07b0 00C0      		rjmp .L90
 1527               	.Lscope10:
 1531               	print_result:
 1533               	.Ltext7:
   1:table.c       **** static void form_table_key(uint8_t button, uint8_t action);
   2:table.c       **** static void form_table_input_button_ok_click(void);
   3:table.c       **** static void form_table_input_button_prev_click(void);
   4:table.c       **** static void form_table_input_button_next_click(void);
   5:table.c       **** 
   6:table.c       **** static char input_x_buffer[16] = "0.0";
   7:table.c       **** static char input_table_step_buffer[16] = "0.5";
   8:table.c       **** 
   9:table.c       **** static float tstep, tx, ty;
  10:table.c       **** 
  11:table.c       **** static Element table_elements[] =
  12:table.c       **** {
  13:table.c       **** 	/* Expression */
  14:table.c       **** 	{
  15:table.c       **** 		.Type = ELEMENT_TYPE_INPUT,
  16:table.c       **** 		.E = { .I =
  17:table.c       **** 		{
  18:table.c       **** 			.Flags = 0,
  19:table.c       **** 			.X = 5,
  20:table.c       **** 			.Y = 5,
  21:table.c       **** 			.W = 185,
  22:table.c       **** 			.Position = 0,
  23:table.c       **** 			.Length = 0,
  24:table.c       **** 			.Size = sizeof(input_fx_buffer),
  25:table.c       **** 			.Text = input_fx_buffer
  26:table.c       **** 		}}
  27:table.c       **** 	},
  28:table.c       **** 	{
  29:table.c       **** 		.Type = ELEMENT_TYPE_BUTTON,
  30:table.c       **** 		.E = { .B =
  31:table.c       **** 		{
  32:table.c       **** 			.Flags = FLAG_TEXT_PROGMEM,
  33:table.c       **** 			.X = 195,
  34:table.c       **** 			.Y = 5,
  35:table.c       **** 			.W = 40,
  36:table.c       **** 			.H = 20,
  37:table.c       **** 			.Text = { .Flash = ok },
  38:table.c       **** 			.Click = form_table_input_button_ok_click
  39:table.c       **** 		}}
  40:table.c       **** 	},
  41:table.c       **** 
  42:table.c       **** 	/* X */
  43:table.c       **** 	{
  44:table.c       **** 		.Type = ELEMENT_TYPE_LABEL,
  45:table.c       **** 		.E = { .L =
  46:table.c       **** 		{
  47:table.c       **** 			.Flags = FLAG_TEXT_PROGMEM,
  48:table.c       **** 			.X = 5,
  49:table.c       **** 			.Y = 35,
  50:table.c       **** 			.Text = { .Flash = xeq }
  51:table.c       **** 		}}
  52:table.c       **** 	},
  53:table.c       **** 	{
  54:table.c       **** 		.Type = ELEMENT_TYPE_INPUT,
  55:table.c       **** 		.E = { .I =
  56:table.c       **** 		{
  57:table.c       **** 			.Flags = 0,
  58:table.c       **** 			.X = 45,
  59:table.c       **** 			.Y = 30,
  60:table.c       **** 			.W = 190,
  61:table.c       **** 			.Position = 3,
  62:table.c       **** 			.Length = 3,
  63:table.c       **** 			.Size = sizeof(input_x_buffer),
  64:table.c       **** 			.Text = input_x_buffer
  65:table.c       **** 		}}
  66:table.c       **** 	},
  67:table.c       **** 
  68:table.c       **** 	/* Step */
  69:table.c       **** 	{
  70:table.c       **** 		.Type = ELEMENT_TYPE_LABEL,
  71:table.c       **** 		.E = { .L =
  72:table.c       **** 		{
  73:table.c       **** 			.Flags = FLAG_TEXT_PROGMEM,
  74:table.c       **** 			.X = 5,
  75:table.c       **** 			.Y = 60,
  76:table.c       **** 			.Text = { .Flash = step }
  77:table.c       **** 		}}
  78:table.c       **** 	},
  79:table.c       **** 	{
  80:table.c       **** 		.Type = ELEMENT_TYPE_INPUT,
  81:table.c       **** 		.E = { .I =
  82:table.c       **** 		{
  83:table.c       **** 			.Flags = 0,
  84:table.c       **** 			.X = 45,
  85:table.c       **** 			.Y = 55,
  86:table.c       **** 			.W = 190,
  87:table.c       **** 			.Position = 3,
  88:table.c       **** 			.Length = 3,
  89:table.c       **** 			.Size = sizeof(input_table_step_buffer),
  90:table.c       **** 			.Text = input_table_step_buffer
  91:table.c       **** 		}}
  92:table.c       **** 	},
  93:table.c       **** 
  94:table.c       **** 	/* Prev */
  95:table.c       **** 	{
  96:table.c       **** 		.Type = ELEMENT_TYPE_BUTTON,
  97:table.c       **** 		.E = { .B =
  98:table.c       **** 		{
  99:table.c       **** 			.Flags = FLAG_TEXT_PROGMEM,
 100:table.c       **** 			.X = 5,
 101:table.c       **** 			.Y = 80,
 102:table.c       **** 			.W = 110,
 103:table.c       **** 			.H = 20,
 104:table.c       **** 			.Text = { .Flash = prev },
 105:table.c       **** 			.Click = form_table_input_button_prev_click
 106:table.c       **** 		}}
 107:table.c       **** 	},
 108:table.c       **** 
 109:table.c       **** 	/* Next */
 110:table.c       **** 	{
 111:table.c       **** 		.Type = ELEMENT_TYPE_BUTTON,
 112:table.c       **** 		.E = { .B =
 113:table.c       **** 		{
 114:table.c       **** 			.Flags = FLAG_TEXT_PROGMEM,
 115:table.c       **** 			.X = 125,
 116:table.c       **** 			.Y = 80,
 117:table.c       **** 			.W = 110,
 118:table.c       **** 			.H = 20,
 119:table.c       **** 			.Text = { .Flash = next },
 120:table.c       **** 			.Click = form_table_input_button_next_click
 121:table.c       **** 		}}
 122:table.c       **** 	},
 123:table.c       **** 
 124:table.c       **** 	/* Result */
 125:table.c       **** 	{
 126:table.c       **** 		.Type = ELEMENT_TYPE_LABEL,
 127:table.c       **** 		.E = { .L =
 128:table.c       **** 		{
 129:table.c       **** 			.Flags = FLAG_TEXT_PROGMEM,
 130:table.c       **** 			.X = 5,
 131:table.c       **** 			.Y = 110,
 132:table.c       **** 			.Text = { .Flash = xeq + 2 }
 133:table.c       **** 		}}
 134:table.c       **** 	}
 135:table.c       **** };
 136:table.c       **** 
 137:table.c       **** static Form table_form =
 138:table.c       **** {
 139:table.c       **** 	.Flags = FLAG_TEXT_PROGMEM,
 140:table.c       **** 	.Title = { .Flash = calculator },
 141:table.c       **** 	.Elements = table_elements,
 142:table.c       **** 	.Count = arrlen(table_elements),
 143:table.c       **** 	.OnKey = form_table_key
 144:table.c       **** };
 145:table.c       **** 
 146:table.c       **** static void form_table_key(uint8_t button, uint8_t action)
 147:table.c       **** {
 148:table.c       **** 	if(button == BUTTON_B)
 149:table.c       **** 	{
 150:table.c       **** 		apps_open();
 151:table.c       **** 	}
 152:table.c       **** }
 153:table.c       **** 
 154:table.c       **** static void print_error(uint8_t code)
 155:table.c       **** {
 156:table.c       **** 	const char *s = error_syntax;
 157:table.c       **** 	switch(code)
 158:table.c       **** 	{
 159:table.c       **** 		case ERROR_MATH:
 160:table.c       **** 			s = error_math;
 161:table.c       **** 			break;
 162:table.c       **** 
 163:table.c       **** 		case ERROR_NOMEM:
 164:table.c       **** 			s = error_nomem;
 165:table.c       **** 			break;
 166:table.c       **** 
 167:table.c       **** 		case ERROR_RANGE:
 168:table.c       **** 			s = error_range;
 169:table.c       **** 			break;
 170:table.c       **** 	}
 171:table.c       **** 
 172:table.c       **** 	lcd_color(LCD_WHITE);
 173:table.c       **** 	lcd_rect(50, 130, 120, 11);
 174:table.c       **** 	lcd_color(LCD_BLACK);
 175:table.c       **** 	lcd_string_P(50, 130, s);
 176:table.c       **** }
 177:table.c       **** 
 178:table.c       **** static void print_result(void)
 179:table.c       **** {
 1535               	.LM137:
 1536               	.LFBB11:
 1537 07b2 0F93      		push r16
 1538 07b4 1F93      		push r17
 1539 07b6 CF93      		push r28
 1540 07b8 DF93      		push r29
 1541 07ba CDB7      		in r28,__SP_L__
 1542 07bc DEB7      		in r29,__SP_H__
 1543 07be 6497      		sbiw r28,20
 1544 07c0 0FB6      		in __tmp_reg__,__SREG__
 1545 07c2 F894      		cli
 1546 07c4 DEBF      		out __SP_H__,r29
 1547 07c6 0FBE      		out __SREG__,__tmp_reg__
 1548 07c8 CDBF      		out __SP_L__,r28
 1549               	/* prologue: function */
 1550               	/* frame size = 20 */
 1551               	/* stack size = 24 */
 1552               	.L__stack_usage = 24
 180:table.c       **** 	char s[16];
 181:table.c       **** 	dtostrf(ty, -15, 6, s);
 1554               	.LM138:
 1555 07ca 8091 0000 		lds r24,ty
 1556 07ce 9091 0000 		lds r25,ty+1
 1557 07d2 A091 0000 		lds r26,ty+2
 1558 07d6 B091 0000 		lds r27,ty+3
 1559 07da 8E01      		movw r16,r28
 1560 07dc 0F5F      		subi r16,-1
 1561 07de 1F4F      		sbci r17,-1
 1562 07e0 26E0      		ldi r18,lo8(6)
 1563 07e2 41EF      		ldi r20,lo8(-15)
 1564 07e4 BC01      		movw r22,r24
 1565 07e6 CD01      		movw r24,r26
 1566 07e8 0E94 0000 		call dtostrf
 182:table.c       **** 	lcd_color(LCD_WHITE);
 1568               	.LM139:
 1569 07ec 8FEF      		ldi r24,lo8(-1)
 1570 07ee 9FEF      		ldi r25,lo8(-1)
 1571 07f0 9093 0000 		sts _color+1,r25
 1572 07f4 8093 0000 		sts _color,r24
 183:table.c       **** 	lcd_rect(50, 130, 120, 11);
 1574               	.LM140:
 1575 07f8 2BE0      		ldi r18,lo8(11)
 1576 07fa 30E0      		ldi r19,0
 1577 07fc 48E7      		ldi r20,lo8(120)
 1578 07fe 50E0      		ldi r21,0
 1579 0800 62E8      		ldi r22,lo8(-126)
 1580 0802 70E0      		ldi r23,0
 1581 0804 82E3      		ldi r24,lo8(50)
 1582 0806 90E0      		ldi r25,0
 1583 0808 0E94 0000 		call lcd_rect
 184:table.c       **** 	lcd_color(LCD_BLACK);
 1585               	.LM141:
 1586 080c 1092 0000 		sts _color+1,__zero_reg__
 1587 0810 1092 0000 		sts _color,__zero_reg__
 185:table.c       **** 	lcd_string(50, 130, s);
 1589               	.LM142:
 1590 0814 A801      		movw r20,r16
 1591 0816 62E8      		ldi r22,lo8(-126)
 1592 0818 70E0      		ldi r23,0
 1593 081a 82E3      		ldi r24,lo8(50)
 1594 081c 90E0      		ldi r25,0
 1595 081e 0E94 0000 		call lcd_string
 1596               	/* epilogue start */
 186:table.c       **** }
 1598               	.LM143:
 1599 0822 6496      		adiw r28,20
 1600 0824 0FB6      		in __tmp_reg__,__SREG__
 1601 0826 F894      		cli
 1602 0828 DEBF      		out __SP_H__,r29
 1603 082a 0FBE      		out __SREG__,__tmp_reg__
 1604 082c CDBF      		out __SP_L__,r28
 1605 082e DF91      		pop r29
 1606 0830 CF91      		pop r28
 1607 0832 1F91      		pop r17
 1608 0834 0F91      		pop r16
 1609 0836 0895      		ret
 1614               	.Lscope11:
 1619               	render_key:
 1621               	.Ltext8:
  80:keyboard.c    **** 
  81:keyboard.c    **** static void render_key(uint8_t k)
  82:keyboard.c    **** {
 1623               	.LM144:
 1624               	.LFBB12:
 1625 0838 DF92      		push r13
 1626 083a EF92      		push r14
 1627 083c FF92      		push r15
 1628 083e 0F93      		push r16
 1629 0840 1F93      		push r17
 1630 0842 CF93      		push r28
 1631 0844 DF93      		push r29
 1632               	/* prologue: function */
 1633               	/* frame size = 0 */
 1634               	/* stack size = 7 */
 1635               	.L__stack_usage = 7
 1636 0846 D82E      		mov r13,r24
 1637 0848 89E0      		ldi r24,lo8(9)
 1638 084a D89E      		mul r13,r24
 1639 084c 9001      		movw r18,r0
 1640 084e 1124      		clr __zero_reg__
 1641               	.LBB58:
  83:keyboard.c    **** 	uint8_t x, y, w;
  84:keyboard.c    **** 	x = pgm_read_byte(&(keys[k].X));
 1643               	.LM145:
 1644 0850 F901      		movw r30,r18
 1645 0852 E050      		subi r30,lo8(-(keys))
 1646 0854 F040      		sbci r31,hi8(-(keys))
 1647               	/* #APP */
 1648               	 ;  84 "keyboard.c" 1
 1649 0856 E490      		lpm r14, Z
 1650               		
 1651               	 ;  0 "" 2
 1652               	/* #NOAPP */
 1653               	.LBE58:
 1654               	.LBB59:
  85:keyboard.c    **** 	y = pgm_read_byte(&(keys[k].Y));
 1656               	.LM146:
 1657 0858 F901      		movw r30,r18
 1658 085a E050      		subi r30,lo8(-(keys+1))
 1659 085c F040      		sbci r31,hi8(-(keys+1))
 1660               	/* #APP */
 1661               	 ;  85 "keyboard.c" 1
 1662 085e 0491      		lpm r16, Z
 1663               		
 1664               	 ;  0 "" 2
 1665               	/* #NOAPP */
 1666               	.LBE59:
 1667               	.LBB60:
  86:keyboard.c    **** 	w = pgm_read_byte(&(keys[k].W));
 1669               	.LM147:
 1670 0860 F901      		movw r30,r18
 1671 0862 E050      		subi r30,lo8(-(keys+2))
 1672 0864 F040      		sbci r31,hi8(-(keys+2))
 1673               	/* #APP */
 1674               	 ;  86 "keyboard.c" 1
 1675 0866 C491      		lpm r28, Z
 1676               		
 1677               	 ;  0 "" 2
 1678               	/* #NOAPP */
 1679               	.LBE60:
  87:keyboard.c    **** 
  88:keyboard.c    **** 	lcd_color(LCD_WHITE);
 1681               	.LM148:
 1682 0868 8FEF      		ldi r24,lo8(-1)
 1683 086a 9FEF      		ldi r25,lo8(-1)
 1684 086c 9093 0000 		sts _color+1,r25
 1685 0870 8093 0000 		sts _color,r24
  89:keyboard.c    **** 	lcd_rect(x, LCD_HEIGHT - 80 + y, w, 15);
 1687               	.LM149:
 1688 0874 10E0      		ldi r17,0
 1689 0876 F12C      		mov r15,__zero_reg__
 1690 0878 4C2F      		mov r20,r28
 1691 087a 50E0      		ldi r21,0
 1692 087c B801      		movw r22,r16
 1693 087e 6051      		subi r22,16
 1694 0880 7F4F      		sbci r23,-1
 1695 0882 2FE0      		ldi r18,lo8(15)
 1696 0884 30E0      		ldi r19,0
 1697 0886 C701      		movw r24,r14
 1698 0888 0E94 0000 		call lcd_rect
  90:keyboard.c    **** 	lcd_color(LCD_BLACK);
 1700               	.LM150:
 1701 088c 1092 0000 		sts _color+1,__zero_reg__
 1702 0890 1092 0000 		sts _color,__zero_reg__
  91:keyboard.c    **** 	lcd_char(x + w / 2 - pgm_read_byte(&font_default_widths[key_shift(k) - 32]) / 2,
  92:keyboard.c    **** 			LCD_HEIGHT - 80 + y + 2, key_shift(k));
 1704               	.LM151:
 1705 0894 8D2D      		mov r24,r13
 1706 0896 0E94 0000 		call key_shift
 1707 089a D82F      		mov r29,r24
  91:keyboard.c    **** 	lcd_char(x + w / 2 - pgm_read_byte(&font_default_widths[key_shift(k) - 32]) / 2,
 1709               	.LM152:
 1710 089c EC2F      		mov r30,r28
 1711 089e E695      		lsr r30
  91:keyboard.c    **** 	lcd_char(x + w / 2 - pgm_read_byte(&font_default_widths[key_shift(k) - 32]) / 2,
 1713               	.LM153:
 1714 08a0 EE0E      		add r14,r30
 1715 08a2 F11C      		adc r15,__zero_reg__
 1716               	.LBB61:
  91:keyboard.c    **** 	lcd_char(x + w / 2 - pgm_read_byte(&font_default_widths[key_shift(k) - 32]) / 2,
 1718               	.LM154:
 1719 08a4 8D2D      		mov r24,r13
 1720 08a6 0E94 0000 		call key_shift
 1721 08aa 282F      		mov r18,r24
 1722 08ac 2052      		subi r18,32
 1723 08ae 330B      		sbc r19,r19
 1724 08b0 F901      		movw r30,r18
 1725 08b2 E050      		subi r30,lo8(-(font_default_widths))
 1726 08b4 F040      		sbci r31,hi8(-(font_default_widths))
 1727               	/* #APP */
 1728               	 ;  91 "keyboard.c" 1
 1729 08b6 E491      		lpm r30, Z
 1730               		
 1731               	 ;  0 "" 2
 1732               	/* #NOAPP */
 1733               	.LBE61:
 1735               	.LM155:
 1736 08b8 B801      		movw r22,r16
 1737 08ba 6E50      		subi r22,14
 1738 08bc 7F4F      		sbci r23,-1
  91:keyboard.c    **** 	lcd_char(x + w / 2 - pgm_read_byte(&font_default_widths[key_shift(k) - 32]) / 2,
 1740               	.LM156:
 1741 08be E695      		lsr r30
  91:keyboard.c    **** 	lcd_char(x + w / 2 - pgm_read_byte(&font_default_widths[key_shift(k) - 32]) / 2,
 1743               	.LM157:
 1744 08c0 4D2F      		mov r20,r29
 1745 08c2 C701      		movw r24,r14
 1746 08c4 8E1B      		sub r24,r30
 1747 08c6 9109      		sbc r25,__zero_reg__
 1748               	/* epilogue start */
  93:keyboard.c    **** }
 1750               	.LM158:
 1751 08c8 DF91      		pop r29
 1752 08ca CF91      		pop r28
 1753 08cc 1F91      		pop r17
 1754 08ce 0F91      		pop r16
 1755 08d0 FF90      		pop r15
 1756 08d2 EF90      		pop r14
 1757 08d4 DF90      		pop r13
  91:keyboard.c    **** 	lcd_char(x + w / 2 - pgm_read_byte(&font_default_widths[key_shift(k) - 32]) / 2,
 1759               	.LM159:
 1760 08d6 0C94 0000 		jmp lcd_char
 1762               	.Lscope12:
 1767               	render_key_sel:
  94:keyboard.c    **** 
  95:keyboard.c    **** static void render_key_sel(uint8_t k)
  96:keyboard.c    **** {
 1769               	.LM160:
 1770               	.LFBB13:
 1771 08da DF92      		push r13
 1772 08dc EF92      		push r14
 1773 08de FF92      		push r15
 1774 08e0 0F93      		push r16
 1775 08e2 1F93      		push r17
 1776 08e4 CF93      		push r28
 1777 08e6 DF93      		push r29
 1778               	/* prologue: function */
 1779               	/* frame size = 0 */
 1780               	/* stack size = 7 */
 1781               	.L__stack_usage = 7
 1782 08e8 D82E      		mov r13,r24
 1783 08ea 89E0      		ldi r24,lo8(9)
 1784 08ec D89E      		mul r13,r24
 1785 08ee 9001      		movw r18,r0
 1786 08f0 1124      		clr __zero_reg__
 1787               	.LBB62:
  97:keyboard.c    **** 	uint8_t x, y, w;
  98:keyboard.c    **** 	x = pgm_read_byte(&(keys[k].X));
 1789               	.LM161:
 1790 08f2 F901      		movw r30,r18
 1791 08f4 E050      		subi r30,lo8(-(keys))
 1792 08f6 F040      		sbci r31,hi8(-(keys))
 1793               	/* #APP */
 1794               	 ;  98 "keyboard.c" 1
 1795 08f8 E490      		lpm r14, Z
 1796               		
 1797               	 ;  0 "" 2
 1798               	/* #NOAPP */
 1799               	.LBE62:
 1800               	.LBB63:
  99:keyboard.c    **** 	y = pgm_read_byte(&(keys[k].Y));
 1802               	.LM162:
 1803 08fa F901      		movw r30,r18
 1804 08fc E050      		subi r30,lo8(-(keys+1))
 1805 08fe F040      		sbci r31,hi8(-(keys+1))
 1806               	/* #APP */
 1807               	 ;  99 "keyboard.c" 1
 1808 0900 0491      		lpm r16, Z
 1809               		
 1810               	 ;  0 "" 2
 1811               	/* #NOAPP */
 1812               	.LBE63:
 1813               	.LBB64:
 100:keyboard.c    **** 	w = pgm_read_byte(&(keys[k].W));
 1815               	.LM163:
 1816 0902 F901      		movw r30,r18
 1817 0904 E050      		subi r30,lo8(-(keys+2))
 1818 0906 F040      		sbci r31,hi8(-(keys+2))
 1819               	/* #APP */
 1820               	 ;  100 "keyboard.c" 1
 1821 0908 C491      		lpm r28, Z
 1822               		
 1823               	 ;  0 "" 2
 1824               	/* #NOAPP */
 1825               	.LBE64:
 101:keyboard.c    **** 
 102:keyboard.c    **** 	lcd_color(LCD_BLUE);
 1827               	.LM164:
 1828 090a 8FE1      		ldi r24,lo8(31)
 1829 090c 90E0      		ldi r25,0
 1830 090e 9093 0000 		sts _color+1,r25
 1831 0912 8093 0000 		sts _color,r24
 103:keyboard.c    **** 	lcd_rect(x, LCD_HEIGHT - 80 + y, w, 15);
 1833               	.LM165:
 1834 0916 10E0      		ldi r17,0
 1835 0918 F12C      		mov r15,__zero_reg__
 1836 091a 4C2F      		mov r20,r28
 1837 091c 50E0      		ldi r21,0
 1838 091e B801      		movw r22,r16
 1839 0920 6051      		subi r22,16
 1840 0922 7F4F      		sbci r23,-1
 1841 0924 2FE0      		ldi r18,lo8(15)
 1842 0926 30E0      		ldi r19,0
 1843 0928 C701      		movw r24,r14
 1844 092a 0E94 0000 		call lcd_rect
 104:keyboard.c    **** 	lcd_color(LCD_WHITE);
 1846               	.LM166:
 1847 092e 8FEF      		ldi r24,lo8(-1)
 1848 0930 9FEF      		ldi r25,lo8(-1)
 1849 0932 9093 0000 		sts _color+1,r25
 1850 0936 8093 0000 		sts _color,r24
 105:keyboard.c    **** 	lcd_char(x + w / 2 - pgm_read_byte(&font_default_widths[key_shift(k) - 32]) / 2,
 106:keyboard.c    **** 			LCD_HEIGHT - 80 + y + 2, key_shift(k));
 1852               	.LM167:
 1853 093a 8D2D      		mov r24,r13
 1854 093c 0E94 0000 		call key_shift
 1855 0940 D82F      		mov r29,r24
 105:keyboard.c    **** 	lcd_char(x + w / 2 - pgm_read_byte(&font_default_widths[key_shift(k) - 32]) / 2,
 1857               	.LM168:
 1858 0942 EC2F      		mov r30,r28
 1859 0944 E695      		lsr r30
 105:keyboard.c    **** 	lcd_char(x + w / 2 - pgm_read_byte(&font_default_widths[key_shift(k) - 32]) / 2,
 1861               	.LM169:
 1862 0946 EE0E      		add r14,r30
 1863 0948 F11C      		adc r15,__zero_reg__
 1864               	.LBB65:
 105:keyboard.c    **** 	lcd_char(x + w / 2 - pgm_read_byte(&font_default_widths[key_shift(k) - 32]) / 2,
 1866               	.LM170:
 1867 094a 8D2D      		mov r24,r13
 1868 094c 0E94 0000 		call key_shift
 1869 0950 282F      		mov r18,r24
 1870 0952 2052      		subi r18,32
 1871 0954 330B      		sbc r19,r19
 1872 0956 F901      		movw r30,r18
 1873 0958 E050      		subi r30,lo8(-(font_default_widths))
 1874 095a F040      		sbci r31,hi8(-(font_default_widths))
 1875               	/* #APP */
 1876               	 ;  105 "keyboard.c" 1
 1877 095c E491      		lpm r30, Z
 1878               		
 1879               	 ;  0 "" 2
 1880               	/* #NOAPP */
 1881               	.LBE65:
 1883               	.LM171:
 1884 095e B801      		movw r22,r16
 1885 0960 6E50      		subi r22,14
 1886 0962 7F4F      		sbci r23,-1
 105:keyboard.c    **** 	lcd_char(x + w / 2 - pgm_read_byte(&font_default_widths[key_shift(k) - 32]) / 2,
 1888               	.LM172:
 1889 0964 E695      		lsr r30
 105:keyboard.c    **** 	lcd_char(x + w / 2 - pgm_read_byte(&font_default_widths[key_shift(k) - 32]) / 2,
 1891               	.LM173:
 1892 0966 4D2F      		mov r20,r29
 1893 0968 C701      		movw r24,r14
 1894 096a 8E1B      		sub r24,r30
 1895 096c 9109      		sbc r25,__zero_reg__
 1896               	/* epilogue start */
 107:keyboard.c    **** }
 1898               	.LM174:
 1899 096e DF91      		pop r29
 1900 0970 CF91      		pop r28
 1901 0972 1F91      		pop r17
 1902 0974 0F91      		pop r16
 1903 0976 FF90      		pop r15
 1904 0978 EF90      		pop r14
 1905 097a DF90      		pop r13
 105:keyboard.c    **** 	lcd_char(x + w / 2 - pgm_read_byte(&font_default_widths[key_shift(k) - 32]) / 2,
 1907               	.LM175:
 1908 097c 0C94 0000 		jmp lcd_char
 1910               	.Lscope13:
 1914               	render_keys:
 108:keyboard.c    **** 
 109:keyboard.c    **** static void render_key_move(uint8_t old, uint8_t new)
 110:keyboard.c    **** {
 111:keyboard.c    **** 	render_key(old);
 112:keyboard.c    **** 	render_key_sel(new);
 113:keyboard.c    **** }
 114:keyboard.c    **** 
 115:keyboard.c    **** static void render_grid(void)
 116:keyboard.c    **** {
 117:keyboard.c    **** 	uint8_t i;
 118:keyboard.c    **** 	lcd_color(LCD_BLACK);
 119:keyboard.c    **** 	lcd_hline(0, LCD_HEIGHT - 80, LCD_WIDTH);
 120:keyboard.c    **** 	lcd_hline(0, LCD_HEIGHT - 80 + 16, LCD_WIDTH);
 121:keyboard.c    **** 	lcd_hline(0, LCD_HEIGHT - 80 + 32, LCD_WIDTH);
 122:keyboard.c    **** 	lcd_hline(0, LCD_HEIGHT - 80 + 48, LCD_WIDTH);
 123:keyboard.c    **** 	lcd_hline(0, LCD_HEIGHT - 80 + 64, LCD_WIDTH);
 124:keyboard.c    **** 
 125:keyboard.c    **** 	/* Middle Bottom Row */
 126:keyboard.c    **** 	lcd_rect(0, LCD_HEIGHT - 80 + 33, 29, 15);
 127:keyboard.c    **** 
 128:keyboard.c    **** 	/* Second Bottom Row */
 129:keyboard.c    **** 	lcd_rect(0, LCD_HEIGHT - 80 + 49, 33, 15);
 130:keyboard.c    **** 	lcd_rect(177 + 16, LCD_HEIGHT - 80 + 49, LCD_WIDTH - (177 + 16), 15);
 131:keyboard.c    **** 
 132:keyboard.c    **** 	/* Enter Sides */
 133:keyboard.c    **** 	lcd_rect(0, LCD_HEIGHT - 80 + 65, 65, 15);
 134:keyboard.c    **** 	lcd_rect(65 + 96, LCD_HEIGHT - 80 + 65, LCD_WIDTH - (65 + 96), 15);
 135:keyboard.c    **** 
 136:keyboard.c    **** 	/* Vertical */
 137:keyboard.c    **** 	for(i = 0; i < 51; ++i)
 138:keyboard.c    **** 	{
 139:keyboard.c    **** 		uint8_t x, y, w;
 140:keyboard.c    **** 		x = pgm_read_byte(&(keys[i].X));
 141:keyboard.c    **** 		y = pgm_read_byte(&(keys[i].Y));
 142:keyboard.c    **** 		w = pgm_read_byte(&(keys[i].W));
 143:keyboard.c    **** 		if(x + w < LCD_WIDTH - 1)
 144:keyboard.c    **** 		{
 145:keyboard.c    **** 			lcd_vline(x + w, LCD_HEIGHT - 80 + y, 15);
 146:keyboard.c    **** 		}
 147:keyboard.c    **** 	}
 148:keyboard.c    **** }
 149:keyboard.c    **** 
 150:keyboard.c    **** static void render_keys(void)
 151:keyboard.c    **** {
 1916               	.LM176:
 1917               	.LFBB14:
 1918 0980 CF93      		push r28
 1919               	/* prologue: function */
 1920               	/* frame size = 0 */
 1921               	/* stack size = 1 */
 1922               	.L__stack_usage = 1
 152:keyboard.c    **** 	uint8_t i;
 153:keyboard.c    **** 	for(i = 0; i < 51; ++i)
 1924               	.LM177:
 1925 0982 C0E0      		ldi r28,0
 1926               	.L98:
 154:keyboard.c    **** 	{
 155:keyboard.c    **** 		if(i == cur_key)
 1928               	.LM178:
 1929 0984 8091 0000 		lds r24,cur_key
 1930 0988 8C13      		cpse r24,r28
 1931 098a 00C0      		rjmp .L96
 156:keyboard.c    **** 		{
 157:keyboard.c    **** 			render_key_sel(i);
 1933               	.LM179:
 1934 098c 8C2F      		mov r24,r28
 1935 098e 0E94 0000 		call render_key_sel
 1936               	.L97:
 153:keyboard.c    **** 	{
 1938               	.LM180:
 1939 0992 CF5F      		subi r28,lo8(-(1))
 153:keyboard.c    **** 	{
 1941               	.LM181:
 1942 0994 C333      		cpi r28,lo8(51)
 1943 0996 01F4      		brne .L98
 1944               	/* epilogue start */
 158:keyboard.c    **** 			continue;
 159:keyboard.c    **** 		}
 160:keyboard.c    **** 
 161:keyboard.c    **** 		render_key(i);
 162:keyboard.c    **** 	}
 163:keyboard.c    **** }
 1946               	.LM182:
 1947 0998 CF91      		pop r28
 1948 099a 0895      		ret
 1949               	.L96:
 161:keyboard.c    **** 	}
 1951               	.LM183:
 1952 099c 8C2F      		mov r24,r28
 1953 099e 0E94 0000 		call render_key
 1954 09a2 00C0      		rjmp .L97
 1959               	.Lscope14:
 1963               	render_keyboard:
 164:keyboard.c    **** 
 165:keyboard.c    **** static void render_key_feedback(void)
 166:keyboard.c    **** {
 167:keyboard.c    **** 	lcd_color(LCD_WHITE);
 168:keyboard.c    **** 	lcd_rect(0, LCD_HEIGHT - 80, LCD_WIDTH, 80);
 169:keyboard.c    **** 
 170:keyboard.c    **** 	lcd_color(LCD_BLACK);
 171:keyboard.c    **** 	lcd_hline(0, LCD_HEIGHT - 80, LCD_WIDTH);
 172:keyboard.c    **** 
 173:keyboard.c    **** 	/* A */
 174:keyboard.c    **** 	lcd_rect_border(5, LCD_HEIGHT - 80 + 5, 20, 20);
 175:keyboard.c    **** 
 176:keyboard.c    **** 	/* B */
 177:keyboard.c    **** 	lcd_rect_border(5, LCD_HEIGHT - 80 + 30, 20, 20);
 178:keyboard.c    **** 
 179:keyboard.c    **** 	/* Center */
 180:keyboard.c    **** 	lcd_rect_border(110, LCD_HEIGHT - 80 + 30, 20, 20);
 181:keyboard.c    **** 
 182:keyboard.c    **** 	/* Right */
 183:keyboard.c    **** 	lcd_rect_border(135, LCD_HEIGHT - 80 + 30, 20, 20);
 184:keyboard.c    **** 
 185:keyboard.c    **** 	/* Left */
 186:keyboard.c    **** 	lcd_rect_border(85, LCD_HEIGHT - 80 + 30, 20, 20);
 187:keyboard.c    **** 
 188:keyboard.c    **** 	/* Top */
 189:keyboard.c    **** 	lcd_rect_border(110, LCD_HEIGHT - 80 + 5, 20, 20);
 190:keyboard.c    **** 
 191:keyboard.c    **** 	/* Bottom */
 192:keyboard.c    **** 	lcd_rect_border(110, LCD_HEIGHT - 80 + 55, 20, 20);
 193:keyboard.c    **** }
 194:keyboard.c    **** 
 195:keyboard.c    **** static void render_keyboard(void)
 196:keyboard.c    **** {
 1965               	.LM184:
 1966               	.LFBB15:
 1967 09a4 0F93      		push r16
 1968 09a6 1F93      		push r17
 1969 09a8 CF93      		push r28
 1970 09aa DF93      		push r29
 1971               	/* prologue: function */
 1972               	/* frame size = 0 */
 1973               	/* stack size = 4 */
 1974               	.L__stack_usage = 4
 197:keyboard.c    **** 	switch(kbd_mode)
 1976               	.LM185:
 1977 09ac 8091 0000 		lds r24,kbd_mode
 1978 09b0 8130      		cpi r24,lo8(1)
 1979 09b2 01F4      		brne .+2
 1980 09b4 00C0      		rjmp .L101
 1981 09b6 8230      		cpi r24,lo8(2)
 1982 09b8 01F4      		brne .+2
 1983 09ba 00C0      		rjmp .L102
 1984 09bc 8111      		cpse r24,__zero_reg__
 1985 09be 00C0      		rjmp .L100
 1986               	.LBB74:
 1987               	.LBB75:
 118:keyboard.c    **** 	lcd_hline(0, LCD_HEIGHT - 80, LCD_WIDTH);
 1989               	.LM186:
 1990 09c0 1092 0000 		sts _color+1,__zero_reg__
 1991 09c4 1092 0000 		sts _color,__zero_reg__
 119:keyboard.c    **** 	lcd_hline(0, LCD_HEIGHT - 80 + 16, LCD_WIDTH);
 1993               	.LM187:
 1994 09c8 21E0      		ldi r18,lo8(1)
 1995 09ca 30E0      		ldi r19,0
 1996 09cc 40EF      		ldi r20,lo8(-16)
 1997 09ce 50E0      		ldi r21,0
 1998 09d0 60EF      		ldi r22,lo8(-16)
 1999 09d2 70E0      		ldi r23,0
 2000 09d4 90E0      		ldi r25,0
 2001 09d6 80E0      		ldi r24,0
 2002 09d8 0E94 0000 		call lcd_rect
 120:keyboard.c    **** 	lcd_hline(0, LCD_HEIGHT - 80 + 32, LCD_WIDTH);
 2004               	.LM188:
 2005 09dc 21E0      		ldi r18,lo8(1)
 2006 09de 30E0      		ldi r19,0
 2007 09e0 40EF      		ldi r20,lo8(-16)
 2008 09e2 50E0      		ldi r21,0
 2009 09e4 60E0      		ldi r22,0
 2010 09e6 71E0      		ldi r23,lo8(1)
 2011 09e8 90E0      		ldi r25,0
 2012 09ea 80E0      		ldi r24,0
 2013 09ec 0E94 0000 		call lcd_rect
 121:keyboard.c    **** 	lcd_hline(0, LCD_HEIGHT - 80 + 48, LCD_WIDTH);
 2015               	.LM189:
 2016 09f0 21E0      		ldi r18,lo8(1)
 2017 09f2 30E0      		ldi r19,0
 2018 09f4 40EF      		ldi r20,lo8(-16)
 2019 09f6 50E0      		ldi r21,0
 2020 09f8 60E1      		ldi r22,lo8(16)
 2021 09fa 71E0      		ldi r23,lo8(1)
 2022 09fc 90E0      		ldi r25,0
 2023 09fe 80E0      		ldi r24,0
 2024 0a00 0E94 0000 		call lcd_rect
 122:keyboard.c    **** 	lcd_hline(0, LCD_HEIGHT - 80 + 64, LCD_WIDTH);
 2026               	.LM190:
 2027 0a04 21E0      		ldi r18,lo8(1)
 2028 0a06 30E0      		ldi r19,0
 2029 0a08 40EF      		ldi r20,lo8(-16)
 2030 0a0a 50E0      		ldi r21,0
 2031 0a0c 60E2      		ldi r22,lo8(32)
 2032 0a0e 71E0      		ldi r23,lo8(1)
 2033 0a10 90E0      		ldi r25,0
 2034 0a12 80E0      		ldi r24,0
 2035 0a14 0E94 0000 		call lcd_rect
 123:keyboard.c    **** 
 2037               	.LM191:
 2038 0a18 21E0      		ldi r18,lo8(1)
 2039 0a1a 30E0      		ldi r19,0
 2040 0a1c 40EF      		ldi r20,lo8(-16)
 2041 0a1e 50E0      		ldi r21,0
 2042 0a20 60E3      		ldi r22,lo8(48)
 2043 0a22 71E0      		ldi r23,lo8(1)
 2044 0a24 90E0      		ldi r25,0
 2045 0a26 80E0      		ldi r24,0
 2046 0a28 0E94 0000 		call lcd_rect
 126:keyboard.c    **** 
 2048               	.LM192:
 2049 0a2c 2FE0      		ldi r18,lo8(15)
 2050 0a2e 30E0      		ldi r19,0
 2051 0a30 4DE1      		ldi r20,lo8(29)
 2052 0a32 50E0      		ldi r21,0
 2053 0a34 61E1      		ldi r22,lo8(17)
 2054 0a36 71E0      		ldi r23,lo8(1)
 2055 0a38 90E0      		ldi r25,0
 2056 0a3a 80E0      		ldi r24,0
 2057 0a3c 0E94 0000 		call lcd_rect
 129:keyboard.c    **** 	lcd_rect(177 + 16, LCD_HEIGHT - 80 + 49, LCD_WIDTH - (177 + 16), 15);
 2059               	.LM193:
 2060 0a40 2FE0      		ldi r18,lo8(15)
 2061 0a42 30E0      		ldi r19,0
 2062 0a44 41E2      		ldi r20,lo8(33)
 2063 0a46 50E0      		ldi r21,0
 2064 0a48 61E2      		ldi r22,lo8(33)
 2065 0a4a 71E0      		ldi r23,lo8(1)
 2066 0a4c 90E0      		ldi r25,0
 2067 0a4e 80E0      		ldi r24,0
 2068 0a50 0E94 0000 		call lcd_rect
 130:keyboard.c    **** 
 2070               	.LM194:
 2071 0a54 2FE0      		ldi r18,lo8(15)
 2072 0a56 30E0      		ldi r19,0
 2073 0a58 4FE2      		ldi r20,lo8(47)
 2074 0a5a 50E0      		ldi r21,0
 2075 0a5c 61E2      		ldi r22,lo8(33)
 2076 0a5e 71E0      		ldi r23,lo8(1)
 2077 0a60 81EC      		ldi r24,lo8(-63)
 2078 0a62 90E0      		ldi r25,0
 2079 0a64 0E94 0000 		call lcd_rect
 133:keyboard.c    **** 	lcd_rect(65 + 96, LCD_HEIGHT - 80 + 65, LCD_WIDTH - (65 + 96), 15);
 2081               	.LM195:
 2082 0a68 2FE0      		ldi r18,lo8(15)
 2083 0a6a 30E0      		ldi r19,0
 2084 0a6c 41E4      		ldi r20,lo8(65)
 2085 0a6e 50E0      		ldi r21,0
 2086 0a70 61E3      		ldi r22,lo8(49)
 2087 0a72 71E0      		ldi r23,lo8(1)
 2088 0a74 90E0      		ldi r25,0
 2089 0a76 80E0      		ldi r24,0
 2090 0a78 0E94 0000 		call lcd_rect
 134:keyboard.c    **** 
 2092               	.LM196:
 2093 0a7c 2FE0      		ldi r18,lo8(15)
 2094 0a7e 30E0      		ldi r19,0
 2095 0a80 4FE4      		ldi r20,lo8(79)
 2096 0a82 50E0      		ldi r21,0
 2097 0a84 61E3      		ldi r22,lo8(49)
 2098 0a86 71E0      		ldi r23,lo8(1)
 2099 0a88 81EA      		ldi r24,lo8(-95)
 2100 0a8a 90E0      		ldi r25,0
 2101 0a8c 0E94 0000 		call lcd_rect
 2102 0a90 C0E0      		ldi r28,lo8(keys)
 2103 0a92 D0E0      		ldi r29,hi8(keys)
 2104 0a94 00E0      		ldi r16,lo8(keys+459)
 2105 0a96 10E0      		ldi r17,hi8(keys+459)
 2106               	.L105:
 2107               	.LBB76:
 2108               	.LBB77:
 140:keyboard.c    **** 		y = pgm_read_byte(&(keys[i].Y));
 2110               	.LM197:
 2111 0a98 FE01      		movw r30,r28
 2112               	/* #APP */
 2113               	 ;  140 "keyboard.c" 1
 2114 0a9a 8491      		lpm r24, Z
 2115               		
 2116               	 ;  0 "" 2
 2117               	/* #NOAPP */
 2118               	.LBE77:
 2119               	.LBB78:
 141:keyboard.c    **** 		w = pgm_read_byte(&(keys[i].W));
 2121               	.LM198:
 2122 0a9c 3196      		adiw r30,1
 2123               	/* #APP */
 2124               	 ;  141 "keyboard.c" 1
 2125 0a9e 6491      		lpm r22, Z
 2126               		
 2127               	 ;  0 "" 2
 2128               	/* #NOAPP */
 2129               	.LBE78:
 2130               	.LBB79:
 142:keyboard.c    **** 		if(x + w < LCD_WIDTH - 1)
 2132               	.LM199:
 2133 0aa0 3196      		adiw r30,1
 2134               	/* #APP */
 2135               	 ;  142 "keyboard.c" 1
 2136 0aa2 E491      		lpm r30, Z
 2137               		
 2138               	 ;  0 "" 2
 2139               	/* #NOAPP */
 2140               	.LBE79:
 143:keyboard.c    **** 		{
 2142               	.LM200:
 2143 0aa4 8E0F      		add r24,r30
 2144 0aa6 9927      		clr r25
 2145 0aa8 991F      		rol r25
 143:keyboard.c    **** 		{
 2147               	.LM201:
 2148 0aaa 8F3E      		cpi r24,-17
 2149 0aac 9105      		cpc r25,__zero_reg__
 2150 0aae 04F4      		brge .L104
 145:keyboard.c    **** 		}
 2152               	.LM202:
 2153 0ab0 70E0      		ldi r23,0
 2154 0ab2 6051      		subi r22,16
 2155 0ab4 7F4F      		sbci r23,-1
 2156 0ab6 2FE0      		ldi r18,lo8(15)
 2157 0ab8 30E0      		ldi r19,0
 2158 0aba 41E0      		ldi r20,lo8(1)
 2159 0abc 50E0      		ldi r21,0
 2160 0abe 0E94 0000 		call lcd_rect
 2161               	.L104:
 2162               	.LBE76:
 137:keyboard.c    **** 	{
 2164               	.LM203:
 2165 0ac2 2996      		adiw r28,9
 2166 0ac4 0C17      		cp r16,r28
 2167 0ac6 1D07      		cpc r17,r29
 2168 0ac8 01F4      		brne .L105
 2169               	.L101:
 2170               	/* epilogue start */
 2171               	.LBE75:
 2172               	.LBE74:
 198:keyboard.c    **** 	{
 199:keyboard.c    **** 		case 0:
 200:keyboard.c    **** 			render_grid();
 201:keyboard.c    **** 			render_keys();
 202:keyboard.c    **** 			break;
 203:keyboard.c    **** 
 204:keyboard.c    **** 		case 1:
 205:keyboard.c    **** 			render_keys();
 206:keyboard.c    **** 			break;
 207:keyboard.c    **** 
 208:keyboard.c    **** 		case 2:
 209:keyboard.c    **** 			render_key_feedback();
 210:keyboard.c    **** 			break;
 211:keyboard.c    **** 	}
 212:keyboard.c    **** }
 2174               	.LM204:
 2175 0aca DF91      		pop r29
 2176 0acc CF91      		pop r28
 2177 0ace 1F91      		pop r17
 2178 0ad0 0F91      		pop r16
 205:keyboard.c    **** 			break;
 2180               	.LM205:
 2181 0ad2 0C94 0000 		jmp render_keys
 2182               	.L102:
 2183               	.LBB80:
 2184               	.LBB81:
 167:keyboard.c    **** 	lcd_rect(0, LCD_HEIGHT - 80, LCD_WIDTH, 80);
 2186               	.LM206:
 2187 0ad6 8FEF      		ldi r24,lo8(-1)
 2188 0ad8 9FEF      		ldi r25,lo8(-1)
 2189 0ada 9093 0000 		sts _color+1,r25
 2190 0ade 8093 0000 		sts _color,r24
 168:keyboard.c    **** 
 2192               	.LM207:
 2193 0ae2 20E5      		ldi r18,lo8(80)
 2194 0ae4 30E0      		ldi r19,0
 2195 0ae6 40EF      		ldi r20,lo8(-16)
 2196 0ae8 50E0      		ldi r21,0
 2197 0aea 60EF      		ldi r22,lo8(-16)
 2198 0aec 70E0      		ldi r23,0
 2199 0aee 90E0      		ldi r25,0
 2200 0af0 80E0      		ldi r24,0
 2201 0af2 0E94 0000 		call lcd_rect
 170:keyboard.c    **** 	lcd_hline(0, LCD_HEIGHT - 80, LCD_WIDTH);
 2203               	.LM208:
 2204 0af6 1092 0000 		sts _color+1,__zero_reg__
 2205 0afa 1092 0000 		sts _color,__zero_reg__
 171:keyboard.c    **** 
 2207               	.LM209:
 2208 0afe 21E0      		ldi r18,lo8(1)
 2209 0b00 30E0      		ldi r19,0
 2210 0b02 40EF      		ldi r20,lo8(-16)
 2211 0b04 50E0      		ldi r21,0
 2212 0b06 60EF      		ldi r22,lo8(-16)
 2213 0b08 70E0      		ldi r23,0
 2214 0b0a 90E0      		ldi r25,0
 2215 0b0c 80E0      		ldi r24,0
 2216 0b0e 0E94 0000 		call lcd_rect
 174:keyboard.c    **** 
 2218               	.LM210:
 2219 0b12 24E1      		ldi r18,lo8(20)
 2220 0b14 30E0      		ldi r19,0
 2221 0b16 44E1      		ldi r20,lo8(20)
 2222 0b18 50E0      		ldi r21,0
 2223 0b1a 65EF      		ldi r22,lo8(-11)
 2224 0b1c 70E0      		ldi r23,0
 2225 0b1e 85E0      		ldi r24,lo8(5)
 2226 0b20 90E0      		ldi r25,0
 2227 0b22 0E94 0000 		call lcd_rect_border
 177:keyboard.c    **** 
 2229               	.LM211:
 2230 0b26 24E1      		ldi r18,lo8(20)
 2231 0b28 30E0      		ldi r19,0
 2232 0b2a 44E1      		ldi r20,lo8(20)
 2233 0b2c 50E0      		ldi r21,0
 2234 0b2e 6EE0      		ldi r22,lo8(14)
 2235 0b30 71E0      		ldi r23,lo8(1)
 2236 0b32 85E0      		ldi r24,lo8(5)
 2237 0b34 90E0      		ldi r25,0
 2238 0b36 0E94 0000 		call lcd_rect_border
 180:keyboard.c    **** 
 2240               	.LM212:
 2241 0b3a 24E1      		ldi r18,lo8(20)
 2242 0b3c 30E0      		ldi r19,0
 2243 0b3e 44E1      		ldi r20,lo8(20)
 2244 0b40 50E0      		ldi r21,0
 2245 0b42 6EE0      		ldi r22,lo8(14)
 2246 0b44 71E0      		ldi r23,lo8(1)
 2247 0b46 8EE6      		ldi r24,lo8(110)
 2248 0b48 90E0      		ldi r25,0
 2249 0b4a 0E94 0000 		call lcd_rect_border
 183:keyboard.c    **** 
 2251               	.LM213:
 2252 0b4e 24E1      		ldi r18,lo8(20)
 2253 0b50 30E0      		ldi r19,0
 2254 0b52 44E1      		ldi r20,lo8(20)
 2255 0b54 50E0      		ldi r21,0
 2256 0b56 6EE0      		ldi r22,lo8(14)
 2257 0b58 71E0      		ldi r23,lo8(1)
 2258 0b5a 87E8      		ldi r24,lo8(-121)
 2259 0b5c 90E0      		ldi r25,0
 2260 0b5e 0E94 0000 		call lcd_rect_border
 186:keyboard.c    **** 
 2262               	.LM214:
 2263 0b62 24E1      		ldi r18,lo8(20)
 2264 0b64 30E0      		ldi r19,0
 2265 0b66 44E1      		ldi r20,lo8(20)
 2266 0b68 50E0      		ldi r21,0
 2267 0b6a 6EE0      		ldi r22,lo8(14)
 2268 0b6c 71E0      		ldi r23,lo8(1)
 2269 0b6e 85E5      		ldi r24,lo8(85)
 2270 0b70 90E0      		ldi r25,0
 2271 0b72 0E94 0000 		call lcd_rect_border
 189:keyboard.c    **** 
 2273               	.LM215:
 2274 0b76 24E1      		ldi r18,lo8(20)
 2275 0b78 30E0      		ldi r19,0
 2276 0b7a 44E1      		ldi r20,lo8(20)
 2277 0b7c 50E0      		ldi r21,0
 2278 0b7e 65EF      		ldi r22,lo8(-11)
 2279 0b80 70E0      		ldi r23,0
 2280 0b82 8EE6      		ldi r24,lo8(110)
 2281 0b84 90E0      		ldi r25,0
 2282 0b86 0E94 0000 		call lcd_rect_border
 192:keyboard.c    **** }
 2284               	.LM216:
 2285 0b8a 24E1      		ldi r18,lo8(20)
 2286 0b8c 30E0      		ldi r19,0
 2287 0b8e 44E1      		ldi r20,lo8(20)
 2288 0b90 50E0      		ldi r21,0
 2289 0b92 67E2      		ldi r22,lo8(39)
 2290 0b94 71E0      		ldi r23,lo8(1)
 2291 0b96 8EE6      		ldi r24,lo8(110)
 2292 0b98 90E0      		ldi r25,0
 2293               	/* epilogue start */
 2294               	.LBE81:
 2295               	.LBE80:
 2297               	.LM217:
 2298 0b9a DF91      		pop r29
 2299 0b9c CF91      		pop r28
 2300 0b9e 1F91      		pop r17
 2301 0ba0 0F91      		pop r16
 2302               	.LBB83:
 2303               	.LBB82:
 192:keyboard.c    **** }
 2305               	.LM218:
 2306 0ba2 0C94 0000 		jmp lcd_rect_border
 2307               	.L100:
 2308               	/* epilogue start */
 2309               	.LBE82:
 2310               	.LBE83:
 2312               	.LM219:
 2313 0ba6 DF91      		pop r29
 2314 0ba8 CF91      		pop r28
 2315 0baa 1F91      		pop r17
 2316 0bac 0F91      		pop r16
 2317 0bae 0895      		ret
 2319               	.Lscope15:
 2323               	timer_update:
 2325               	.Ltext9:
   1:clock.c       **** static uint16_t count_up = 0xFFFF;
   2:clock.c       **** 
   3:clock.c       **** static void timer_update(void);
   4:clock.c       **** static void form_clock_button_get_click(void);
   5:clock.c       **** static void form_clock_button_toggle_click(void);
   6:clock.c       **** static void form_clock_key(uint8_t button, uint8_t action);
   7:clock.c       **** 
   8:clock.c       **** static Element clock_elements[] =
   9:clock.c       **** {
  10:clock.c       **** 	/* Get Time and Date Button */
  11:clock.c       **** 	{
  12:clock.c       **** 		.Type = ELEMENT_TYPE_BUTTON,
  13:clock.c       **** 		.E = { .B =
  14:clock.c       **** 		{
  15:clock.c       **** 			.Flags = FLAG_TEXT_PROGMEM,
  16:clock.c       **** 			.X = 5,
  17:clock.c       **** 			.Y = 5,
  18:clock.c       **** 			.W = 230,
  19:clock.c       **** 			.H = 20,
  20:clock.c       **** 			.Text = { .Flash = get_time_and_date },
  21:clock.c       **** 			.Click = form_clock_button_get_click
  22:clock.c       **** 		}}
  23:clock.c       **** 	},
  24:clock.c       **** 
  25:clock.c       **** 	/* Start/Stop Timer Button */
  26:clock.c       **** 	{
  27:clock.c       **** 		.Type = ELEMENT_TYPE_BUTTON,
  28:clock.c       **** 		.E = { .B =
  29:clock.c       **** 		{
  30:clock.c       **** 			.Flags = FLAG_TEXT_PROGMEM,
  31:clock.c       **** 			.X = 5,
  32:clock.c       **** 			.Y = 55,
  33:clock.c       **** 			.W = 230,
  34:clock.c       **** 			.H = 20,
  35:clock.c       **** 			.Text = { .Flash = start_timer },
  36:clock.c       **** 			.Click = form_clock_button_toggle_click
  37:clock.c       **** 		}}
  38:clock.c       **** 	}
  39:clock.c       **** };
  40:clock.c       **** 
  41:clock.c       **** static Form clock_form =
  42:clock.c       **** {
  43:clock.c       **** 	.Flags = FLAG_TEXT_PROGMEM,
  44:clock.c       **** 	.Title = { .Flash = clock },
  45:clock.c       **** 	.Elements = clock_elements,
  46:clock.c       **** 	.Count = arrlen(clock_elements),
  47:clock.c       **** 	.OnKey = form_clock_key
  48:clock.c       **** };
  49:clock.c       **** 
  50:clock.c       **** static void form_clock_button_get_click(void)
  51:clock.c       **** {
  52:clock.c       **** 	network_request("datetime");
  53:clock.c       **** 	lcd_color(LCD_WHITE);
  54:clock.c       **** 	lcd_rect(0, 50, 240, 20);
  55:clock.c       **** 	lcd_color(LCD_BLACK);
  56:clock.c       **** 	lcd_string(5, 50, _response);
  57:clock.c       **** }
  58:clock.c       **** 
  59:clock.c       **** static void form_clock_button_toggle_click(void)
  60:clock.c       **** {
  61:clock.c       **** 	if(clock_elements[1].E.B.Text.Flash == start_timer)
  62:clock.c       **** 	{
  63:clock.c       **** 		count_up = 0;
  64:clock.c       **** 		timer_update();
  65:clock.c       **** 		clock_elements[1].E.B.Text.Flash = stop_timer;
  66:clock.c       **** 	}
  67:clock.c       **** 	else
  68:clock.c       **** 	{
  69:clock.c       **** 		count_up = 0xFFFF;
  70:clock.c       **** 		clock_elements[1].E.B.Text.Flash = start_timer;
  71:clock.c       **** 	}
  72:clock.c       **** 
  73:clock.c       **** 	button_render(&clock_elements[1].E.B, 1);
  74:clock.c       **** }
  75:clock.c       **** 
  76:clock.c       **** static void clock_update(void)
  77:clock.c       **** {
  78:clock.c       **** 	if(count_up >= 60000)
  79:clock.c       **** 	{
  80:clock.c       **** 		return;
  81:clock.c       **** 	}
  82:clock.c       **** 
  83:clock.c       **** 	++count_up;
  84:clock.c       **** 	timer_update();
  85:clock.c       **** }
  86:clock.c       **** 
  87:clock.c       **** static void timer_update(void)
  88:clock.c       **** {
 2327               	.LM220:
 2328               	.LFBB16:
 2329 0bb0 1F93      		push r17
 2330 0bb2 CF93      		push r28
 2331 0bb4 DF93      		push r29
 2332               	/* prologue: function */
 2333               	/* frame size = 0 */
 2334               	/* stack size = 3 */
 2335               	.L__stack_usage = 3
  89:clock.c       **** 	uint8_t i;
  90:clock.c       **** 
  91:clock.c       **** 	i = '0' + ((count_up / 10000) % 10);
 2337               	.LM221:
 2338 0bb6 C091 0000 		lds r28,count_up
 2339 0bba D091 0000 		lds r29,count_up+1
 2340 0bbe CE01      		movw r24,r28
 2341 0bc0 60E1      		ldi r22,lo8(16)
 2342 0bc2 77E2      		ldi r23,lo8(39)
 2343 0bc4 0E94 0000 		call __udivmodhi4
 2345               	.LM222:
 2346 0bc8 10E3      		ldi r17,lo8(48)
 2347 0bca 160F      		add r17,r22
  92:clock.c       **** 	if(i != _response[0])
 2349               	.LM223:
 2350 0bcc 4091 0000 		lds r20,_response
 2352               	.LM224:
 2353 0bd0 4117      		cp r20,r17
 2354 0bd2 01F0      		breq .L108
  93:clock.c       **** 	{
  94:clock.c       **** 		lcd_color(LCD_WHITE);
 2356               	.LM225:
 2357 0bd4 8FEF      		ldi r24,lo8(-1)
 2358 0bd6 9FEF      		ldi r25,lo8(-1)
 2359 0bd8 9093 0000 		sts _color+1,r25
 2360 0bdc 8093 0000 		sts _color,r24
  95:clock.c       **** 		lcd_char(5, 100, _response[0]);
 2362               	.LM226:
 2363 0be0 64E6      		ldi r22,lo8(100)
 2364 0be2 70E0      		ldi r23,0
 2365 0be4 85E0      		ldi r24,lo8(5)
 2366 0be6 90E0      		ldi r25,0
 2367 0be8 0E94 0000 		call lcd_char
  96:clock.c       **** 		_response[0] = i;
 2369               	.LM227:
 2370 0bec 1093 0000 		sts _response,r17
  97:clock.c       **** 		lcd_color(LCD_BLACK);
 2372               	.LM228:
 2373 0bf0 1092 0000 		sts _color+1,__zero_reg__
 2374 0bf4 1092 0000 		sts _color,__zero_reg__
  98:clock.c       **** 		lcd_char(5, 100, _response[0]);
 2376               	.LM229:
 2377 0bf8 412F      		mov r20,r17
 2378 0bfa 64E6      		ldi r22,lo8(100)
 2379 0bfc 70E0      		ldi r23,0
 2380 0bfe 85E0      		ldi r24,lo8(5)
 2381 0c00 90E0      		ldi r25,0
 2382 0c02 0E94 0000 		call lcd_char
 2383               	.L108:
  99:clock.c       **** 	}
 100:clock.c       **** 
 101:clock.c       **** 	i = '0' + ((count_up / 1000) % 10);
 2385               	.LM230:
 2386 0c06 CE01      		movw r24,r28
 2387 0c08 68EE      		ldi r22,lo8(-24)
 2388 0c0a 73E0      		ldi r23,lo8(3)
 2389 0c0c 0E94 0000 		call __udivmodhi4
 2390 0c10 CB01      		movw r24,r22
 2392               	.LM231:
 2393 0c12 6AE0      		ldi r22,lo8(10)
 2394 0c14 70E0      		ldi r23,0
 2395 0c16 0E94 0000 		call __udivmodhi4
 2397               	.LM232:
 2398 0c1a 10E3      		ldi r17,lo8(48)
 2399 0c1c 180F      		add r17,r24
 102:clock.c       **** 	if(i != _response[1])
 2401               	.LM233:
 2402 0c1e 4091 0000 		lds r20,_response+1
 2404               	.LM234:
 2405 0c22 4117      		cp r20,r17
 2406 0c24 01F0      		breq .L109
 103:clock.c       **** 	{
 104:clock.c       **** 		lcd_color(LCD_WHITE);
 2408               	.LM235:
 2409 0c26 8FEF      		ldi r24,lo8(-1)
 2410 0c28 9FEF      		ldi r25,lo8(-1)
 2411 0c2a 9093 0000 		sts _color+1,r25
 2412 0c2e 8093 0000 		sts _color,r24
 105:clock.c       **** 		lcd_char(15, 100, _response[1]);
 2414               	.LM236:
 2415 0c32 64E6      		ldi r22,lo8(100)
 2416 0c34 70E0      		ldi r23,0
 2417 0c36 8FE0      		ldi r24,lo8(15)
 2418 0c38 90E0      		ldi r25,0
 2419 0c3a 0E94 0000 		call lcd_char
 106:clock.c       **** 		_response[1] = i;
 2421               	.LM237:
 2422 0c3e 1093 0000 		sts _response+1,r17
 107:clock.c       **** 		lcd_color(LCD_BLACK);
 2424               	.LM238:
 2425 0c42 1092 0000 		sts _color+1,__zero_reg__
 2426 0c46 1092 0000 		sts _color,__zero_reg__
 108:clock.c       **** 		lcd_char(15, 100, _response[1]);
 2428               	.LM239:
 2429 0c4a 412F      		mov r20,r17
 2430 0c4c 64E6      		ldi r22,lo8(100)
 2431 0c4e 70E0      		ldi r23,0
 2432 0c50 8FE0      		ldi r24,lo8(15)
 2433 0c52 90E0      		ldi r25,0
 2434 0c54 0E94 0000 		call lcd_char
 2435               	.L109:
 109:clock.c       **** 	}
 110:clock.c       **** 
 111:clock.c       **** 	i = '0' + ((count_up / 100) % 10);
 2437               	.LM240:
 2438 0c58 CE01      		movw r24,r28
 2439 0c5a 64E6      		ldi r22,lo8(100)
 2440 0c5c 70E0      		ldi r23,0
 2441 0c5e 0E94 0000 		call __udivmodhi4
 2442 0c62 CB01      		movw r24,r22
 2444               	.LM241:
 2445 0c64 6AE0      		ldi r22,lo8(10)
 2446 0c66 70E0      		ldi r23,0
 2447 0c68 0E94 0000 		call __udivmodhi4
 2449               	.LM242:
 2450 0c6c 10E3      		ldi r17,lo8(48)
 2451 0c6e 180F      		add r17,r24
 112:clock.c       **** 	if(i != _response[2])
 2453               	.LM243:
 2454 0c70 4091 0000 		lds r20,_response+2
 2456               	.LM244:
 2457 0c74 4117      		cp r20,r17
 2458 0c76 01F0      		breq .L110
 113:clock.c       **** 	{
 114:clock.c       **** 		lcd_color(LCD_WHITE);
 2460               	.LM245:
 2461 0c78 8FEF      		ldi r24,lo8(-1)
 2462 0c7a 9FEF      		ldi r25,lo8(-1)
 2463 0c7c 9093 0000 		sts _color+1,r25
 2464 0c80 8093 0000 		sts _color,r24
 115:clock.c       **** 		lcd_char(25, 100, _response[2]);
 2466               	.LM246:
 2467 0c84 64E6      		ldi r22,lo8(100)
 2468 0c86 70E0      		ldi r23,0
 2469 0c88 89E1      		ldi r24,lo8(25)
 2470 0c8a 90E0      		ldi r25,0
 2471 0c8c 0E94 0000 		call lcd_char
 116:clock.c       **** 		_response[2] = i;
 2473               	.LM247:
 2474 0c90 1093 0000 		sts _response+2,r17
 117:clock.c       **** 		lcd_color(LCD_BLACK);
 2476               	.LM248:
 2477 0c94 1092 0000 		sts _color+1,__zero_reg__
 2478 0c98 1092 0000 		sts _color,__zero_reg__
 118:clock.c       **** 		lcd_char(25, 100, _response[2]);
 2480               	.LM249:
 2481 0c9c 412F      		mov r20,r17
 2482 0c9e 64E6      		ldi r22,lo8(100)
 2483 0ca0 70E0      		ldi r23,0
 2484 0ca2 89E1      		ldi r24,lo8(25)
 2485 0ca4 90E0      		ldi r25,0
 2486 0ca6 0E94 0000 		call lcd_char
 2487               	.L110:
 119:clock.c       **** 	}
 120:clock.c       **** 
 121:clock.c       **** 	i = '0' + ((count_up / 10) % 10);
 2489               	.LM250:
 2490 0caa 2AE0      		ldi r18,lo8(10)
 2491 0cac 30E0      		ldi r19,0
 2492 0cae CE01      		movw r24,r28
 2493 0cb0 B901      		movw r22,r18
 2494 0cb2 0E94 0000 		call __udivmodhi4
 2495 0cb6 CB01      		movw r24,r22
 2497               	.LM251:
 2498 0cb8 B901      		movw r22,r18
 2499 0cba 0E94 0000 		call __udivmodhi4
 2501               	.LM252:
 2502 0cbe 10E3      		ldi r17,lo8(48)
 2503 0cc0 180F      		add r17,r24
 122:clock.c       **** 	if(i != _response[3])
 2505               	.LM253:
 2506 0cc2 4091 0000 		lds r20,_response+3
 2508               	.LM254:
 2509 0cc6 4117      		cp r20,r17
 2510 0cc8 01F0      		breq .L111
 123:clock.c       **** 	{
 124:clock.c       **** 		lcd_color(LCD_WHITE);
 2512               	.LM255:
 2513 0cca 8FEF      		ldi r24,lo8(-1)
 2514 0ccc 9FEF      		ldi r25,lo8(-1)
 2515 0cce 9093 0000 		sts _color+1,r25
 2516 0cd2 8093 0000 		sts _color,r24
 125:clock.c       **** 		lcd_char(35, 100, _response[3]);
 2518               	.LM256:
 2519 0cd6 64E6      		ldi r22,lo8(100)
 2520 0cd8 70E0      		ldi r23,0
 2521 0cda 83E2      		ldi r24,lo8(35)
 2522 0cdc 90E0      		ldi r25,0
 2523 0cde 0E94 0000 		call lcd_char
 126:clock.c       **** 		_response[3] = i;
 2525               	.LM257:
 2526 0ce2 1093 0000 		sts _response+3,r17
 127:clock.c       **** 		lcd_color(LCD_BLACK);
 2528               	.LM258:
 2529 0ce6 1092 0000 		sts _color+1,__zero_reg__
 2530 0cea 1092 0000 		sts _color,__zero_reg__
 128:clock.c       **** 		lcd_char(35, 100, _response[3]);
 2532               	.LM259:
 2533 0cee 412F      		mov r20,r17
 2534 0cf0 64E6      		ldi r22,lo8(100)
 2535 0cf2 70E0      		ldi r23,0
 2536 0cf4 83E2      		ldi r24,lo8(35)
 2537 0cf6 90E0      		ldi r25,0
 2538 0cf8 0E94 0000 		call lcd_char
 2539               	.L111:
 129:clock.c       **** 	}
 130:clock.c       **** 
 131:clock.c       **** 	i = '0' + (count_up % 10);
 2541               	.LM260:
 2542 0cfc CE01      		movw r24,r28
 2543 0cfe 6AE0      		ldi r22,lo8(10)
 2544 0d00 70E0      		ldi r23,0
 2545 0d02 0E94 0000 		call __udivmodhi4
 2547               	.LM261:
 2548 0d06 C0E3      		ldi r28,lo8(48)
 2549 0d08 C80F      		add r28,r24
 132:clock.c       **** 	if(i != _response[4])
 2551               	.LM262:
 2552 0d0a 4091 0000 		lds r20,_response+4
 2554               	.LM263:
 2555 0d0e 4C17      		cp r20,r28
 2556 0d10 01F0      		breq .L107
 133:clock.c       **** 	{
 134:clock.c       **** 		lcd_color(LCD_WHITE);
 2558               	.LM264:
 2559 0d12 8FEF      		ldi r24,lo8(-1)
 2560 0d14 9FEF      		ldi r25,lo8(-1)
 2561 0d16 9093 0000 		sts _color+1,r25
 2562 0d1a 8093 0000 		sts _color,r24
 135:clock.c       **** 		lcd_char(45, 100, _response[4]);
 2564               	.LM265:
 2565 0d1e 64E6      		ldi r22,lo8(100)
 2566 0d20 70E0      		ldi r23,0
 2567 0d22 8DE2      		ldi r24,lo8(45)
 2568 0d24 90E0      		ldi r25,0
 2569 0d26 0E94 0000 		call lcd_char
 136:clock.c       **** 		_response[4] = i;
 2571               	.LM266:
 2572 0d2a C093 0000 		sts _response+4,r28
 137:clock.c       **** 		lcd_color(LCD_BLACK);
 2574               	.LM267:
 2575 0d2e 1092 0000 		sts _color+1,__zero_reg__
 2576 0d32 1092 0000 		sts _color,__zero_reg__
 138:clock.c       **** 		lcd_char(45, 100, _response[4]);
 2578               	.LM268:
 2579 0d36 4C2F      		mov r20,r28
 2580 0d38 64E6      		ldi r22,lo8(100)
 2581 0d3a 70E0      		ldi r23,0
 2582 0d3c 8DE2      		ldi r24,lo8(45)
 2583 0d3e 90E0      		ldi r25,0
 2584               	/* epilogue start */
 139:clock.c       **** 	}
 140:clock.c       **** }
 2586               	.LM269:
 2587 0d40 DF91      		pop r29
 2588 0d42 CF91      		pop r28
 2589 0d44 1F91      		pop r17
 138:clock.c       **** 		lcd_char(45, 100, _response[4]);
 2591               	.LM270:
 2592 0d46 0C94 0000 		jmp lcd_char
 2593               	.L107:
 2594               	/* epilogue start */
 2596               	.LM271:
 2597 0d4a DF91      		pop r29
 2598 0d4c CF91      		pop r28
 2599 0d4e 1F91      		pop r17
 2600 0d50 0895      		ret
 2602               	.Lscope16:
 2608               	lcd_string_P.isra.0:
 2610               	.Ltext10:
 169:graphics.c    **** {
 2612               	.LM272:
 2613               	.LFBB17:
 2614 0d52 EF92      		push r14
 2615 0d54 FF92      		push r15
 2616 0d56 0F93      		push r16
 2617 0d58 1F93      		push r17
 2618 0d5a CF93      		push r28
 2619 0d5c DF93      		push r29
 2620               	/* prologue: function */
 2621               	/* frame size = 0 */
 2622               	/* stack size = 6 */
 2623               	.L__stack_usage = 6
 2624 0d5e 8C01      		movw r16,r24
 2625 0d60 F62E      		mov r15,r22
 2626 0d62 E72E      		mov r14,r23
 2627 0d64 EA01      		movw r28,r20
 2628               	.L114:
 2629               	.LBB84:
 172:graphics.c    **** 	{
 2631               	.LM273:
 2632 0d66 FE01      		movw r30,r28
 2633               	/* #APP */
 2634               	 ;  172 "graphics.c" 1
 2635 0d68 4491      		lpm r20, Z
 2636               		
 2637               	 ;  0 "" 2
 2638               	/* #NOAPP */
 2639               	.LBE84:
 172:graphics.c    **** 	{
 2641               	.LM274:
 2642 0d6a 4111      		cpse r20,__zero_reg__
 2643 0d6c 00C0      		rjmp .L115
 2644               	/* epilogue start */
 178:graphics.c    **** 
 2646               	.LM275:
 2647 0d6e DF91      		pop r29
 2648 0d70 CF91      		pop r28
 2649 0d72 1F91      		pop r17
 2650 0d74 0F91      		pop r16
 2651 0d76 FF90      		pop r15
 2652 0d78 EF90      		pop r14
 2653 0d7a 0895      		ret
 2654               	.L115:
 174:graphics.c    **** 	}
 2656               	.LM276:
 2657 0d7c 6F2D      		mov r22,r15
 2658 0d7e 7E2D      		mov r23,r14
 2659 0d80 C801      		movw r24,r16
 2660 0d82 0E94 0000 		call lcd_char
 174:graphics.c    **** 	}
 2662               	.LM277:
 2663 0d86 080F      		add r16,r24
 2664 0d88 111D      		adc r17,__zero_reg__
 172:graphics.c    **** 	{
 2666               	.LM278:
 2667 0d8a 2196      		adiw r28,1
 2668 0d8c 00C0      		rjmp .L114
 2670               	.Lscope17:
 2675               	print_error:
 2677               	.Ltext11:
 155:table.c       **** 	const char *s = error_syntax;
 2679               	.LM279:
 2680               	.LFBB18:
 2681 0d8e CF93      		push r28
 2682 0d90 DF93      		push r29
 2683               	/* prologue: function */
 2684               	/* frame size = 0 */
 2685               	/* stack size = 2 */
 2686               	.L__stack_usage = 2
 2687 0d92 8250      		subi r24,lo8(-(-2))
 155:table.c       **** 	const char *s = error_syntax;
 2689               	.LM280:
 2690 0d94 C0E0      		ldi r28,lo8(error_syntax)
 2691 0d96 D0E0      		ldi r29,hi8(error_syntax)
 2692 0d98 8330      		cpi r24,lo8(3)
 2693 0d9a 00F4      		brsh .L117
 2694 0d9c E82F      		mov r30,r24
 2695 0d9e F0E0      		ldi r31,0
 2696 0da0 EE0F      		lsl r30
 2697 0da2 FF1F      		rol r31
 2698 0da4 E050      		subi r30,lo8(-(CSWTCH.225))
 2699 0da6 F040      		sbci r31,hi8(-(CSWTCH.225))
 2700 0da8 C081      		ld r28,Z
 2701 0daa D181      		ldd r29,Z+1
 2702               	.L117:
 172:table.c       **** 	lcd_rect(50, 130, 120, 11);
 2704               	.LM281:
 2705 0dac 8FEF      		ldi r24,lo8(-1)
 2706 0dae 9FEF      		ldi r25,lo8(-1)
 2707 0db0 9093 0000 		sts _color+1,r25
 2708 0db4 8093 0000 		sts _color,r24
 173:table.c       **** 	lcd_color(LCD_BLACK);
 2710               	.LM282:
 2711 0db8 2BE0      		ldi r18,lo8(11)
 2712 0dba 30E0      		ldi r19,0
 2713 0dbc 48E7      		ldi r20,lo8(120)
 2714 0dbe 50E0      		ldi r21,0
 2715 0dc0 62E8      		ldi r22,lo8(-126)
 2716 0dc2 70E0      		ldi r23,0
 2717 0dc4 82E3      		ldi r24,lo8(50)
 2718 0dc6 90E0      		ldi r25,0
 2719 0dc8 0E94 0000 		call lcd_rect
 174:table.c       **** 	lcd_string_P(50, 130, s);
 2721               	.LM283:
 2722 0dcc 1092 0000 		sts _color+1,__zero_reg__
 2723 0dd0 1092 0000 		sts _color,__zero_reg__
 175:table.c       **** }
 2725               	.LM284:
 2726 0dd4 AE01      		movw r20,r28
 2727 0dd6 62E8      		ldi r22,lo8(-126)
 2728 0dd8 70E0      		ldi r23,0
 2729 0dda 82E3      		ldi r24,lo8(50)
 2730 0ddc 90E0      		ldi r25,0
 2731               	/* epilogue start */
 176:table.c       **** 
 2733               	.LM285:
 2734 0dde DF91      		pop r29
 2735 0de0 CF91      		pop r28
 175:table.c       **** }
 2737               	.LM286:
 2738 0de2 0C94 0000 		jmp lcd_string_P.isra.0
 2743               	.Lscope18:
 2749               	label_render:
 2751               	.Ltext12:
   1:form.c        **** #define ELEMENT_TYPE_LABEL  0
   2:form.c        **** #define ELEMENT_TYPE_BUTTON 1
   3:form.c        **** #define ELEMENT_TYPE_INPUT  2
   4:form.c        **** 
   5:form.c        **** #define FLAG_TEXT_PROGMEM   1
   6:form.c        **** 
   7:form.c        **** typedef struct LABEL
   8:form.c        **** {
   9:form.c        **** 	uint8_t Flags;
  10:form.c        **** 	int16_t X, Y;
  11:form.c        **** 	union
  12:form.c        **** 	{
  13:form.c        **** 		char *RAM;
  14:form.c        **** 		const char *Flash;
  15:form.c        **** 	} Text;
  16:form.c        **** } Label;
  17:form.c        **** 
  18:form.c        **** typedef struct BUTTON
  19:form.c        **** {
  20:form.c        **** 	uint8_t Flags;
  21:form.c        **** 	int16_t X, Y, W, H;
  22:form.c        **** 	union
  23:form.c        **** 	{
  24:form.c        **** 		char *RAM;
  25:form.c        **** 		const char *Flash;
  26:form.c        **** 	} Text;
  27:form.c        **** 	void (*Click)(void);
  28:form.c        **** } Button;
  29:form.c        **** 
  30:form.c        **** typedef struct INPUT
  31:form.c        **** {
  32:form.c        **** 	int16_t X, Y, W;
  33:form.c        **** 	uint8_t Flags, Position, Length, Size;
  34:form.c        **** 	char *Text;
  35:form.c        **** } Input;
  36:form.c        **** 
  37:form.c        **** typedef struct ELEMENT
  38:form.c        **** {
  39:form.c        **** 	uint8_t Type;
  40:form.c        **** 	union
  41:form.c        **** 	{
  42:form.c        **** 		Label L;
  43:form.c        **** 		Input I;
  44:form.c        **** 		Button B;
  45:form.c        **** 	} E;
  46:form.c        **** } Element;
  47:form.c        **** 
  48:form.c        **** typedef struct FORM
  49:form.c        **** {
  50:form.c        **** 	uint8_t Flags;
  51:form.c        **** 	union
  52:form.c        **** 	{
  53:form.c        **** 		char *RAM;
  54:form.c        **** 		const char *Flash;
  55:form.c        **** 	} Title;
  56:form.c        **** 	Element *Elements;
  57:form.c        **** 	int16_t Count;
  58:form.c        **** 	void (*OnKey)(uint8_t, uint8_t);
  59:form.c        **** } Form;
  60:form.c        **** 
  61:form.c        **** static Form *current_form;
  62:form.c        **** static int8_t current_element;
  63:form.c        **** 
  64:form.c        **** static void form_open(Form *form);
  65:form.c        **** static void form_render(Form *f);
  66:form.c        **** static void element_render_sel(Element *e, uint8_t sel);
  67:form.c        **** static void element_render(Element *e);
  68:form.c        **** static void label_render(Label *l);
  69:form.c        **** static void button_render(Button *b, uint8_t sel);
  70:form.c        **** static void input_render(Input *i, uint8_t sel);
  71:form.c        **** static void form_event_button(uint8_t button, uint8_t action);
  72:form.c        **** static void form_event_key(uint8_t key, uint8_t ascii);
  73:form.c        **** static void input_grow(Input *i, uint8_t n);
  74:form.c        **** static void input_shrink(Input *i, uint8_t n);
  75:form.c        **** 
  76:form.c        **** static void element_first(void)
  77:form.c        **** {
  78:form.c        **** 	int8_t i;
  79:form.c        **** 	for(i = 0; i < current_form->Count; ++i)
  80:form.c        **** 	{
  81:form.c        **** 		if(current_form->Elements[i].Type == ELEMENT_TYPE_BUTTON ||
  82:form.c        **** 			current_form->Elements[i].Type == ELEMENT_TYPE_INPUT)
  83:form.c        **** 		{
  84:form.c        **** 			current_element = i;
  85:form.c        **** 			break;
  86:form.c        **** 		}
  87:form.c        **** 	}
  88:form.c        **** }
  89:form.c        **** 
  90:form.c        **** static void element_next(void)
  91:form.c        **** {
  92:form.c        **** 	int8_t i;
  93:form.c        **** 	for(i = current_element + 1; i < current_form->Count; ++i)
  94:form.c        **** 	{
  95:form.c        **** 		if(current_form->Elements[i].Type == ELEMENT_TYPE_BUTTON)
  96:form.c        **** 		{
  97:form.c        **** 			element_render_sel(&current_form->Elements[current_element], 0);
  98:form.c        **** 			element_render_sel(&current_form->Elements[i], 1);
  99:form.c        **** 			current_element = i;
 100:form.c        **** 			break;
 101:form.c        **** 		}
 102:form.c        **** 
 103:form.c        **** 		if(current_form->Elements[i].Type == ELEMENT_TYPE_INPUT)
 104:form.c        **** 		{
 105:form.c        **** 			element_render_sel(&current_form->Elements[current_element], 0);
 106:form.c        **** 			element_render_sel(&current_form->Elements[i], 1);
 107:form.c        **** 			current_element = i;
 108:form.c        **** 			break;
 109:form.c        **** 		}
 110:form.c        **** 	}
 111:form.c        **** }
 112:form.c        **** 
 113:form.c        **** static void element_prev(void)
 114:form.c        **** {
 115:form.c        **** 	int8_t i;
 116:form.c        **** 	for(i = current_element - 1; i >= 0; --i)
 117:form.c        **** 	{
 118:form.c        **** 		if(current_form->Elements[i].Type == ELEMENT_TYPE_BUTTON)
 119:form.c        **** 		{
 120:form.c        **** 			element_render_sel(&current_form->Elements[current_element], 0);
 121:form.c        **** 			element_render_sel(&current_form->Elements[i], 1);
 122:form.c        **** 			current_element = i;
 123:form.c        **** 			break;
 124:form.c        **** 		}
 125:form.c        **** 
 126:form.c        **** 		if(current_form->Elements[i].Type == ELEMENT_TYPE_INPUT)
 127:form.c        **** 		{
 128:form.c        **** 			element_render_sel(&current_form->Elements[current_element], 0);
 129:form.c        **** 			element_render_sel(&current_form->Elements[i], 1);
 130:form.c        **** 			current_element = i;
 131:form.c        **** 			break;
 132:form.c        **** 		}
 133:form.c        **** 	}
 134:form.c        **** }
 135:form.c        **** 
 136:form.c        **** static void form_open(Form *form)
 137:form.c        **** {
 138:form.c        **** 	current_form = form;
 139:form.c        **** 	current_element = -1;
 140:form.c        **** 	element_first();
 141:form.c        **** 	form_render(form);
 142:form.c        **** }
 143:form.c        **** 
 144:form.c        **** static void form_render(Form *f)
 145:form.c        **** {
 146:form.c        **** 	uint8_t i;
 147:form.c        **** 
 148:form.c        **** 	/* Title Bar */
 149:form.c        **** 	lcd_color(LCD_BLUE);
 150:form.c        **** 	lcd_rect(0, 0, LCD_WIDTH, 20);
 151:form.c        **** 
 152:form.c        **** 	/* Background */
 153:form.c        **** 	lcd_color(LCD_WHITE);
 154:form.c        **** 	lcd_rect(0, 20, LCD_WIDTH, 220);
 155:form.c        **** 
 156:form.c        **** 	/* Title */
 157:form.c        **** 	if(f->Flags & FLAG_TEXT_PROGMEM)
 158:form.c        **** 	{
 159:form.c        **** 		lcd_string_P(4, 4, f->Title.Flash);
 160:form.c        **** 	}
 161:form.c        **** 	else
 162:form.c        **** 	{
 163:form.c        **** 		lcd_string(4, 4, f->Title.RAM);
 164:form.c        **** 	}
 165:form.c        **** 
 166:form.c        **** 	for(i = 0; i < f->Count; ++i)
 167:form.c        **** 	{
 168:form.c        **** 		element_render(f->Elements + i);
 169:form.c        **** 	}
 170:form.c        **** }
 171:form.c        **** 
 172:form.c        **** static void element_render_sel(Element *e, uint8_t sel)
 173:form.c        **** {
 174:form.c        **** 	switch(e->Type)
 175:form.c        **** 	{
 176:form.c        **** 		case ELEMENT_TYPE_LABEL:
 177:form.c        **** 			label_render(&e->E.L);
 178:form.c        **** 			break;
 179:form.c        **** 
 180:form.c        **** 		case ELEMENT_TYPE_BUTTON:
 181:form.c        **** 			button_render(&e->E.B, sel);
 182:form.c        **** 			break;
 183:form.c        **** 
 184:form.c        **** 		case ELEMENT_TYPE_INPUT:
 185:form.c        **** 			input_render(&e->E.I, sel);
 186:form.c        **** 			break;
 187:form.c        **** 	}
 188:form.c        **** }
 189:form.c        **** 
 190:form.c        **** static void element_render(Element *e)
 191:form.c        **** {
 192:form.c        **** 	uint8_t sel = ((current_element >= 0) && &current_form->Elements[current_element] == e);
 193:form.c        **** 	switch(e->Type)
 194:form.c        **** 	{
 195:form.c        **** 		case ELEMENT_TYPE_LABEL:
 196:form.c        **** 			label_render(&e->E.L);
 197:form.c        **** 			break;
 198:form.c        **** 
 199:form.c        **** 		case ELEMENT_TYPE_BUTTON:
 200:form.c        **** 			button_render(&e->E.B, sel);
 201:form.c        **** 			break;
 202:form.c        **** 
 203:form.c        **** 		case ELEMENT_TYPE_INPUT:
 204:form.c        **** 			input_render(&e->E.I, sel);
 205:form.c        **** 			break;
 206:form.c        **** 	}
 207:form.c        **** }
 208:form.c        **** 
 209:form.c        **** static void label_render(Label *l)
 210:form.c        **** {
 2753               	.LM287:
 2754               	.LFBB19:
 2755               	/* prologue: function */
 2756               	/* frame size = 0 */
 2757               	/* stack size = 0 */
 2758               	.L__stack_usage = 0
 2759 0de6 FC01      		movw r30,r24
 211:form.c        **** 	lcd_color(LCD_BLACK);
 2761               	.LM288:
 2762 0de8 1092 0000 		sts _color+1,__zero_reg__
 2763 0dec 1092 0000 		sts _color,__zero_reg__
 2764               	.LBB87:
 2765               	.LBB88:
 212:form.c        **** 	if(l->Flags & FLAG_TEXT_PROGMEM)
 213:form.c        **** 	{
 214:form.c        **** 		lcd_string_P(l->X, 20 + l->Y, l->Text.Flash);
 2767               	.LM289:
 2768 0df0 4581      		ldd r20,Z+5
 2769 0df2 5681      		ldd r21,Z+6
 2771               	.LM290:
 2772 0df4 6381      		ldd r22,Z+3
 2773 0df6 7481      		ldd r23,Z+4
 2774 0df8 6C5E      		subi r22,-20
 2775 0dfa 7F4F      		sbci r23,-1
 2777               	.LM291:
 2778 0dfc 8181      		ldd r24,Z+1
 2779 0dfe 9281      		ldd r25,Z+2
 2780               	.LBE88:
 2781               	.LBE87:
 212:form.c        **** 	if(l->Flags & FLAG_TEXT_PROGMEM)
 2783               	.LM292:
 2784 0e00 2081      		ld r18,Z
 2785 0e02 20FD      		sbrc r18,0
 2786               	.LBB90:
 2787               	.LBB89:
 2789               	.LM293:
 2790 0e04 0C94 0000 		jmp lcd_string_P.isra.0
 2791               	.L120:
 2792               	.LBE89:
 2793               	.LBE90:
 215:form.c        **** 	}
 216:form.c        **** 	else
 217:form.c        **** 	{
 218:form.c        **** 		lcd_string(l->X, 20 + l->Y, l->Text.RAM);
 2795               	.LM294:
 2796 0e08 0C94 0000 		jmp lcd_string
 2798               	.Lscope19:
 2800               	.global	__floatsisf
 2805               	calc_prepare:
 2807               	.Ltext13:
  97:calc.c        **** 	uint8_t c, cur_type, isop, top_stack, top_num;
 2809               	.LM295:
 2810               	.LFBB20:
 2811 0e0c 2F92      		push r2
 2812 0e0e 3F92      		push r3
 2813 0e10 4F92      		push r4
 2814 0e12 5F92      		push r5
 2815 0e14 6F92      		push r6
 2816 0e16 7F92      		push r7
 2817 0e18 8F92      		push r8
 2818 0e1a 9F92      		push r9
 2819 0e1c AF92      		push r10
 2820 0e1e BF92      		push r11
 2821 0e20 CF92      		push r12
 2822 0e22 DF92      		push r13
 2823 0e24 EF92      		push r14
 2824 0e26 FF92      		push r15
 2825 0e28 0F93      		push r16
 2826 0e2a 1F93      		push r17
 2827 0e2c CF93      		push r28
 2828 0e2e DF93      		push r29
 2829 0e30 00D0      		rcall .
 2830 0e32 00D0      		rcall .
 2831 0e34 00D0      		rcall .
 2832 0e36 0F92      		push __tmp_reg__
 2833 0e38 CDB7      		in r28,__SP_L__
 2834 0e3a DEB7      		in r29,__SP_H__
 2835               	/* prologue: function */
 2836               	/* frame size = 7 */
 2837               	/* stack size = 25 */
 2838               	.L__stack_usage = 25
 2839 0e3c 8C01      		movw r16,r24
 100:calc.c        **** 	top_num = 0;
 2841               	.LM296:
 2842 0e3e 1092 0000 		sts tok_cnt,__zero_reg__
 103:calc.c        **** 	{
 2844               	.LM297:
 2845 0e42 1E82      		std Y+6,__zero_reg__
 101:calc.c        **** 	top_stack = 0;
 2847               	.LM298:
 2848 0e44 512C      		mov r5,__zero_reg__
 102:calc.c        **** 	while((c = *term))
 2850               	.LM299:
 2851 0e46 1D82      		std Y+5,__zero_reg__
  99:calc.c        **** 	tok_cnt = 0;
 2853               	.LM300:
 2854 0e48 1982      		std Y+1,__zero_reg__
 2855               	.L122:
 103:calc.c        **** 	{
 2857               	.LM301:
 2858 0e4a D801      		movw r26,r16
 2859 0e4c EC90      		ld r14,X
 103:calc.c        **** 	{
 2861               	.LM302:
 2862 0e4e E110      		cpse r14,__zero_reg__
 2863 0e50 00C0      		rjmp .L162
 2864 0e52 BE81      		ldd r27,Y+6
 2865 0e54 EB2F      		mov r30,r27
 2866 0e56 F0E0      		ldi r31,0
 2867 0e58 E050      		subi r30,lo8(-(tok_type_list))
 2868 0e5a F040      		sbci r31,hi8(-(tok_type_list))
 2869 0e5c DD80      		ldd r13,Y+5
 2870               	.L163:
 343:calc.c        **** 	{
 2872               	.LM303:
 2873 0e5e D110      		cpse r13,__zero_reg__
 2874 0e60 00C0      		rjmp .L165
 2875 0e62 4E81      		ldd r20,Y+6
 2876 0e64 4093 0000 		sts tok_cnt,r20
 2877 0e68 00C0      		rjmp .L121
 2878               	.L162:
 108:calc.c        **** 		{
 2880               	.LM304:
 2881 0e6a 8E2D      		mov r24,r14
 2882 0e6c 90E0      		ldi r25,0
 2883 0e6e 0E94 0000 		call isdigit
 108:calc.c        **** 		{
 2885               	.LM305:
 2886 0e72 892B      		or r24,r25
 2887 0e74 01F4      		brne .+2
 2888 0e76 00C0      		rjmp .L123
 2889 0e78 7801      		movw r14,r16
 2890               	.LBB98:
 115:calc.c        **** 			{
 2892               	.LM306:
 2893 0e7a D12C      		mov r13,__zero_reg__
 2894               	.L124:
 2895 0e7c 5701      		movw r10,r14
 115:calc.c        **** 			{
 2897               	.LM307:
 2898 0e7e D701      		movw r26,r14
 2899 0e80 8C91      		ld r24,X
 2900 0e82 BFEF      		ldi r27,-1
 2901 0e84 EB1A      		sub r14,r27
 2902 0e86 FB0A      		sbc r15,r27
 115:calc.c        **** 			{
 2904               	.LM308:
 2905 0e88 8823      		tst r24
 2906 0e8a 01F0      		breq .L167
 117:calc.c        **** 				{
 2908               	.LM309:
 2909 0e8c 8E32      		cpi r24,lo8(46)
 2910 0e8e 01F4      		brne .L125
 119:calc.c        **** 					{
 2912               	.LM310:
 2913 0e90 21E0      		ldi r18,lo8(1)
 2914 0e92 D212      		cpse r13,r18
 2915 0e94 00C0      		rjmp .L166
 2916 0e96 3E81      		ldd r19,Y+6
 2917 0e98 3093 0000 		sts tok_cnt,r19
 2918               	.L121:
 2919               	.LBE98:
 355:calc.c        **** 
 2921               	.LM311:
 2922 0e9c 8D2D      		mov r24,r13
 2923               	/* epilogue start */
 2924 0e9e 2796      		adiw r28,7
 2925 0ea0 0FB6      		in __tmp_reg__,__SREG__
 2926 0ea2 F894      		cli
 2927 0ea4 DEBF      		out __SP_H__,r29
 2928 0ea6 0FBE      		out __SREG__,__tmp_reg__
 2929 0ea8 CDBF      		out __SP_L__,r28
 2930 0eaa DF91      		pop r29
 2931 0eac CF91      		pop r28
 2932 0eae 1F91      		pop r17
 2933 0eb0 0F91      		pop r16
 2934 0eb2 FF90      		pop r15
 2935 0eb4 EF90      		pop r14
 2936 0eb6 DF90      		pop r13
 2937 0eb8 CF90      		pop r12
 2938 0eba BF90      		pop r11
 2939 0ebc AF90      		pop r10
 2940 0ebe 9F90      		pop r9
 2941 0ec0 8F90      		pop r8
 2942 0ec2 7F90      		pop r7
 2943 0ec4 6F90      		pop r6
 2944 0ec6 5F90      		pop r5
 2945 0ec8 4F90      		pop r4
 2946 0eca 3F90      		pop r3
 2947 0ecc 2F90      		pop r2
 2948 0ece 0895      		ret
 2949               	.L125:
 2950               	.LBB99:
 126:calc.c        **** 				{
 2952               	.LM312:
 2953 0ed0 90E0      		ldi r25,0
 2954 0ed2 0E94 0000 		call isdigit
 126:calc.c        **** 				{
 2956               	.LM313:
 2957 0ed6 892B      		or r24,r25
 2958 0ed8 01F4      		brne .L124
 2959               	.L167:
 2960 0eda C12C      		mov r12,__zero_reg__
 2961 0edc D12C      		mov r13,__zero_reg__
 2962 0ede E12C      		mov r14,__zero_reg__
 2963 0ee0 F12C      		mov r15,__zero_reg__
 2964 0ee2 00C0      		rjmp .L131
 2965               	.L166:
 2966 0ee4 DD24      		clr r13
 2967 0ee6 D394      		inc r13
 2968 0ee8 00C0      		rjmp .L124
 2969               	.L132:
 137:calc.c        **** 				{
 2971               	.LM314:
 2972 0eea F801      		movw r30,r16
 2973 0eec 2191      		ld r18,Z+
 2974 0eee 8F01      		movw r16,r30
 2975 0ef0 2F83      		std Y+7,r18
 137:calc.c        **** 				{
 2977               	.LM315:
 2978 0ef2 2E32      		cpi r18,lo8(46)
 2979 0ef4 01F4      		brne .+2
 2980 0ef6 00C0      		rjmp .L168
 144:calc.c        **** 			}
 2982               	.LM316:
 2983 0ef8 20E0      		ldi r18,0
 2984 0efa 30E0      		ldi r19,0
 2985 0efc 40E2      		ldi r20,lo8(32)
 2986 0efe 51E4      		ldi r21,lo8(65)
 2987 0f00 C982      		std Y+1,r12
 2988 0f02 DA82      		std Y+2,r13
 2989 0f04 EB82      		std Y+3,r14
 2990 0f06 FC82      		std Y+4,r15
 2991 0f08 6981      		ldd r22,Y+1
 2992 0f0a 7A81      		ldd r23,Y+2
 2993 0f0c 8B81      		ldd r24,Y+3
 2994 0f0e 9C81      		ldd r25,Y+4
 2995 0f10 0E94 0000 		call __mulsf3
 2996 0f14 6B01      		movw r12,r22
 2997 0f16 7C01      		movw r14,r24
 144:calc.c        **** 			}
 2999               	.LM317:
 3000 0f18 9F81      		ldd r25,Y+7
 3001 0f1a 892F      		mov r24,r25
 3002 0f1c 90E0      		ldi r25,0
 3003 0f1e B0E0      		ldi r27,0
 3004 0f20 A0E0      		ldi r26,0
 3005 0f22 8983      		std Y+1,r24
 3006 0f24 9A83      		std Y+2,r25
 3007 0f26 AB83      		std Y+3,r26
 3008 0f28 BC83      		std Y+4,r27
 3009 0f2a BC01      		movw r22,r24
 3010 0f2c CD01      		movw r24,r26
 3011 0f2e 0E94 0000 		call __floatsisf
 3012 0f32 9B01      		movw r18,r22
 3013 0f34 AC01      		movw r20,r24
 3014 0f36 C982      		std Y+1,r12
 3015 0f38 DA82      		std Y+2,r13
 3016 0f3a EB82      		std Y+3,r14
 3017 0f3c FC82      		std Y+4,r15
 3018 0f3e 6981      		ldd r22,Y+1
 3019 0f40 7A81      		ldd r23,Y+2
 3020 0f42 8B81      		ldd r24,Y+3
 3021 0f44 9C81      		ldd r25,Y+4
 3022 0f46 0E94 0000 		call __addsf3
 144:calc.c        **** 			}
 3024               	.LM318:
 3025 0f4a 20E0      		ldi r18,0
 3026 0f4c 30E0      		ldi r19,0
 3027 0f4e 40E4      		ldi r20,lo8(64)
 3028 0f50 52E4      		ldi r21,lo8(66)
 3029 0f52 6983      		std Y+1,r22
 3030 0f54 7A83      		std Y+2,r23
 3031 0f56 8B83      		std Y+3,r24
 3032 0f58 9C83      		std Y+4,r25
 3033 0f5a 6981      		ldd r22,Y+1
 3034 0f5c 7A81      		ldd r23,Y+2
 3035 0f5e 8B81      		ldd r24,Y+3
 3036 0f60 9C81      		ldd r25,Y+4
 3037 0f62 0E94 0000 		call __subsf3
 3038 0f66 6B01      		movw r12,r22
 3039 0f68 7C01      		movw r14,r24
 3040               	.L131:
 135:calc.c        **** 			{
 3042               	.LM319:
 3043 0f6a 0A15      		cp r16,r10
 3044 0f6c 1B05      		cpc r17,r11
 3045 0f6e 00F4      		brsh .+2
 3046 0f70 00C0      		rjmp .L132
 3047 0f72 612C      		mov r6,__zero_reg__
 3048 0f74 712C      		mov r7,__zero_reg__
 3049 0f76 20E8      		ldi r18,lo8(-128)
 3050 0f78 822E      		mov r8,r18
 3051 0f7a AFE3      		ldi r26,lo8(63)
 3052 0f7c AF83      		std Y+7,r26
 3053               	.L133:
 154:calc.c        **** 			{
 3055               	.LM320:
 3056 0f7e 4E81      		ldd r20,Y+6
 3057 0f80 4F31      		cpi r20,lo8(31)
 3058 0f82 00F4      		brsh .+2
 3059 0f84 00C0      		rjmp .L135
 3060               	.L197:
 3061 0f86 4093 0000 		sts tok_cnt,r20
 3062 0f8a 00C0      		rjmp .L196
 3063               	.L134:
 150:calc.c        **** 				power *= 10.0;
 3065               	.LM321:
 3066 0f8c F801      		movw r30,r16
 3067 0f8e 8191      		ld r24,Z+
 3068 0f90 8F01      		movw r16,r30
 150:calc.c        **** 				power *= 10.0;
 3070               	.LM322:
 3071 0f92 282F      		mov r18,r24
 3072 0f94 30E0      		ldi r19,0
 3073 0f96 50E0      		ldi r21,0
 3074 0f98 40E0      		ldi r20,0
 3075 0f9a 2983      		std Y+1,r18
 3076 0f9c 3A83      		std Y+2,r19
 3077 0f9e 4B83      		std Y+3,r20
 3078 0fa0 5C83      		std Y+4,r21
 3079 0fa2 CA01      		movw r24,r20
 3080 0fa4 B901      		movw r22,r18
 3081 0fa6 0E94 0000 		call __floatsisf
 3082 0faa 1B01      		movw r2,r22
 3083 0fac 482E      		mov r4,r24
 3084 0fae 992E      		mov r9,r25
 150:calc.c        **** 				power *= 10.0;
 3086               	.LM323:
 3087 0fb0 20E0      		ldi r18,0
 3088 0fb2 30E0      		ldi r19,0
 3089 0fb4 40E2      		ldi r20,lo8(32)
 3090 0fb6 51E4      		ldi r21,lo8(65)
 3091 0fb8 C982      		std Y+1,r12
 3092 0fba DA82      		std Y+2,r13
 3093 0fbc EB82      		std Y+3,r14
 3094 0fbe FC82      		std Y+4,r15
 3095 0fc0 6981      		ldd r22,Y+1
 3096 0fc2 7A81      		ldd r23,Y+2
 3097 0fc4 8B81      		ldd r24,Y+3
 3098 0fc6 9C81      		ldd r25,Y+4
 3099 0fc8 0E94 0000 		call __mulsf3
 150:calc.c        **** 				power *= 10.0;
 3101               	.LM324:
 3102 0fcc 9B01      		movw r18,r22
 3103 0fce AC01      		movw r20,r24
 3104 0fd0 2982      		std Y+1,r2
 3105 0fd2 3A82      		std Y+2,r3
 3106 0fd4 4B82      		std Y+3,r4
 3107 0fd6 9C82      		std Y+4,r9
 3108 0fd8 6981      		ldd r22,Y+1
 3109 0fda 7A81      		ldd r23,Y+2
 3110 0fdc 8B81      		ldd r24,Y+3
 3111 0fde 9C81      		ldd r25,Y+4
 3112 0fe0 0E94 0000 		call __addsf3
 150:calc.c        **** 				power *= 10.0;
 3114               	.LM325:
 3115 0fe4 20E0      		ldi r18,0
 3116 0fe6 30E0      		ldi r19,0
 3117 0fe8 40E4      		ldi r20,lo8(64)
 3118 0fea 52E4      		ldi r21,lo8(66)
 3119 0fec 6983      		std Y+1,r22
 3120 0fee 7A83      		std Y+2,r23
 3121 0ff0 8B83      		std Y+3,r24
 3122 0ff2 9C83      		std Y+4,r25
 3123 0ff4 6981      		ldd r22,Y+1
 3124 0ff6 7A81      		ldd r23,Y+2
 3125 0ff8 8B81      		ldd r24,Y+3
 3126 0ffa 9C81      		ldd r25,Y+4
 3127 0ffc 0E94 0000 		call __subsf3
 3128 1000 6B01      		movw r12,r22
 3129 1002 7C01      		movw r14,r24
 151:calc.c        **** 			}
 3131               	.LM326:
 3132 1004 20E0      		ldi r18,0
 3133 1006 30E0      		ldi r19,0
 3134 1008 40E2      		ldi r20,lo8(32)
 3135 100a 51E4      		ldi r21,lo8(65)
 3136 100c 8F81      		ldd r24,Y+7
 3137 100e 6982      		std Y+1,r6
 3138 1010 7A82      		std Y+2,r7
 3139 1012 8B82      		std Y+3,r8
 3140 1014 8C83      		std Y+4,r24
 3141 1016 6981      		ldd r22,Y+1
 3142 1018 7A81      		ldd r23,Y+2
 3143 101a 8B81      		ldd r24,Y+3
 3144 101c 9C81      		ldd r25,Y+4
 3145 101e 0E94 0000 		call __mulsf3
 3146 1022 3B01      		movw r6,r22
 3147 1024 882E      		mov r8,r24
 3148 1026 9F83      		std Y+7,r25
 3149               	.L130:
 148:calc.c        **** 			{
 3151               	.LM327:
 3152 1028 0A15      		cp r16,r10
 3153 102a 1B05      		cpc r17,r11
 3154 102c 00F4      		brsh .+2
 3155 102e 00C0      		rjmp .L134
 3156 1030 00C0      		rjmp .L133
 3157               	.L168:
 3158 1032 612C      		mov r6,__zero_reg__
 3159 1034 712C      		mov r7,__zero_reg__
 3160 1036 90E8      		ldi r25,lo8(-128)
 3161 1038 892E      		mov r8,r25
 3162 103a 3FE3      		ldi r19,lo8(63)
 3163 103c 3F83      		std Y+7,r19
 3164 103e 00C0      		rjmp .L130
 3165               	.L135:
 159:calc.c        **** 			tok_num_list[top_num++] = n / power;
 3167               	.LM328:
 3168 1040 3E80      		ldd r3,Y+6
 3169 1042 3394      		inc r3
 3170 1044 5E81      		ldd r21,Y+6
 3171 1046 E52F      		mov r30,r21
 3172 1048 F0E0      		ldi r31,0
 159:calc.c        **** 			tok_num_list[top_num++] = n / power;
 3174               	.LM329:
 3175 104a E050      		subi r30,lo8(-(tok_type_list))
 3176 104c F040      		sbci r31,hi8(-(tok_type_list))
 3177 104e 81E0      		ldi r24,lo8(1)
 3178 1050 8083      		st Z,r24
 160:calc.c        **** 			isop = 0;
 3180               	.LM330:
 3181 1052 4424      		clr r4
 3182 1054 4394      		inc r4
 3183 1056 450C      		add r4,r5
 160:calc.c        **** 			isop = 0;
 3185               	.LM331:
 3186 1058 94E0      		ldi r25,lo8(4)
 3187 105a 599E      		mul r5,r25
 3188 105c 8001      		movw r16,r0
 3189 105e 1124      		clr __zero_reg__
 3190 1060 0050      		subi r16,lo8(-(tok_num_list))
 3191 1062 1040      		sbci r17,hi8(-(tok_num_list))
 160:calc.c        **** 			isop = 0;
 3193               	.LM332:
 3194 1064 8F81      		ldd r24,Y+7
 3195 1066 262D      		mov r18,r6
 3196 1068 372D      		mov r19,r7
 3197 106a 482D      		mov r20,r8
 3198 106c 582F      		mov r21,r24
 3199 106e C982      		std Y+1,r12
 3200 1070 DA82      		std Y+2,r13
 3201 1072 EB82      		std Y+3,r14
 3202 1074 FC82      		std Y+4,r15
 3203 1076 6981      		ldd r22,Y+1
 3204 1078 7A81      		ldd r23,Y+2
 3205 107a 8B81      		ldd r24,Y+3
 3206 107c 9C81      		ldd r25,Y+4
 3207 107e 0E94 0000 		call __divsf3
 3208 1082 D801      		movw r26,r16
 3209 1084 6D93      		st X+,r22
 3210 1086 7D93      		st X+,r23
 3211 1088 8D93      		st X+,r24
 3212 108a 9C93      		st X,r25
 3213 108c 1397      		sbiw r26,3
 159:calc.c        **** 			tok_num_list[top_num++] = n / power;
 3215               	.LM333:
 3216 108e 3E82      		std Y+6,r3
 160:calc.c        **** 			isop = 0;
 3218               	.LM334:
 3219 1090 542C      		mov r5,r4
 159:calc.c        **** 			tok_num_list[top_num++] = n / power;
 3221               	.LM335:
 3222 1092 B1E0      		ldi r27,lo8(1)
 3223 1094 B983      		std Y+1,r27
 3224               	.L136:
 3225 1096 8501      		movw r16,r10
 3226 1098 00C0      		rjmp .L122
 3227               	.L123:
 3228               	.LBE99:
 166:calc.c        **** 			{
 3230               	.LM336:
 3231 109a EEE5      		ldi r30,lo8(94)
 3232 109c EE16      		cp r14,r30
 3233 109e 01F4      		brne .+2
 3234 10a0 00C0      		rjmp .L169
 3235 10a2 EE15      		cp r30,r14
 3236 10a4 00F0      		brlo .L138
 3237 10a6 FBE2      		ldi r31,lo8(43)
 3238 10a8 EF16      		cp r14,r31
 3239 10aa 01F4      		brne .+2
 3240 10ac 00C0      		rjmp .L170
 3241 10ae FE15      		cp r31,r14
 3242 10b0 00F0      		brlo .L139
 3243 10b2 29E2      		ldi r18,lo8(41)
 3244 10b4 E216      		cp r14,r18
 3245 10b6 01F4      		brne .+2
 3246 10b8 00C0      		rjmp .L140
 3247 10ba 3AE2      		ldi r19,lo8(42)
 105:calc.c        **** 
 3249               	.LM337:
 3250 10bc 81E0      		ldi r24,lo8(1)
 254:calc.c        **** 				break;
 3252               	.LM338:
 3253 10be BFE0      		ldi r27,lo8(15)
 166:calc.c        **** 			{
 3255               	.LM339:
 3256 10c0 E316      		cp r14,r19
 3257 10c2 01F4      		brne .+2
 3258 10c4 00C0      		rjmp .L193
 3259 10c6 48E2      		ldi r20,lo8(40)
 3260 10c8 E416      		cp r14,r20
 3261 10ca 01F4      		brne .+2
 3262 10cc 00C0      		rjmp .L141
 3263               	.L192:
 105:calc.c        **** 
 3265               	.LM340:
 3266 10ce 81E0      		ldi r24,lo8(1)
 3267 10d0 00C0      		rjmp .L137
 3268               	.L139:
 166:calc.c        **** 			{
 3270               	.LM341:
 3271 10d2 5DE2      		ldi r21,lo8(45)
 3272 10d4 E516      		cp r14,r21
 3273 10d6 01F4      		brne .+2
 3274 10d8 00C0      		rjmp .L142
 3275 10da 8FE2      		ldi r24,lo8(47)
 3276 10dc E812      		cpse r14,r24
 3277 10de 00C0      		rjmp .L192
 105:calc.c        **** 
 3279               	.LM342:
 3280 10e0 81E0      		ldi r24,lo8(1)
 258:calc.c        **** 				break;
 3282               	.LM343:
 3283 10e2 90E1      		ldi r25,lo8(16)
 3284               	.L194:
 262:calc.c        **** 				break;
 3286               	.LM344:
 3287 10e4 9983      		std Y+1,r25
 3288 10e6 00C0      		rjmp .L137
 3289               	.L138:
 166:calc.c        **** 			{
 3291               	.LM345:
 3292 10e8 A3E7      		ldi r26,lo8(115)
 3293 10ea EA16      		cp r14,r26
 3294 10ec 01F4      		brne .+2
 3295 10ee 00C0      		rjmp .L173
 3296 10f0 AE15      		cp r26,r14
 3297 10f2 00F0      		brlo .L144
 3298 10f4 B3E6      		ldi r27,lo8(99)
 3299 10f6 EB16      		cp r14,r27
 3300 10f8 01F4      		brne .+2
 3301 10fa 00C0      		rjmp .L174
 3302 10fc ECE6      		ldi r30,lo8(108)
 3303 10fe EE16      		cp r14,r30
 3304 1100 01F4      		brne .+2
 3305 1102 00C0      		rjmp .L175
 3306 1104 F1E6      		ldi r31,lo8(97)
 3307 1106 EF12      		cpse r14,r31
 3308 1108 00C0      		rjmp .L192
 272:calc.c        **** 				{
 3310               	.LM346:
 3311 110a C801      		movw r24,r16
 3312 110c 0196      		adiw r24,1
 272:calc.c        **** 				{
 3314               	.LM347:
 3315 110e D801      		movw r26,r16
 3316 1110 1196      		adiw r26,1
 3317 1112 2C91      		ld r18,X
 272:calc.c        **** 				{
 3319               	.LM348:
 3320 1114 8C01      		movw r16,r24
 3321 1116 2337      		cpi r18,lo8(115)
 3322 1118 01F4      		brne .+2
 3323 111a 00C0      		rjmp .L182
 3324 111c 2437      		cpi r18,lo8(116)
 3325 111e 01F4      		brne .+2
 3326 1120 00C0      		rjmp .L183
 3327 1122 2336      		cpi r18,lo8(99)
 3328 1124 01F4      		brne .L143
 279:calc.c        **** 					break;
 3330               	.LM349:
 3331 1126 BBE0      		ldi r27,lo8(11)
 3332 1128 B983      		std Y+1,r27
 3333               	.L143:
 301:calc.c        **** 			}
 3335               	.LM350:
 3336 112a 0E5F      		subi r16,-2
 3337 112c 1F4F      		sbci r17,-1
 3338 112e 00C0      		rjmp .L192
 3339               	.L144:
 166:calc.c        **** 			{
 3341               	.LM351:
 3342 1130 24E7      		ldi r18,lo8(116)
 3343 1132 E216      		cp r14,r18
 3344 1134 01F4      		brne .+2
 3345 1136 00C0      		rjmp .L176
 3346 1138 38E7      		ldi r19,lo8(120)
 3347 113a E312      		cpse r14,r19
 3348 113c 00C0      		rjmp .L192
 190:calc.c        **** 				{
 3350               	.LM352:
 3351 113e BE81      		ldd r27,Y+6
 3352 1140 BF31      		cpi r27,lo8(31)
 3353 1142 00F0      		brlo .L149
 3354 1144 B093 0000 		sts tok_cnt,r27
 3355               	.L196:
 347:calc.c        **** 		}
 3357               	.LM353:
 3358 1148 83E0      		ldi r24,lo8(3)
 3359 114a D82E      		mov r13,r24
 3360 114c 00C0      		rjmp .L121
 3361               	.L140:
 3362 114e 4E81      		ldd r20,Y+6
 3363 1150 A42F      		mov r26,r20
 3364 1152 B0E0      		ldi r27,0
 3365 1154 A050      		subi r26,lo8(-(tok_type_list))
 3366 1156 B040      		sbci r27,hi8(-(tok_type_list))
 3367 1158 5D81      		ldd r21,Y+5
 3368 115a E52F      		mov r30,r21
 3369 115c F0E0      		ldi r31,0
 3370 115e E050      		subi r30,lo8(-(op_stack))
 3371 1160 F040      		sbci r31,hi8(-(op_stack))
 3372               	.L147:
 3373               	.LBB100:
 221:calc.c        **** 					{
 3375               	.LM354:
 3376 1162 2D81      		ldd r18,Y+5
 3377 1164 2111      		cpse r18,__zero_reg__
 3378 1166 00C0      		rjmp .L151
 3379 1168 3E81      		ldd r19,Y+6
 3380 116a 3093 0000 		sts tok_cnt,r19
 224:calc.c        **** 					}
 3382               	.LM355:
 3383 116e DD24      		clr r13
 3384 1170 D394      		inc r13
 3385 1172 00C0      		rjmp .L121
 3386               	.L142:
 3387               	.LBE100:
 3388 1174 8981      		ldd r24,Y+1
 3389 1176 8330      		cpi r24,lo8(3)
 3390 1178 01F4      		brne .+2
 3391 117a 00C0      		rjmp .L177
 3392 117c 00F4      		brsh .L148
 3393 117e 8823      		tst r24
 3394 1180 01F4      		brne .+2
 3395 1182 00C0      		rjmp .L178
 3396 1184 8330      		cpi r24,lo8(3)
 3397 1186 01F4      		brne .+2
 3398 1188 00C0      		rjmp .L192
 105:calc.c        **** 
 3400               	.LM356:
 3401 118a 81E0      		ldi r24,lo8(1)
 184:calc.c        **** 					break;
 3403               	.LM357:
 3404 118c 9EE0      		ldi r25,lo8(14)
 3405 118e 00C0      		rjmp .L194
 3406               	.L148:
 3407 1190 A981      		ldd r26,Y+1
 3408 1192 A430      		cpi r26,lo8(4)
 3409 1194 01F4      		brne .+2
 3410 1196 00C0      		rjmp .L180
 3411 1198 8A2F      		mov r24,r26
 3412 119a 8D50      		subi r24,lo8(-(-13))
 3413 119c 8530      		cpi r24,lo8(5)
 3414 119e 00F0      		brlo .+2
 3415 11a0 00C0      		rjmp .L192
 105:calc.c        **** 
 3417               	.LM358:
 3418 11a2 81E0      		ldi r24,lo8(1)
 178:calc.c        **** 					break;
 3420               	.LM359:
 3421 11a4 35E0      		ldi r19,lo8(5)
 3422 11a6 3983      		std Y+1,r19
 3423 11a8 00C0      		rjmp .L137
 3424               	.L149:
 195:calc.c        **** 					cur_type = TT_X;
 3426               	.LM360:
 3427 11aa 2E81      		ldd r18,Y+6
 3428 11ac E22F      		mov r30,r18
 3429 11ae F0E0      		ldi r31,0
 195:calc.c        **** 					cur_type = TT_X;
 3431               	.LM361:
 3432 11b0 E050      		subi r30,lo8(-(tok_type_list))
 3433 11b2 F040      		sbci r31,hi8(-(tok_type_list))
 3434 11b4 32E0      		ldi r19,lo8(2)
 3435 11b6 3083      		st Z,r19
 195:calc.c        **** 					cur_type = TT_X;
 3437               	.LM362:
 3438 11b8 2F5F      		subi r18,lo8(-(1))
 3439 11ba 2E83      		std Y+6,r18
 197:calc.c        **** 				break;
 3441               	.LM363:
 3442 11bc 80E0      		ldi r24,0
 196:calc.c        **** 				isop = 0;
 3444               	.LM364:
 3445 11be 42E0      		ldi r20,lo8(2)
 3446 11c0 4983      		std Y+1,r20
 3447               	.L137:
 304:calc.c        **** 		}
 3449               	.LM365:
 3450 11c2 5801      		movw r10,r16
 3451 11c4 4FEF      		ldi r20,-1
 3452 11c6 A41A      		sub r10,r20
 3453 11c8 B40A      		sbc r11,r20
 309:calc.c        **** 		{
 3455               	.LM366:
 3456 11ca 8823      		tst r24
 3457 11cc 01F4      		brne .+2
 3458 11ce 00C0      		rjmp .L136
 3459 11d0 E981      		ldd r30,Y+1
 3460 11d2 ED50      		subi r30,lo8(-(-13))
 3461 11d4 30E0      		ldi r19,0
 3462 11d6 E530      		cpi r30,lo8(5)
 3463 11d8 00F4      		brsh .L154
 3464 11da F0E0      		ldi r31,0
 3465 11dc E050      		subi r30,lo8(-(CSWTCH.189))
 3466 11de F040      		sbci r31,hi8(-(CSWTCH.189))
 3467 11e0 3081      		ld r19,Z
 3468               	.L154:
 3469 11e2 5E81      		ldd r21,Y+6
 3470 11e4 A52F      		mov r26,r21
 3471 11e6 B0E0      		ldi r27,0
 3472 11e8 A050      		subi r26,lo8(-(tok_type_list))
 3473 11ea B040      		sbci r27,hi8(-(tok_type_list))
 3474 11ec ED81      		ldd r30,Y+5
 3475 11ee 8E2F      		mov r24,r30
 3476 11f0 90E0      		ldi r25,0
 3477 11f2 8050      		subi r24,lo8(-(op_stack))
 3478 11f4 9040      		sbci r25,hi8(-(op_stack))
 3479               	.L155:
 3480               	.LBB101:
 315:calc.c        **** 			{
 3482               	.LM367:
 3483 11f6 ED81      		ldd r30,Y+5
 3484 11f8 E111      		cpse r30,__zero_reg__
 3485 11fa 00C0      		rjmp .L160
 3486               	.L161:
 338:calc.c        **** 		}
 3488               	.LM368:
 3489 11fc 3D81      		ldd r19,Y+5
 3490 11fe E32F      		mov r30,r19
 3491 1200 F0E0      		ldi r31,0
 338:calc.c        **** 		}
 3493               	.LM369:
 3494 1202 E050      		subi r30,lo8(-(op_stack))
 3495 1204 F040      		sbci r31,hi8(-(op_stack))
 3496 1206 4981      		ldd r20,Y+1
 3497 1208 4083      		st Z,r20
 338:calc.c        **** 		}
 3499               	.LM370:
 3500 120a 3F5F      		subi r19,lo8(-(1))
 3501 120c 3D83      		std Y+5,r19
 3502 120e 00C0      		rjmp .L136
 3503               	.L141:
 3504               	.LBE101:
 203:calc.c        **** 				{
 3506               	.LM371:
 3507 1210 5D81      		ldd r21,Y+5
 3508 1212 5F31      		cpi r21,lo8(31)
 3509 1214 00F0      		brlo .L150
 3510 1216 8E81      		ldd r24,Y+6
 3511 1218 8093 0000 		sts tok_cnt,r24
 3512 121c 00C0      		rjmp .L196
 3513               	.L150:
 208:calc.c        **** 				isop = 0;
 3515               	.LM372:
 3516 121e 9D81      		ldd r25,Y+5
 3517 1220 E92F      		mov r30,r25
 3518 1222 F0E0      		ldi r31,0
 208:calc.c        **** 				isop = 0;
 3520               	.LM373:
 3521 1224 E050      		subi r30,lo8(-(op_stack))
 3522 1226 F040      		sbci r31,hi8(-(op_stack))
 3523 1228 A3E0      		ldi r26,lo8(3)
 3524 122a A083      		st Z,r26
 208:calc.c        **** 				isop = 0;
 3526               	.LM374:
 3527 122c 9F5F      		subi r25,lo8(-(1))
 3528 122e 9D83      		std Y+5,r25
 209:calc.c        **** 				break;
 3530               	.LM375:
 3531 1230 80E0      		ldi r24,0
 208:calc.c        **** 				isop = 0;
 3533               	.LM376:
 3534 1232 B3E0      		ldi r27,lo8(3)
 3535               	.L193:
 254:calc.c        **** 				break;
 3537               	.LM377:
 3538 1234 B983      		std Y+1,r27
 3539 1236 00C0      		rjmp .L137
 3540               	.L151:
 3541               	.LBB102:
 227:calc.c        **** 					{
 3543               	.LM378:
 3544 1238 8291      		ld r24,-Z
 227:calc.c        **** 					{
 3546               	.LM379:
 3547 123a 8330      		cpi r24,lo8(3)
 3548 123c 01F4      		brne .L152
 241:calc.c        **** 				}
 3550               	.LM380:
 3551 123e 4D81      		ldd r20,Y+5
 3552 1240 4150      		subi r20,lo8(-(-1))
 3553 1242 4D83      		std Y+5,r20
 244:calc.c        **** 				break;
 3555               	.LM381:
 3556 1244 80E0      		ldi r24,0
 217:calc.c        **** 				i = 1;
 3558               	.LM382:
 3559 1246 54E0      		ldi r21,lo8(4)
 3560 1248 5983      		std Y+1,r21
 3561 124a 00C0      		rjmp .L137
 3562               	.L152:
 233:calc.c        **** 						{
 3564               	.LM383:
 3565 124c 9E81      		ldd r25,Y+6
 3566 124e 9F31      		cpi r25,lo8(31)
 3567 1250 00F0      		brlo .L153
 3568 1252 9093 0000 		sts tok_cnt,r25
 3569 1256 00C0      		rjmp .L196
 3570               	.L153:
 238:calc.c        **** 					}
 3572               	.LM384:
 3573 1258 2E81      		ldd r18,Y+6
 3574 125a 2F5F      		subi r18,lo8(-(1))
 3575 125c 2E83      		std Y+6,r18
 238:calc.c        **** 					}
 3577               	.LM385:
 3578 125e 8D93      		st X+,r24
 241:calc.c        **** 				}
 3580               	.LM386:
 3581 1260 3D81      		ldd r19,Y+5
 3582 1262 3150      		subi r19,lo8(-(-1))
 3583 1264 3D83      		std Y+5,r19
 3584 1266 00C0      		rjmp .L147
 3585               	.L173:
 3586               	.LBE102:
 290:calc.c        **** 				goto add2;
 3588               	.LM387:
 3589 1268 E7E0      		ldi r30,lo8(7)
 3590 126a E983      		std Y+1,r30
 3591 126c 00C0      		rjmp .L143
 3592               	.L174:
 294:calc.c        **** 				goto add2;
 3594               	.LM388:
 3595 126e F8E0      		ldi r31,lo8(8)
 3596 1270 F983      		std Y+1,r31
 3597 1272 00C0      		rjmp .L143
 3598               	.L175:
 166:calc.c        **** 			{
 3600               	.LM389:
 3601 1274 26E0      		ldi r18,lo8(6)
 3602 1276 2983      		std Y+1,r18
 3603 1278 00C0      		rjmp .L143
 3604               	.L176:
 298:calc.c        **** 
 3606               	.LM390:
 3607 127a 39E0      		ldi r19,lo8(9)
 3608 127c 3983      		std Y+1,r19
 3609 127e 00C0      		rjmp .L143
 3610               	.L182:
 3611 1280 4AE0      		ldi r20,lo8(10)
 3612 1282 4983      		std Y+1,r20
 3613 1284 00C0      		rjmp .L143
 3614               	.L183:
 283:calc.c        **** 					break;
 3616               	.LM391:
 3617 1286 5CE0      		ldi r21,lo8(12)
 3618 1288 5983      		std Y+1,r21
 3619 128a 00C0      		rjmp .L143
 3620               	.L169:
 105:calc.c        **** 
 3622               	.LM392:
 3623 128c 81E0      		ldi r24,lo8(1)
 262:calc.c        **** 				break;
 3625               	.LM393:
 3626 128e 91E1      		ldi r25,lo8(17)
 3627 1290 00C0      		rjmp .L194
 3628               	.L170:
 166:calc.c        **** 			{
 3630               	.LM394:
 3631 1292 81E0      		ldi r24,lo8(1)
 3632 1294 ADE0      		ldi r26,lo8(13)
 3633 1296 A983      		std Y+1,r26
 3634 1298 00C0      		rjmp .L137
 3635               	.L177:
 105:calc.c        **** 
 3637               	.LM395:
 3638 129a 81E0      		ldi r24,lo8(1)
 178:calc.c        **** 					break;
 3640               	.LM396:
 3641 129c E5E0      		ldi r30,lo8(5)
 3642 129e E983      		std Y+1,r30
 3643 12a0 00C0      		rjmp .L137
 3644               	.L178:
 105:calc.c        **** 
 3646               	.LM397:
 3647 12a2 81E0      		ldi r24,lo8(1)
 178:calc.c        **** 					break;
 3649               	.LM398:
 3650 12a4 F5E0      		ldi r31,lo8(5)
 3651 12a6 F983      		std Y+1,r31
 3652 12a8 00C0      		rjmp .L137
 3653               	.L180:
 105:calc.c        **** 
 3655               	.LM399:
 3656 12aa 81E0      		ldi r24,lo8(1)
 184:calc.c        **** 					break;
 3658               	.LM400:
 3659 12ac 2EE0      		ldi r18,lo8(14)
 3660 12ae 2983      		std Y+1,r18
 3661 12b0 00C0      		rjmp .L137
 3662               	.L160:
 3663               	.LBB103:
 317:calc.c        **** 				if((get_precedence(tmp) > precedence) ||
 3665               	.LM401:
 3666 12b2 FC01      		movw r30,r24
 3667 12b4 2291      		ld r18,-Z
 3668 12b6 83EF      		ldi r24,lo8(-13)
 3669 12b8 820F      		add r24,r18
 3670 12ba 5E2F      		mov r21,r30
 3671 12bc 4F2F      		mov r20,r31
 3672 12be 8530      		cpi r24,lo8(5)
 3673 12c0 00F4      		brsh .L156
 318:calc.c        **** 					(tmp == TT_LP))
 3675               	.LM402:
 3676 12c2 E82F      		mov r30,r24
 3677 12c4 F0E0      		ldi r31,0
 3678 12c6 E050      		subi r30,lo8(-(CSWTCH.189))
 3679 12c8 F040      		sbci r31,hi8(-(CSWTCH.189))
 3680 12ca 8081      		ld r24,Z
 3681 12cc 3817      		cp r19,r24
 3682 12ce 00F4      		brsh .L158
 3683               	.L157:
 333:calc.c        **** 			{
 3685               	.LM403:
 3686 12d0 FD81      		ldd r31,Y+5
 3687 12d2 FF31      		cpi r31,lo8(31)
 3688 12d4 00F4      		brsh .+2
 3689 12d6 00C0      		rjmp .L161
 3690 12d8 2E81      		ldd r18,Y+6
 3691               	.L195:
 3692 12da 2093 0000 		sts tok_cnt,r18
 3693 12de 00C0      		rjmp .L196
 3694               	.L156:
 318:calc.c        **** 					(tmp == TT_LP))
 3696               	.LM404:
 3697 12e0 2330      		cpi r18,lo8(3)
 3698 12e2 01F0      		breq .L157
 3699               	.L158:
 324:calc.c        **** 				if(tok_cnt >= TOKEN_LIST_SIZE - 1)
 3701               	.LM405:
 3702 12e4 FD81      		ldd r31,Y+5
 3703 12e6 F150      		subi r31,lo8(-(-1))
 3704 12e8 FD83      		std Y+5,r31
 325:calc.c        **** 				{
 3706               	.LM406:
 3707 12ea 852F      		mov r24,r21
 3708 12ec 942F      		mov r25,r20
 3709 12ee 4E81      		ldd r20,Y+6
 3710 12f0 4F31      		cpi r20,lo8(31)
 3711 12f2 00F0      		brlo .+2
 3712 12f4 00C0      		rjmp .L197
 330:calc.c        **** 			}
 3714               	.LM407:
 3715 12f6 5E81      		ldd r21,Y+6
 3716 12f8 5F5F      		subi r21,lo8(-(1))
 3717 12fa 5E83      		std Y+6,r21
 330:calc.c        **** 			}
 3719               	.LM408:
 3720 12fc 2D93      		st X+,r18
 3721 12fe 00C0      		rjmp .L155
 3722               	.L165:
 3723               	.LBE103:
 345:calc.c        **** 		{
 3725               	.LM409:
 3726 1300 2E81      		ldd r18,Y+6
 3727 1302 2F31      		cpi r18,lo8(31)
 3728 1304 00F4      		brsh .L195
 350:calc.c        **** 			op_stack[--top_stack];
 3730               	.LM410:
 3731 1306 DA94      		dec r13
 351:calc.c        **** 	}
 3733               	.LM411:
 3734 1308 AD2D      		mov r26,r13
 3735 130a B0E0      		ldi r27,0
 351:calc.c        **** 	}
 3737               	.LM412:
 3738 130c A050      		subi r26,lo8(-(op_stack))
 3739 130e B040      		sbci r27,hi8(-(op_stack))
 350:calc.c        **** 			op_stack[--top_stack];
 3741               	.LM413:
 3742 1310 8C91      		ld r24,X
 3743 1312 8193      		st Z+,r24
 3744 1314 3E81      		ldd r19,Y+6
 3745 1316 3F5F      		subi r19,lo8(-(1))
 3746 1318 3E83      		std Y+6,r19
 3747 131a 00C0      		rjmp .L163
 3773               	.Lscope20:
 3775               	.global	__fixsfsi
 3776               	.global	__ltsf2
 3779               	plot_render:
 3781               	.Ltext14:
   1:plot.c        **** static char input_fx_buffer[32] = "x*x";
   2:plot.c        **** static char input_gx_buffer[32] = "1/x";
   3:plot.c        **** static char input_step_buffer[16] = "0.001";
   4:plot.c        **** static char input_center_x_buffer[16] = "0.0";
   5:plot.c        **** static char input_center_y_buffer[16] = "0.0";
   6:plot.c        **** static char input_scale_x_buffer[16] = "20.0";
   7:plot.c        **** static char input_scale_y_buffer[16] = "20.0";
   8:plot.c        **** static char input_grid_x_buffer[16] = "1.0";
   9:plot.c        **** static char input_grid_y_buffer[16] = "1.0";
  10:plot.c        **** 
  11:plot.c        **** /* CenterX, CenterX, ScaleX, ScaleY, GridX, GridY, Step */
  12:plot.c        **** static float pcx, pcy, psx, psy, pgx, pgy, pstep;
  13:plot.c        **** 
  14:plot.c        **** static void form_plot_input_button_ok_click(void);
  15:plot.c        **** static void form_plot_input_key(uint8_t button, uint8_t action);
  16:plot.c        **** static void form_plot_output_key(uint8_t button, uint8_t action);
  17:plot.c        **** 
  18:plot.c        **** static Element calc_input_elements[] =
  19:plot.c        **** {
  20:plot.c        **** 	/* F(X) = */
  21:plot.c        **** 	{
  22:plot.c        **** 		.Type = ELEMENT_TYPE_LABEL,
  23:plot.c        **** 		.E = { .L =
  24:plot.c        **** 		{
  25:plot.c        **** 			.Flags = FLAG_TEXT_PROGMEM,
  26:plot.c        **** 			.X = 5,
  27:plot.c        **** 			.Y = 5,
  28:plot.c        **** 			.Text = { .Flash = fx }
  29:plot.c        **** 		}}
  30:plot.c        **** 	},
  31:plot.c        **** 	{
  32:plot.c        **** 		.Type = ELEMENT_TYPE_INPUT,
  33:plot.c        **** 		.E = { .I =
  34:plot.c        **** 		{
  35:plot.c        **** 			.Flags = 0,
  36:plot.c        **** 			.X = 5,
  37:plot.c        **** 			.Y = 20,
  38:plot.c        **** 			.W = 230,
  39:plot.c        **** 			.Position = 3,
  40:plot.c        **** 			.Length = 3,
  41:plot.c        **** 			.Size = sizeof(input_fx_buffer),
  42:plot.c        **** 			.Text = input_fx_buffer
  43:plot.c        **** 		}}
  44:plot.c        **** 	},
  45:plot.c        **** 
  46:plot.c        **** 	/* G(X) = */
  47:plot.c        **** 	{
  48:plot.c        **** 		.Type = ELEMENT_TYPE_LABEL,
  49:plot.c        **** 		.E = { .L =
  50:plot.c        **** 		{
  51:plot.c        **** 			.Flags = FLAG_TEXT_PROGMEM,
  52:plot.c        **** 			.X = 5,
  53:plot.c        **** 			.Y = 45,
  54:plot.c        **** 			.Text = { .Flash = gx }
  55:plot.c        **** 		}}
  56:plot.c        **** 	},
  57:plot.c        **** 	{
  58:plot.c        **** 		.Type = ELEMENT_TYPE_INPUT,
  59:plot.c        **** 		.E = { .I =
  60:plot.c        **** 		{
  61:plot.c        **** 			.Flags = 0,
  62:plot.c        **** 			.X = 5,
  63:plot.c        **** 			.Y = 60,
  64:plot.c        **** 			.W = 230,
  65:plot.c        **** 			.Position = 3,
  66:plot.c        **** 			.Length = 3,
  67:plot.c        **** 			.Size = sizeof(input_gx_buffer),
  68:plot.c        **** 			.Text = input_gx_buffer
  69:plot.c        **** 		}}
  70:plot.c        **** 	},
  71:plot.c        **** 
  72:plot.c        **** 	/* Center X */
  73:plot.c        **** 	{
  74:plot.c        **** 		.Type = ELEMENT_TYPE_LABEL,
  75:plot.c        **** 		.E = { .L =
  76:plot.c        **** 		{
  77:plot.c        **** 			.Flags = FLAG_TEXT_PROGMEM,
  78:plot.c        **** 			.X = 5,
  79:plot.c        **** 			.Y = 85,
  80:plot.c        **** 			.Text = { .Flash = center_x }
  81:plot.c        **** 		}}
  82:plot.c        **** 	},
  83:plot.c        **** 	{
  84:plot.c        **** 		.Type = ELEMENT_TYPE_INPUT,
  85:plot.c        **** 		.E = { .I =
  86:plot.c        **** 		{
  87:plot.c        **** 			.Flags = 0,
  88:plot.c        **** 			.X = 5,
  89:plot.c        **** 			.Y = 100,
  90:plot.c        **** 			.W = 50,
  91:plot.c        **** 			.Position = 3,
  92:plot.c        **** 			.Length = 3,
  93:plot.c        **** 			.Size = sizeof(input_center_x_buffer),
  94:plot.c        **** 			.Text = input_center_x_buffer
  95:plot.c        **** 		}}
  96:plot.c        **** 	},
  97:plot.c        **** 
  98:plot.c        **** 	/* Center Y */
  99:plot.c        **** 	{
 100:plot.c        **** 		.Type = ELEMENT_TYPE_LABEL,
 101:plot.c        **** 		.E = { .L =
 102:plot.c        **** 		{
 103:plot.c        **** 			.Flags = FLAG_TEXT_PROGMEM,
 104:plot.c        **** 			.X = 65,
 105:plot.c        **** 			.Y = 85,
 106:plot.c        **** 			.Text = { .Flash = center_y }
 107:plot.c        **** 		}}
 108:plot.c        **** 	},
 109:plot.c        **** 	{
 110:plot.c        **** 		.Type = ELEMENT_TYPE_INPUT,
 111:plot.c        **** 		.E = { .I =
 112:plot.c        **** 		{
 113:plot.c        **** 			.Flags = 0,
 114:plot.c        **** 			.X = 65,
 115:plot.c        **** 			.Y = 100,
 116:plot.c        **** 			.W = 50,
 117:plot.c        **** 			.Position = 3,
 118:plot.c        **** 			.Length = 3,
 119:plot.c        **** 			.Size = sizeof(input_center_y_buffer),
 120:plot.c        **** 			.Text = input_center_y_buffer
 121:plot.c        **** 		}}
 122:plot.c        **** 	},
 123:plot.c        **** 
 124:plot.c        **** 	/* Scale X */
 125:plot.c        **** 	{
 126:plot.c        **** 		.Type = ELEMENT_TYPE_LABEL,
 127:plot.c        **** 		.E = { .L =
 128:plot.c        **** 		{
 129:plot.c        **** 			.Flags = FLAG_TEXT_PROGMEM,
 130:plot.c        **** 			.X = 125,
 131:plot.c        **** 			.Y = 85,
 132:plot.c        **** 			.Text = { .Flash = scale_x }
 133:plot.c        **** 		}}
 134:plot.c        **** 	},
 135:plot.c        **** 	{
 136:plot.c        **** 		.Type = ELEMENT_TYPE_INPUT,
 137:plot.c        **** 		.E = { .I =
 138:plot.c        **** 		{
 139:plot.c        **** 			.Flags = 0,
 140:plot.c        **** 			.X = 125,
 141:plot.c        **** 			.Y = 100,
 142:plot.c        **** 			.W = 50,
 143:plot.c        **** 			.Position = 4,
 144:plot.c        **** 			.Length = 4,
 145:plot.c        **** 			.Size = sizeof(input_scale_x_buffer),
 146:plot.c        **** 			.Text = input_scale_x_buffer
 147:plot.c        **** 		}}
 148:plot.c        **** 	},
 149:plot.c        **** 
 150:plot.c        **** 	/* Scale Y */
 151:plot.c        **** 	{
 152:plot.c        **** 		.Type = ELEMENT_TYPE_LABEL,
 153:plot.c        **** 		.E = { .L =
 154:plot.c        **** 		{
 155:plot.c        **** 			.Flags = FLAG_TEXT_PROGMEM,
 156:plot.c        **** 			.X = 185,
 157:plot.c        **** 			.Y = 85,
 158:plot.c        **** 			.Text = { .Flash = scale_y }
 159:plot.c        **** 		}}
 160:plot.c        **** 	},
 161:plot.c        **** 	{
 162:plot.c        **** 		.Type = ELEMENT_TYPE_INPUT,
 163:plot.c        **** 		.E = { .I =
 164:plot.c        **** 		{
 165:plot.c        **** 			.Flags = 0,
 166:plot.c        **** 			.X = 185,
 167:plot.c        **** 			.Y = 100,
 168:plot.c        **** 			.W = 50,
 169:plot.c        **** 			.Position = 4,
 170:plot.c        **** 			.Length = 4,
 171:plot.c        **** 			.Size = sizeof(input_scale_y_buffer),
 172:plot.c        **** 			.Text = input_scale_y_buffer
 173:plot.c        **** 		}}
 174:plot.c        **** 	},
 175:plot.c        **** 
 176:plot.c        **** 
 177:plot.c        **** 	/* Grid X */
 178:plot.c        **** 	{
 179:plot.c        **** 		.Type = ELEMENT_TYPE_LABEL,
 180:plot.c        **** 		.E = { .L =
 181:plot.c        **** 		{
 182:plot.c        **** 			.Flags = FLAG_TEXT_PROGMEM,
 183:plot.c        **** 			.X = 5,
 184:plot.c        **** 			.Y = 125,
 185:plot.c        **** 			.Text = { .Flash = grid_x }
 186:plot.c        **** 		}}
 187:plot.c        **** 	},
 188:plot.c        **** 	{
 189:plot.c        **** 		.Type = ELEMENT_TYPE_INPUT,
 190:plot.c        **** 		.E = { .I =
 191:plot.c        **** 		{
 192:plot.c        **** 			.Flags = 0,
 193:plot.c        **** 			.X = 5,
 194:plot.c        **** 			.Y = 140,
 195:plot.c        **** 			.W = 50,
 196:plot.c        **** 			.Position = 3,
 197:plot.c        **** 			.Length = 3,
 198:plot.c        **** 			.Size = 32,
 199:plot.c        **** 			.Text = input_grid_x_buffer
 200:plot.c        **** 		}}
 201:plot.c        **** 	},
 202:plot.c        **** 
 203:plot.c        **** 	/* Grid Y */
 204:plot.c        **** 	{
 205:plot.c        **** 		.Type = ELEMENT_TYPE_LABEL,
 206:plot.c        **** 		.E = { .L =
 207:plot.c        **** 		{
 208:plot.c        **** 			.Flags = FLAG_TEXT_PROGMEM,
 209:plot.c        **** 			.X = 65,
 210:plot.c        **** 			.Y = 125,
 211:plot.c        **** 			.Text = { .Flash = grid_y }
 212:plot.c        **** 		}}
 213:plot.c        **** 	},
 214:plot.c        **** 	{
 215:plot.c        **** 		.Type = ELEMENT_TYPE_INPUT,
 216:plot.c        **** 		.E = { .I =
 217:plot.c        **** 		{
 218:plot.c        **** 			.Flags = 0,
 219:plot.c        **** 			.X = 65,
 220:plot.c        **** 			.Y = 140,
 221:plot.c        **** 			.W = 50,
 222:plot.c        **** 			.Position = 3,
 223:plot.c        **** 			.Length = 3,
 224:plot.c        **** 			.Size = sizeof(input_grid_y_buffer),
 225:plot.c        **** 			.Text = input_grid_y_buffer
 226:plot.c        **** 		}}
 227:plot.c        **** 	},
 228:plot.c        **** 
 229:plot.c        **** 	/* Step */
 230:plot.c        **** 	{
 231:plot.c        **** 		.Type = ELEMENT_TYPE_LABEL,
 232:plot.c        **** 		.E = { .L =
 233:plot.c        **** 		{
 234:plot.c        **** 			.Flags = FLAG_TEXT_PROGMEM,
 235:plot.c        **** 			.X = 125,
 236:plot.c        **** 			.Y = 125,
 237:plot.c        **** 			.Text = { .Flash = step }
 238:plot.c        **** 		}}
 239:plot.c        **** 	},
 240:plot.c        **** 	{
 241:plot.c        **** 		.Type = ELEMENT_TYPE_INPUT,
 242:plot.c        **** 		.E = { .I =
 243:plot.c        **** 		{
 244:plot.c        **** 			.Flags = 0,
 245:plot.c        **** 			.X = 125,
 246:plot.c        **** 			.Y = 140,
 247:plot.c        **** 			.W = 110,
 248:plot.c        **** 			.Position = 5,
 249:plot.c        **** 			.Length = 5,
 250:plot.c        **** 			.Size = sizeof(input_step_buffer),
 251:plot.c        **** 			.Text = input_step_buffer
 252:plot.c        **** 		}}
 253:plot.c        **** 	},
 254:plot.c        **** 
 255:plot.c        **** 	/* OK */
 256:plot.c        **** 	{
 257:plot.c        **** 		.Type = ELEMENT_TYPE_BUTTON,
 258:plot.c        **** 		.E = { .B =
 259:plot.c        **** 		{
 260:plot.c        **** 			.Flags = FLAG_TEXT_PROGMEM,
 261:plot.c        **** 			.X = 155,
 262:plot.c        **** 			.Y = 195,
 263:plot.c        **** 			.W = 80,
 264:plot.c        **** 			.H = 20,
 265:plot.c        **** 			.Text = { .Flash = ok },
 266:plot.c        **** 			.Click = form_plot_input_button_ok_click
 267:plot.c        **** 		}}
 268:plot.c        **** 	}
 269:plot.c        **** };
 270:plot.c        **** 
 271:plot.c        **** static Form plot_form_input =
 272:plot.c        **** {
 273:plot.c        **** 	.Flags = FLAG_TEXT_PROGMEM,
 274:plot.c        **** 	.Title = { .Flash = function_plotter },
 275:plot.c        **** 	.Elements = calc_input_elements,
 276:plot.c        **** 	.Count = arrlen(calc_input_elements),
 277:plot.c        **** 	.OnKey = form_plot_input_key
 278:plot.c        **** };
 279:plot.c        **** 
 280:plot.c        **** static Form plot_form_output =
 281:plot.c        **** {
 282:plot.c        **** 	.Flags = FLAG_TEXT_PROGMEM,
 283:plot.c        **** 	.Title = { .Flash = function_plotter },
 284:plot.c        **** 	.Elements = NULL,
 285:plot.c        **** 	.Count = 0,
 286:plot.c        **** 	.OnKey = form_plot_output_key
 287:plot.c        **** };
 288:plot.c        **** 
 289:plot.c        **** static float map(float x, float in_min, float in_max, float out_min, float out_max)
 290:plot.c        **** {
 291:plot.c        **** 	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 292:plot.c        **** }
 293:plot.c        **** 
 294:plot.c        **** static void plot_open(void)
 295:plot.c        **** {
 296:plot.c        **** 	form_open(&plot_form_input);
 297:plot.c        **** }
 298:plot.c        **** 
 299:plot.c        **** static void plot_render(void)
 300:plot.c        **** {
 3783               	.LM414:
 3784               	.LFBB21:
 3785 131c 2F92      		push r2
 3786 131e 3F92      		push r3
 3787 1320 4F92      		push r4
 3788 1322 5F92      		push r5
 3789 1324 6F92      		push r6
 3790 1326 7F92      		push r7
 3791 1328 8F92      		push r8
 3792 132a 9F92      		push r9
 3793 132c AF92      		push r10
 3794 132e BF92      		push r11
 3795 1330 CF92      		push r12
 3796 1332 DF92      		push r13
 3797 1334 EF92      		push r14
 3798 1336 FF92      		push r15
 3799 1338 0F93      		push r16
 3800 133a 1F93      		push r17
 3801 133c CF93      		push r28
 3802 133e DF93      		push r29
 3803 1340 CDB7      		in r28,__SP_L__
 3804 1342 DEB7      		in r29,__SP_H__
 3805 1344 6A97      		sbiw r28,26
 3806 1346 0FB6      		in __tmp_reg__,__SREG__
 3807 1348 F894      		cli
 3808 134a DEBF      		out __SP_H__,r29
 3809 134c 0FBE      		out __SREG__,__tmp_reg__
 3810 134e CDBF      		out __SP_L__,r28
 3811               	/* prologue: function */
 3812               	/* frame size = 26 */
 3813               	/* stack size = 44 */
 3814               	.L__stack_usage = 44
 301:plot.c        **** 	/* MinX, MaxY */
 302:plot.c        **** 	float min_x, max_x, min_y, max_y;
 303:plot.c        **** 
 304:plot.c        **** 	/* X/Y */
 305:plot.c        **** 	float x, y;
 306:plot.c        **** 
 307:plot.c        **** 	/* Mapped X/Y */
 308:plot.c        **** 	int16_t mx, my;
 309:plot.c        **** 
 310:plot.c        **** 	/* Clear */
 311:plot.c        **** 	lcd_color(LCD_WHITE);
 3816               	.LM415:
 3817 1350 8FEF      		ldi r24,lo8(-1)
 3818 1352 9FEF      		ldi r25,lo8(-1)
 3819 1354 9093 0000 		sts _color+1,r25
 3820 1358 8093 0000 		sts _color,r24
 312:plot.c        **** 	lcd_rect(0, 20, 240, 220);
 3822               	.LM416:
 3823 135c 2CED      		ldi r18,lo8(-36)
 3824 135e 30E0      		ldi r19,0
 3825 1360 40EF      		ldi r20,lo8(-16)
 3826 1362 50E0      		ldi r21,0
 3827 1364 64E1      		ldi r22,lo8(20)
 3828 1366 70E0      		ldi r23,0
 3829 1368 90E0      		ldi r25,0
 3830 136a 80E0      		ldi r24,0
 3831 136c 0E94 0000 		call lcd_rect
 3832               	.LBB104:
 313:plot.c        **** 
 314:plot.c        **** 	/* Calculate MinX/MaxX */
 315:plot.c        **** 	{
 316:plot.c        **** 		float f = 120.0f / psx;
 3834               	.LM417:
 3835 1370 2091 0000 		lds r18,psx
 3836 1374 3091 0000 		lds r19,psx+1
 3837 1378 4091 0000 		lds r20,psx+2
 3838 137c 5091 0000 		lds r21,psx+3
 3839 1380 60E0      		ldi r22,0
 3840 1382 70E0      		ldi r23,0
 3841 1384 80EF      		ldi r24,lo8(-16)
 3842 1386 92E4      		ldi r25,lo8(66)
 3843 1388 0E94 0000 		call __divsf3
 3844 138c 5B01      		movw r10,r22
 3845 138e 6C01      		movw r12,r24
 317:plot.c        **** 		min_x = pcx - f;
 3847               	.LM418:
 3848 1390 8091 0000 		lds r24,pcx
 3849 1394 9091 0000 		lds r25,pcx+1
 3850 1398 A091 0000 		lds r26,pcx+2
 3851 139c B091 0000 		lds r27,pcx+3
 3852 13a0 8D87      		std Y+13,r24
 3853 13a2 9E87      		std Y+14,r25
 3854 13a4 AF87      		std Y+15,r26
 3855 13a6 B88B      		std Y+16,r27
 3857               	.LM419:
 3858 13a8 9501      		movw r18,r10
 3859 13aa A601      		movw r20,r12
 3860 13ac BC01      		movw r22,r24
 3861 13ae CD01      		movw r24,r26
 3862 13b0 0E94 0000 		call __subsf3
 3863 13b4 162F      		mov r17,r22
 3864 13b6 072F      		mov r16,r23
 3865 13b8 F82E      		mov r15,r24
 3866 13ba E92E      		mov r14,r25
 318:plot.c        **** 		max_x = pcx + f;
 3868               	.LM420:
 3869 13bc 9501      		movw r18,r10
 3870 13be A601      		movw r20,r12
 3871 13c0 6D85      		ldd r22,Y+13
 3872 13c2 7E85      		ldd r23,Y+14
 3873 13c4 8F85      		ldd r24,Y+15
 3874 13c6 9889      		ldd r25,Y+16
 3875 13c8 0E94 0000 		call __addsf3
 3876 13cc 6C8B      		std Y+20,r22
 3877 13ce 7D8B      		std Y+21,r23
 3878 13d0 8E8B      		std Y+22,r24
 3879 13d2 9F8B      		std Y+23,r25
 3880               	.LBE104:
 3881               	.LBB105:
 319:plot.c        **** 	}
 320:plot.c        **** 
 321:plot.c        **** 	/* Calculate MinY/MaxY */
 322:plot.c        **** 	{
 323:plot.c        **** 		float f = 110.0f / psy;
 3883               	.LM421:
 3884 13d4 2091 0000 		lds r18,psy
 3885 13d8 3091 0000 		lds r19,psy+1
 3886 13dc 4091 0000 		lds r20,psy+2
 3887 13e0 5091 0000 		lds r21,psy+3
 3888 13e4 60E0      		ldi r22,0
 3889 13e6 70E0      		ldi r23,0
 3890 13e8 8CED      		ldi r24,lo8(-36)
 3891 13ea 92E4      		ldi r25,lo8(66)
 3892 13ec 0E94 0000 		call __divsf3
 3893 13f0 5B01      		movw r10,r22
 3894 13f2 6C01      		movw r12,r24
 324:plot.c        **** 		min_y = pcy - f;
 3896               	.LM422:
 3897 13f4 8091 0000 		lds r24,pcy
 3898 13f8 9091 0000 		lds r25,pcy+1
 3899 13fc A091 0000 		lds r26,pcy+2
 3900 1400 B091 0000 		lds r27,pcy+3
 3901 1404 8D83      		std Y+5,r24
 3902 1406 9E83      		std Y+6,r25
 3903 1408 AF83      		std Y+7,r26
 3904 140a B887      		std Y+8,r27
 3906               	.LM423:
 3907 140c 9501      		movw r18,r10
 3908 140e A601      		movw r20,r12
 3909 1410 BC01      		movw r22,r24
 3910 1412 CD01      		movw r24,r26
 3911 1414 0E94 0000 		call __subsf3
 3912 1418 6D87      		std Y+13,r22
 3913 141a 798B      		std Y+17,r23
 3914 141c 8A8B      		std Y+18,r24
 3915 141e 9B8B      		std Y+19,r25
 325:plot.c        **** 		max_y = pcy + f;
 3917               	.LM424:
 3918 1420 9501      		movw r18,r10
 3919 1422 A601      		movw r20,r12
 3920 1424 6D81      		ldd r22,Y+5
 3921 1426 7E81      		ldd r23,Y+6
 3922 1428 8F81      		ldd r24,Y+7
 3923 142a 9885      		ldd r25,Y+8
 3924 142c 0E94 0000 		call __addsf3
 3925 1430 3B01      		movw r6,r22
 3926 1432 4C01      		movw r8,r24
 3927               	.LBE105:
 326:plot.c        **** 	}
 327:plot.c        **** 
 328:plot.c        **** 	/* Draw Grid */
 329:plot.c        **** 	lcd_color(0xAD55);
 3929               	.LM425:
 3930 1434 85E5      		ldi r24,lo8(85)
 3931 1436 9DEA      		ldi r25,lo8(-83)
 3932 1438 9093 0000 		sts _color+1,r25
 3933 143c 8093 0000 		sts _color,r24
 3934               	.LBB106:
 330:plot.c        **** 
 331:plot.c        **** 	/* X: Vertical */
 332:plot.c        **** 	{
 333:plot.c        **** 		float f;
 334:plot.c        **** 		f = ceil(min_x / pgx) * pgx;
 3936               	.LM426:
 3937 1440 8091 0000 		lds r24,pgx
 3938 1444 9091 0000 		lds r25,pgx+1
 3939 1448 A091 0000 		lds r26,pgx+2
 3940 144c B091 0000 		lds r27,pgx+3
 3941 1450 8987      		std Y+9,r24
 3942 1452 9A87      		std Y+10,r25
 3943 1454 AB87      		std Y+11,r26
 3944 1456 BC87      		std Y+12,r27
 3946               	.LM427:
 3947 1458 9C01      		movw r18,r24
 3948 145a AD01      		movw r20,r26
 3949 145c B801      		movw r22,r16
 3950 145e C701      		movw r24,r14
 3951 1460 7D83      		std Y+5,r23
 3952 1462 6E83      		std Y+6,r22
 3953 1464 9F83      		std Y+7,r25
 3954 1466 8887      		std Y+8,r24
 3955 1468 6D81      		ldd r22,Y+5
 3956 146a 7E81      		ldd r23,Y+6
 3957 146c 8F81      		ldd r24,Y+7
 3958 146e 9885      		ldd r25,Y+8
 3959 1470 0E94 0000 		call __divsf3
 3961               	.LM428:
 3962 1474 6D83      		std Y+5,r22
 3963 1476 7E83      		std Y+6,r23
 3964 1478 8F83      		std Y+7,r24
 3965 147a 9887      		std Y+8,r25
 3966 147c 6D81      		ldd r22,Y+5
 3967 147e 7E81      		ldd r23,Y+6
 3968 1480 8F81      		ldd r24,Y+7
 3969 1482 9885      		ldd r25,Y+8
 3970 1484 0E94 0000 		call ceil
 3972               	.LM429:
 3973 1488 9B01      		movw r18,r22
 3974 148a AC01      		movw r20,r24
 3975 148c 6985      		ldd r22,Y+9
 3976 148e 7A85      		ldd r23,Y+10
 3977 1490 8B85      		ldd r24,Y+11
 3978 1492 9C85      		ldd r25,Y+12
 3979 1494 0E94 0000 		call __mulsf3
 3980               	.L217:
 335:plot.c        **** 		for(; f < max_x; f += pgx)
 3982               	.LM430:
 3983 1498 5B01      		movw r10,r22
 3984 149a 6C01      		movw r12,r24
 3986               	.LM431:
 3987 149c 2C89      		ldd r18,Y+20
 3988 149e 3D89      		ldd r19,Y+21
 3989 14a0 4E89      		ldd r20,Y+22
 3990 14a2 5F89      		ldd r21,Y+23
 3991 14a4 6D83      		std Y+5,r22
 3992 14a6 BE82      		std Y+6,r11
 3993 14a8 8F83      		std Y+7,r24
 3994 14aa D886      		std Y+8,r13
 3995 14ac 6D81      		ldd r22,Y+5
 3996 14ae 7E81      		ldd r23,Y+6
 3997 14b0 8F81      		ldd r24,Y+7
 3998 14b2 9885      		ldd r25,Y+8
 3999 14b4 0E94 0000 		call __ltsf2
 4000 14b8 87FD      		sbrc r24,7
 4001 14ba 00C0      		rjmp .L200
 4002               	.LBE106:
 4003               	.LBB109:
 336:plot.c        **** 		{
 337:plot.c        **** 			mx = (int16_t)map(f, min_x, max_x, 0.0f, 240.0f);
 338:plot.c        **** 			lcd_vline(mx, 20, 220);
 339:plot.c        **** 		}
 340:plot.c        **** 	}
 341:plot.c        **** 
 342:plot.c        **** 	/* Y: Horizontal */
 343:plot.c        **** 	{
 344:plot.c        **** 		float f;
 345:plot.c        **** 		f = ceil(min_y / pgy) * pgy;
 4005               	.LM432:
 4006 14bc 8091 0000 		lds r24,pgy
 4007 14c0 9091 0000 		lds r25,pgy+1
 4008 14c4 A091 0000 		lds r26,pgy+2
 4009 14c8 B091 0000 		lds r27,pgy+3
 4010 14cc 8987      		std Y+9,r24
 4011 14ce 9A87      		std Y+10,r25
 4012 14d0 AB87      		std Y+11,r26
 4013 14d2 BC87      		std Y+12,r27
 4015               	.LM433:
 4016 14d4 9C01      		movw r18,r24
 4017 14d6 AD01      		movw r20,r26
 4018 14d8 9D85      		ldd r25,Y+13
 4019 14da 9D83      		std Y+5,r25
 4020 14dc A989      		ldd r26,Y+17
 4021 14de AE83      		std Y+6,r26
 4022 14e0 BA89      		ldd r27,Y+18
 4023 14e2 BF83      		std Y+7,r27
 4024 14e4 8B89      		ldd r24,Y+19
 4025 14e6 8887      		std Y+8,r24
 4026 14e8 6D81      		ldd r22,Y+5
 4027 14ea 7E81      		ldd r23,Y+6
 4028 14ec 8F81      		ldd r24,Y+7
 4029 14ee 9885      		ldd r25,Y+8
 4030 14f0 0E94 0000 		call __divsf3
 4032               	.LM434:
 4033 14f4 6D83      		std Y+5,r22
 4034 14f6 7E83      		std Y+6,r23
 4035 14f8 8F83      		std Y+7,r24
 4036 14fa 9887      		std Y+8,r25
 4037 14fc 6D81      		ldd r22,Y+5
 4038 14fe 7E81      		ldd r23,Y+6
 4039 1500 8F81      		ldd r24,Y+7
 4040 1502 9885      		ldd r25,Y+8
 4041 1504 0E94 0000 		call ceil
 4043               	.LM435:
 4044 1508 9B01      		movw r18,r22
 4045 150a AC01      		movw r20,r24
 4046 150c 6985      		ldd r22,Y+9
 4047 150e 7A85      		ldd r23,Y+10
 4048 1510 8B85      		ldd r24,Y+11
 4049 1512 9C85      		ldd r25,Y+12
 4050 1514 0E94 0000 		call __mulsf3
 4051               	.L218:
 346:plot.c        **** 		for(; f < max_y; f += pgy)
 4053               	.LM436:
 4054 1518 5B01      		movw r10,r22
 4055 151a 6C01      		movw r12,r24
 4057               	.LM437:
 4058 151c 9301      		movw r18,r6
 4059 151e A401      		movw r20,r8
 4060 1520 6D83      		std Y+5,r22
 4061 1522 BE82      		std Y+6,r11
 4062 1524 8F83      		std Y+7,r24
 4063 1526 D886      		std Y+8,r13
 4064 1528 6D81      		ldd r22,Y+5
 4065 152a 7E81      		ldd r23,Y+6
 4066 152c 8F81      		ldd r24,Y+7
 4067 152e 9885      		ldd r25,Y+8
 4068 1530 0E94 0000 		call __ltsf2
 4069 1534 87FD      		sbrc r24,7
 4070 1536 00C0      		rjmp .L202
 4071               	.LBE109:
 347:plot.c        **** 		{
 348:plot.c        **** 			my = (int16_t)map(f, min_y, max_y, 240.0f, 20.0f);
 349:plot.c        **** 			lcd_hline(0, my, 240);
 350:plot.c        **** 		}
 351:plot.c        **** 	}
 352:plot.c        **** 
 353:plot.c        **** 	/* Draw X/Y Axes */
 354:plot.c        **** 	lcd_color(LCD_BLACK);
 4073               	.LM438:
 4074 1538 1092 0000 		sts _color+1,__zero_reg__
 4075 153c 1092 0000 		sts _color,__zero_reg__
 4076               	.LBB112:
 4077               	.LBB113:
 291:plot.c        **** }
 4079               	.LM439:
 4080 1540 B801      		movw r22,r16
 4081 1542 C701      		movw r24,r14
 4082 1544 272F      		mov r18,r23
 4083 1546 302F      		mov r19,r16
 4084 1548 492F      		mov r20,r25
 4085 154a 5E2D      		mov r21,r14
 4086 154c 9C89      		ldd r25,Y+20
 4087 154e 9D83      		std Y+5,r25
 4088 1550 AD89      		ldd r26,Y+21
 4089 1552 AE83      		std Y+6,r26
 4090 1554 BE89      		ldd r27,Y+22
 4091 1556 BF83      		std Y+7,r27
 4092 1558 8F89      		ldd r24,Y+23
 4093 155a 8887      		std Y+8,r24
 4094 155c 6D81      		ldd r22,Y+5
 4095 155e 7E81      		ldd r23,Y+6
 4096 1560 8F81      		ldd r24,Y+7
 4097 1562 9885      		ldd r25,Y+8
 4098 1564 0E94 0000 		call __subsf3
 4099 1568 6987      		std Y+9,r22
 4100 156a 788F      		std Y+24,r23
 4101 156c 898F      		std Y+25,r24
 4102 156e 9A8F      		std Y+26,r25
 291:plot.c        **** }
 4104               	.LM440:
 4105 1570 B801      		movw r22,r16
 4106 1572 C701      		movw r24,r14
 4107 1574 272F      		mov r18,r23
 4108 1576 302F      		mov r19,r16
 4109 1578 492F      		mov r20,r25
 4110 157a 5E2D      		mov r21,r14
 4111 157c 60E0      		ldi r22,0
 4112 157e 70E0      		ldi r23,0
 4113 1580 CB01      		movw r24,r22
 4114 1582 0E94 0000 		call __subsf3
 291:plot.c        **** }
 4116               	.LM441:
 4117 1586 20E0      		ldi r18,0
 4118 1588 30E0      		ldi r19,0
 4119 158a 40E7      		ldi r20,lo8(112)
 4120 158c 53E4      		ldi r21,lo8(67)
 4121 158e 6D83      		std Y+5,r22
 4122 1590 7E83      		std Y+6,r23
 4123 1592 8F83      		std Y+7,r24
 4124 1594 9887      		std Y+8,r25
 4125 1596 6D81      		ldd r22,Y+5
 4126 1598 7E81      		ldd r23,Y+6
 4127 159a 8F81      		ldd r24,Y+7
 4128 159c 9885      		ldd r25,Y+8
 4129 159e 0E94 0000 		call __mulsf3
 291:plot.c        **** }
 4131               	.LM442:
 4132 15a2 2985      		ldd r18,Y+9
 4133 15a4 388D      		ldd r19,Y+24
 4134 15a6 498D      		ldd r20,Y+25
 4135 15a8 5A8D      		ldd r21,Y+26
 4136 15aa 6D83      		std Y+5,r22
 4137 15ac 7E83      		std Y+6,r23
 4138 15ae 8F83      		std Y+7,r24
 4139 15b0 9887      		std Y+8,r25
 4140 15b2 6D81      		ldd r22,Y+5
 4141 15b4 7E81      		ldd r23,Y+6
 4142 15b6 8F81      		ldd r24,Y+7
 4143 15b8 9885      		ldd r25,Y+8
 4144 15ba 0E94 0000 		call __divsf3
 291:plot.c        **** }
 4146               	.LM443:
 4147 15be 20E0      		ldi r18,0
 4148 15c0 30E0      		ldi r19,0
 4149 15c2 A901      		movw r20,r18
 4150 15c4 6D83      		std Y+5,r22
 4151 15c6 7E83      		std Y+6,r23
 4152 15c8 8F83      		std Y+7,r24
 4153 15ca 9887      		std Y+8,r25
 4154 15cc 6D81      		ldd r22,Y+5
 4155 15ce 7E81      		ldd r23,Y+6
 4156 15d0 8F81      		ldd r24,Y+7
 4157 15d2 9885      		ldd r25,Y+8
 4158 15d4 0E94 0000 		call __addsf3
 4159               	.LBE113:
 4160               	.LBE112:
 355:plot.c        **** 	mx = (int16_t)map(0.0f, min_x, max_x, 0.0f, 240.0f);
 4162               	.LM444:
 4163 15d8 6D83      		std Y+5,r22
 4164 15da 7E83      		std Y+6,r23
 4165 15dc 8F83      		std Y+7,r24
 4166 15de 9887      		std Y+8,r25
 4167 15e0 6D81      		ldd r22,Y+5
 4168 15e2 7E81      		ldd r23,Y+6
 4169 15e4 8F81      		ldd r24,Y+7
 4170 15e6 9885      		ldd r25,Y+8
 4171 15e8 0E94 0000 		call __fixsfsi
 4172 15ec CB01      		movw r24,r22
 356:plot.c        **** 	if(mx < 0 || mx >= 240)
 4174               	.LM445:
 4175 15ee 603F      		cpi r22,-16
 4176 15f0 7105      		cpc r23,__zero_reg__
 4177 15f2 00F4      		brsh .L203
 357:plot.c        **** 	{
 358:plot.c        **** 		goto dy;
 359:plot.c        **** 	}
 360:plot.c        **** 
 361:plot.c        **** 	lcd_vline(mx, 20, 220);
 4179               	.LM446:
 4180 15f4 2CED      		ldi r18,lo8(-36)
 4181 15f6 30E0      		ldi r19,0
 4182 15f8 41E0      		ldi r20,lo8(1)
 4183 15fa 50E0      		ldi r21,0
 4184 15fc 64E1      		ldi r22,lo8(20)
 4185 15fe 70E0      		ldi r23,0
 4186 1600 0E94 0000 		call lcd_rect
 4187               	.L203:
 4188               	.LBB114:
 4189               	.LBB115:
 291:plot.c        **** }
 4191               	.LM447:
 4192 1604 2D85      		ldd r18,Y+13
 4193 1606 3989      		ldd r19,Y+17
 4194 1608 4A89      		ldd r20,Y+18
 4195 160a 5B89      		ldd r21,Y+19
 4196 160c 6D82      		std Y+5,r6
 4197 160e 7E82      		std Y+6,r7
 4198 1610 8F82      		std Y+7,r8
 4199 1612 9886      		std Y+8,r9
 4200 1614 6D81      		ldd r22,Y+5
 4201 1616 7E81      		ldd r23,Y+6
 4202 1618 8F81      		ldd r24,Y+7
 4203 161a 9885      		ldd r25,Y+8
 4204 161c 0E94 0000 		call __subsf3
 4205 1620 1B01      		movw r2,r22
 4206 1622 4C01      		movw r8,r24
 291:plot.c        **** }
 4208               	.LM448:
 4209 1624 2D85      		ldd r18,Y+13
 4210 1626 3989      		ldd r19,Y+17
 4211 1628 4A89      		ldd r20,Y+18
 4212 162a 5B89      		ldd r21,Y+19
 4213 162c 60E0      		ldi r22,0
 4214 162e 70E0      		ldi r23,0
 4215 1630 CB01      		movw r24,r22
 4216 1632 0E94 0000 		call __subsf3
 291:plot.c        **** }
 4218               	.LM449:
 4219 1636 20E0      		ldi r18,0
 4220 1638 30E0      		ldi r19,0
 4221 163a 4CE5      		ldi r20,lo8(92)
 4222 163c 53EC      		ldi r21,lo8(-61)
 4223 163e 6D83      		std Y+5,r22
 4224 1640 7E83      		std Y+6,r23
 4225 1642 8F83      		std Y+7,r24
 4226 1644 9887      		std Y+8,r25
 4227 1646 6D81      		ldd r22,Y+5
 4228 1648 7E81      		ldd r23,Y+6
 4229 164a 8F81      		ldd r24,Y+7
 4230 164c 9885      		ldd r25,Y+8
 4231 164e 0E94 0000 		call __mulsf3
 291:plot.c        **** }
 4233               	.LM450:
 4234 1652 9101      		movw r18,r2
 4235 1654 A401      		movw r20,r8
 4236 1656 6D83      		std Y+5,r22
 4237 1658 7E83      		std Y+6,r23
 4238 165a 8F83      		std Y+7,r24
 4239 165c 9887      		std Y+8,r25
 4240 165e 6D81      		ldd r22,Y+5
 4241 1660 7E81      		ldd r23,Y+6
 4242 1662 8F81      		ldd r24,Y+7
 4243 1664 9885      		ldd r25,Y+8
 4244 1666 0E94 0000 		call __divsf3
 291:plot.c        **** }
 4246               	.LM451:
 4247 166a 20E0      		ldi r18,0
 4248 166c 30E0      		ldi r19,0
 4249 166e 40E7      		ldi r20,lo8(112)
 4250 1670 53E4      		ldi r21,lo8(67)
 4251 1672 6D83      		std Y+5,r22
 4252 1674 7E83      		std Y+6,r23
 4253 1676 8F83      		std Y+7,r24
 4254 1678 9887      		std Y+8,r25
 4255 167a 6D81      		ldd r22,Y+5
 4256 167c 7E81      		ldd r23,Y+6
 4257 167e 8F81      		ldd r24,Y+7
 4258 1680 9885      		ldd r25,Y+8
 4259 1682 0E94 0000 		call __addsf3
 4260               	.LBE115:
 4261               	.LBE114:
 362:plot.c        **** 
 363:plot.c        **** dy:
 364:plot.c        **** 	my = (int16_t)map(0.0f, min_y, max_y, 240.0f, 20.0f);
 4263               	.LM452:
 4264 1686 6D83      		std Y+5,r22
 4265 1688 7E83      		std Y+6,r23
 4266 168a 8F83      		std Y+7,r24
 4267 168c 9887      		std Y+8,r25
 4268 168e 6D81      		ldd r22,Y+5
 4269 1690 7E81      		ldd r23,Y+6
 4270 1692 8F81      		ldd r24,Y+7
 4271 1694 9885      		ldd r25,Y+8
 4272 1696 0E94 0000 		call __fixsfsi
 365:plot.c        **** 	if(my < 20 || my >= 240)
 4274               	.LM453:
 4275 169a 9B01      		movw r18,r22
 4276 169c 2451      		subi r18,20
 4277 169e 3109      		sbc r19,__zero_reg__
 4279               	.LM454:
 4280 16a0 2C3D      		cpi r18,-36
 4281 16a2 3105      		cpc r19,__zero_reg__
 4282 16a4 00F4      		brsh .L205
 366:plot.c        **** 	{
 367:plot.c        **** 		goto dt;
 368:plot.c        **** 	}
 369:plot.c        **** 
 370:plot.c        **** 	lcd_hline(0, my, 240);
 4284               	.LM455:
 4285 16a6 21E0      		ldi r18,lo8(1)
 4286 16a8 30E0      		ldi r19,0
 4287 16aa 40EF      		ldi r20,lo8(-16)
 4288 16ac 50E0      		ldi r21,0
 4289 16ae 90E0      		ldi r25,0
 4290 16b0 80E0      		ldi r24,0
 4291 16b2 0E94 0000 		call lcd_rect
 4292               	.L204:
 4293               	.L205:
 371:plot.c        **** 
 372:plot.c        **** dt:
 373:plot.c        **** 	/* Draw Ticks and Numbers */
 374:plot.c        **** 
 375:plot.c        **** 
 376:plot.c        **** fx:
 377:plot.c        **** 	/* Plot f(x) */
 378:plot.c        **** 	if(calc_prepare(input_fx_buffer))
 4295               	.LM456:
 4296 16b6 80E0      		ldi r24,lo8(input_fx_buffer)
 4297 16b8 90E0      		ldi r25,hi8(input_fx_buffer)
 4298 16ba 0E94 0000 		call calc_prepare
 4300               	.LM457:
 4301 16be 8823      		tst r24
 4302 16c0 01F4      		brne .+2
 4303 16c2 00C0      		rjmp .L206
 4304               	.L212:
 379:plot.c        **** 	{
 380:plot.c        **** 		goto gx;
 381:plot.c        **** 	}
 382:plot.c        **** 
 383:plot.c        **** 	lcd_color(LCD_RED);
 384:plot.c        **** 	for(x = min_x; x < max_x; x += pstep)
 385:plot.c        **** 	{
 386:plot.c        **** 		if(calc_solve(x, &y))
 387:plot.c        **** 		{
 388:plot.c        **** 			continue;
 389:plot.c        **** 		}
 390:plot.c        **** 
 391:plot.c        **** 		mx = (int16_t)map(x, min_x, max_x, 0.0f, 240.0f);
 392:plot.c        **** 		if(mx < 0 || mx >= 240)
 393:plot.c        **** 		{
 394:plot.c        **** 			continue;
 395:plot.c        **** 		}
 396:plot.c        **** 
 397:plot.c        **** 		my = (int16_t)map(y, min_y, max_y, 240.0f, 20.0f);
 398:plot.c        **** 		if(my < 20 || my >= 240)
 399:plot.c        **** 		{
 400:plot.c        **** 			continue;
 401:plot.c        **** 		}
 402:plot.c        **** 
 403:plot.c        **** 		lcd_pixel(mx, my);
 404:plot.c        **** 	}
 405:plot.c        **** 
 406:plot.c        **** gx:
 407:plot.c        **** 	/* Plot g(x) */
 408:plot.c        **** 	if(calc_prepare(input_gx_buffer))
 4306               	.LM458:
 4307 16c4 80E0      		ldi r24,lo8(input_gx_buffer)
 4308 16c6 90E0      		ldi r25,hi8(input_gx_buffer)
 4309 16c8 0E94 0000 		call calc_prepare
 4311               	.LM459:
 4312 16cc 8823      		tst r24
 4313 16ce 01F4      		brne .+2
 4314 16d0 00C0      		rjmp .L216
 4315               	.L198:
 4316               	/* epilogue start */
 409:plot.c        **** 	{
 410:plot.c        **** 		return;
 411:plot.c        **** 	}
 412:plot.c        **** 
 413:plot.c        **** 	lcd_color(LCD_GREEN);
 414:plot.c        **** 	for(x = min_x; x < max_x; x += pstep)
 415:plot.c        **** 	{
 416:plot.c        **** 		if(calc_solve(x, &y))
 417:plot.c        **** 		{
 418:plot.c        **** 			continue;
 419:plot.c        **** 		}
 420:plot.c        **** 
 421:plot.c        **** 		mx = (int16_t)map(x, min_x, max_x, 0.0f, 240.0f);
 422:plot.c        **** 		if(mx < 0 || mx >= 240)
 423:plot.c        **** 		{
 424:plot.c        **** 			continue;
 425:plot.c        **** 		}
 426:plot.c        **** 
 427:plot.c        **** 		my = (int16_t)map(y, min_y, max_y, 240.0f, 20.0f);
 428:plot.c        **** 		if(my < 20 || my >= 240)
 429:plot.c        **** 		{
 430:plot.c        **** 			continue;
 431:plot.c        **** 		}
 432:plot.c        **** 
 433:plot.c        **** 		lcd_pixel(mx, my);
 434:plot.c        **** 	}
 435:plot.c        **** }
 4318               	.LM460:
 4319 16d2 6A96      		adiw r28,26
 4320 16d4 0FB6      		in __tmp_reg__,__SREG__
 4321 16d6 F894      		cli
 4322 16d8 DEBF      		out __SP_H__,r29
 4323 16da 0FBE      		out __SREG__,__tmp_reg__
 4324 16dc CDBF      		out __SP_L__,r28
 4325 16de DF91      		pop r29
 4326 16e0 CF91      		pop r28
 4327 16e2 1F91      		pop r17
 4328 16e4 0F91      		pop r16
 4329 16e6 FF90      		pop r15
 4330 16e8 EF90      		pop r14
 4331 16ea DF90      		pop r13
 4332 16ec CF90      		pop r12
 4333 16ee BF90      		pop r11
 4334 16f0 AF90      		pop r10
 4335 16f2 9F90      		pop r9
 4336 16f4 8F90      		pop r8
 4337 16f6 7F90      		pop r7
 4338 16f8 6F90      		pop r6
 4339 16fa 5F90      		pop r5
 4340 16fc 4F90      		pop r4
 4341 16fe 3F90      		pop r3
 4342 1700 2F90      		pop r2
 4343 1702 0895      		ret
 4344               	.L200:
 4345               	.LBB116:
 4346               	.LBB107:
 4347               	.LBB108:
 291:plot.c        **** }
 4349               	.LM461:
 4350 1704 B801      		movw r22,r16
 4351 1706 C701      		movw r24,r14
 4352 1708 272F      		mov r18,r23
 4353 170a 302F      		mov r19,r16
 4354 170c 492F      		mov r20,r25
 4355 170e 5E2D      		mov r21,r14
 4356 1710 AD82      		std Y+5,r10
 4357 1712 BE82      		std Y+6,r11
 4358 1714 CF82      		std Y+7,r12
 4359 1716 D886      		std Y+8,r13
 4360 1718 6D81      		ldd r22,Y+5
 4361 171a 7E81      		ldd r23,Y+6
 4362 171c 8F81      		ldd r24,Y+7
 4363 171e 9885      		ldd r25,Y+8
 4364 1720 0E94 0000 		call __subsf3
 291:plot.c        **** }
 4366               	.LM462:
 4367 1724 20E0      		ldi r18,0
 4368 1726 30E0      		ldi r19,0
 4369 1728 40E7      		ldi r20,lo8(112)
 4370 172a 53E4      		ldi r21,lo8(67)
 4371 172c 6D83      		std Y+5,r22
 4372 172e 7E83      		std Y+6,r23
 4373 1730 8F83      		std Y+7,r24
 4374 1732 9887      		std Y+8,r25
 4375 1734 6D81      		ldd r22,Y+5
 4376 1736 7E81      		ldd r23,Y+6
 4377 1738 8F81      		ldd r24,Y+7
 4378 173a 9885      		ldd r25,Y+8
 4379 173c 0E94 0000 		call __mulsf3
 4380 1740 1B01      		movw r2,r22
 4381 1742 2C01      		movw r4,r24
 291:plot.c        **** }
 4383               	.LM463:
 4384 1744 B801      		movw r22,r16
 4385 1746 C701      		movw r24,r14
 4386 1748 272F      		mov r18,r23
 4387 174a 302F      		mov r19,r16
 4388 174c 492F      		mov r20,r25
 4389 174e 5E2D      		mov r21,r14
 4390 1750 9C89      		ldd r25,Y+20
 4391 1752 9D83      		std Y+5,r25
 4392 1754 AD89      		ldd r26,Y+21
 4393 1756 AE83      		std Y+6,r26
 4394 1758 BE89      		ldd r27,Y+22
 4395 175a BF83      		std Y+7,r27
 4396 175c 8F89      		ldd r24,Y+23
 4397 175e 8887      		std Y+8,r24
 4398 1760 6D81      		ldd r22,Y+5
 4399 1762 7E81      		ldd r23,Y+6
 4400 1764 8F81      		ldd r24,Y+7
 4401 1766 9885      		ldd r25,Y+8
 4402 1768 0E94 0000 		call __subsf3
 291:plot.c        **** }
 4404               	.LM464:
 4405 176c 9B01      		movw r18,r22
 4406 176e AC01      		movw r20,r24
 4407 1770 2D82      		std Y+5,r2
 4408 1772 3E82      		std Y+6,r3
 4409 1774 4F82      		std Y+7,r4
 4410 1776 5886      		std Y+8,r5
 4411 1778 6D81      		ldd r22,Y+5
 4412 177a 7E81      		ldd r23,Y+6
 4413 177c 8F81      		ldd r24,Y+7
 4414 177e 9885      		ldd r25,Y+8
 4415 1780 0E94 0000 		call __divsf3
 291:plot.c        **** }
 4417               	.LM465:
 4418 1784 20E0      		ldi r18,0
 4419 1786 30E0      		ldi r19,0
 4420 1788 A901      		movw r20,r18
 4421 178a 6D83      		std Y+5,r22
 4422 178c 7E83      		std Y+6,r23
 4423 178e 8F83      		std Y+7,r24
 4424 1790 9887      		std Y+8,r25
 4425 1792 6D81      		ldd r22,Y+5
 4426 1794 7E81      		ldd r23,Y+6
 4427 1796 8F81      		ldd r24,Y+7
 4428 1798 9885      		ldd r25,Y+8
 4429 179a 0E94 0000 		call __addsf3
 4430               	.LBE108:
 4431               	.LBE107:
 337:plot.c        **** 			lcd_vline(mx, 20, 220);
 4433               	.LM466:
 4434 179e 6D83      		std Y+5,r22
 4435 17a0 7E83      		std Y+6,r23
 4436 17a2 8F83      		std Y+7,r24
 4437 17a4 9887      		std Y+8,r25
 4438 17a6 6D81      		ldd r22,Y+5
 4439 17a8 7E81      		ldd r23,Y+6
 4440 17aa 8F81      		ldd r24,Y+7
 4441 17ac 9885      		ldd r25,Y+8
 4442 17ae 0E94 0000 		call __fixsfsi
 4443 17b2 F62F      		mov r31,r22
 4444 17b4 E72F      		mov r30,r23
 338:plot.c        **** 		}
 4446               	.LM467:
 4447 17b6 2CED      		ldi r18,lo8(-36)
 4448 17b8 30E0      		ldi r19,0
 4449 17ba 41E0      		ldi r20,lo8(1)
 4450 17bc 50E0      		ldi r21,0
 4451 17be 64E1      		ldi r22,lo8(20)
 4452 17c0 70E0      		ldi r23,0
 4453 17c2 8F2F      		mov r24,r31
 4454 17c4 9E2F      		mov r25,r30
 4455 17c6 0E94 0000 		call lcd_rect
 335:plot.c        **** 		{
 4457               	.LM468:
 4458 17ca 2985      		ldd r18,Y+9
 4459 17cc 3A85      		ldd r19,Y+10
 4460 17ce 4B85      		ldd r20,Y+11
 4461 17d0 5C85      		ldd r21,Y+12
 4462 17d2 AD82      		std Y+5,r10
 4463 17d4 BE82      		std Y+6,r11
 4464 17d6 CF82      		std Y+7,r12
 4465 17d8 D886      		std Y+8,r13
 4466 17da 6D81      		ldd r22,Y+5
 4467 17dc 7E81      		ldd r23,Y+6
 4468 17de 8F81      		ldd r24,Y+7
 4469 17e0 9885      		ldd r25,Y+8
 4470 17e2 0E94 0000 		call __addsf3
 4471 17e6 00C0      		rjmp .L217
 4472               	.L202:
 4473               	.LBE116:
 4474               	.LBB117:
 4475               	.LBB110:
 4476               	.LBB111:
 291:plot.c        **** }
 4478               	.LM469:
 4479 17e8 2D85      		ldd r18,Y+13
 4480 17ea 3989      		ldd r19,Y+17
 4481 17ec 4A89      		ldd r20,Y+18
 4482 17ee 5B89      		ldd r21,Y+19
 4483 17f0 AD82      		std Y+5,r10
 4484 17f2 BE82      		std Y+6,r11
 4485 17f4 CF82      		std Y+7,r12
 4486 17f6 D886      		std Y+8,r13
 4487 17f8 6D81      		ldd r22,Y+5
 4488 17fa 7E81      		ldd r23,Y+6
 4489 17fc 8F81      		ldd r24,Y+7
 4490 17fe 9885      		ldd r25,Y+8
 4491 1800 0E94 0000 		call __subsf3
 291:plot.c        **** }
 4493               	.LM470:
 4494 1804 20E0      		ldi r18,0
 4495 1806 30E0      		ldi r19,0
 4496 1808 4CE5      		ldi r20,lo8(92)
 4497 180a 53EC      		ldi r21,lo8(-61)
 4498 180c 6D83      		std Y+5,r22
 4499 180e 7E83      		std Y+6,r23
 4500 1810 8F83      		std Y+7,r24
 4501 1812 9887      		std Y+8,r25
 4502 1814 6D81      		ldd r22,Y+5
 4503 1816 7E81      		ldd r23,Y+6
 4504 1818 8F81      		ldd r24,Y+7
 4505 181a 9885      		ldd r25,Y+8
 4506 181c 0E94 0000 		call __mulsf3
 4507 1820 1B01      		movw r2,r22
 4508 1822 2C01      		movw r4,r24
 291:plot.c        **** }
 4510               	.LM471:
 4511 1824 2D85      		ldd r18,Y+13
 4512 1826 3989      		ldd r19,Y+17
 4513 1828 4A89      		ldd r20,Y+18
 4514 182a 5B89      		ldd r21,Y+19
 4515 182c 6D82      		std Y+5,r6
 4516 182e 7E82      		std Y+6,r7
 4517 1830 8F82      		std Y+7,r8
 4518 1832 9886      		std Y+8,r9
 4519 1834 6D81      		ldd r22,Y+5
 4520 1836 7E81      		ldd r23,Y+6
 4521 1838 8F81      		ldd r24,Y+7
 4522 183a 9885      		ldd r25,Y+8
 4523 183c 0E94 0000 		call __subsf3
 291:plot.c        **** }
 4525               	.LM472:
 4526 1840 9B01      		movw r18,r22
 4527 1842 AC01      		movw r20,r24
 4528 1844 2D82      		std Y+5,r2
 4529 1846 3E82      		std Y+6,r3
 4530 1848 4F82      		std Y+7,r4
 4531 184a 5886      		std Y+8,r5
 4532 184c 6D81      		ldd r22,Y+5
 4533 184e 7E81      		ldd r23,Y+6
 4534 1850 8F81      		ldd r24,Y+7
 4535 1852 9885      		ldd r25,Y+8
 4536 1854 0E94 0000 		call __divsf3
 291:plot.c        **** }
 4538               	.LM473:
 4539 1858 20E0      		ldi r18,0
 4540 185a 30E0      		ldi r19,0
 4541 185c 40E7      		ldi r20,lo8(112)
 4542 185e 53E4      		ldi r21,lo8(67)
 4543 1860 6D83      		std Y+5,r22
 4544 1862 7E83      		std Y+6,r23
 4545 1864 8F83      		std Y+7,r24
 4546 1866 9887      		std Y+8,r25
 4547 1868 6D81      		ldd r22,Y+5
 4548 186a 7E81      		ldd r23,Y+6
 4549 186c 8F81      		ldd r24,Y+7
 4550 186e 9885      		ldd r25,Y+8
 4551 1870 0E94 0000 		call __addsf3
 4552               	.LBE111:
 4553               	.LBE110:
 348:plot.c        **** 			lcd_hline(0, my, 240);
 4555               	.LM474:
 4556 1874 6D83      		std Y+5,r22
 4557 1876 7E83      		std Y+6,r23
 4558 1878 8F83      		std Y+7,r24
 4559 187a 9887      		std Y+8,r25
 4560 187c 6D81      		ldd r22,Y+5
 4561 187e 7E81      		ldd r23,Y+6
 4562 1880 8F81      		ldd r24,Y+7
 4563 1882 9885      		ldd r25,Y+8
 4564 1884 0E94 0000 		call __fixsfsi
 349:plot.c        **** 		}
 4566               	.LM475:
 4567 1888 21E0      		ldi r18,lo8(1)
 4568 188a 30E0      		ldi r19,0
 4569 188c 40EF      		ldi r20,lo8(-16)
 4570 188e 50E0      		ldi r21,0
 4571 1890 90E0      		ldi r25,0
 4572 1892 80E0      		ldi r24,0
 4573 1894 0E94 0000 		call lcd_rect
 346:plot.c        **** 		{
 4575               	.LM476:
 4576 1898 2985      		ldd r18,Y+9
 4577 189a 3A85      		ldd r19,Y+10
 4578 189c 4B85      		ldd r20,Y+11
 4579 189e 5C85      		ldd r21,Y+12
 4580 18a0 AD82      		std Y+5,r10
 4581 18a2 BE82      		std Y+6,r11
 4582 18a4 CF82      		std Y+7,r12
 4583 18a6 D886      		std Y+8,r13
 4584 18a8 6D81      		ldd r22,Y+5
 4585 18aa 7E81      		ldd r23,Y+6
 4586 18ac 8F81      		ldd r24,Y+7
 4587 18ae 9885      		ldd r25,Y+8
 4588 18b0 0E94 0000 		call __addsf3
 4589 18b4 00C0      		rjmp .L218
 4590               	.L206:
 4591               	.LBE117:
 383:plot.c        **** 	for(x = min_x; x < max_x; x += pstep)
 4593               	.LM477:
 4594 18b6 80E0      		ldi r24,0
 4595 18b8 98EF      		ldi r25,lo8(-8)
 4596 18ba 9093 0000 		sts _color+1,r25
 4597 18be 8093 0000 		sts _color,r24
 384:plot.c        **** 	{
 4599               	.LM478:
 4600 18c2 A12E      		mov r10,r17
 4601 18c4 B02E      		mov r11,r16
 4602 18c6 CF2C      		mov r12,r15
 4603 18c8 DE2C      		mov r13,r14
 4604               	.L209:
 384:plot.c        **** 	{
 4606               	.LM479:
 4607 18ca 2C89      		ldd r18,Y+20
 4608 18cc 3D89      		ldd r19,Y+21
 4609 18ce 4E89      		ldd r20,Y+22
 4610 18d0 5F89      		ldd r21,Y+23
 4611 18d2 AD82      		std Y+5,r10
 4612 18d4 BE82      		std Y+6,r11
 4613 18d6 CF82      		std Y+7,r12
 4614 18d8 D886      		std Y+8,r13
 4615 18da 6D81      		ldd r22,Y+5
 4616 18dc 7E81      		ldd r23,Y+6
 4617 18de 8F81      		ldd r24,Y+7
 4618 18e0 9885      		ldd r25,Y+8
 4619 18e2 0E94 0000 		call __ltsf2
 4620 18e6 87FF      		sbrs r24,7
 4621 18e8 00C0      		rjmp .L212
 386:plot.c        **** 		{
 4623               	.LM480:
 4624 18ea AE01      		movw r20,r28
 4625 18ec 4F5F      		subi r20,-1
 4626 18ee 5F4F      		sbci r21,-1
 4627 18f0 AD82      		std Y+5,r10
 4628 18f2 BE82      		std Y+6,r11
 4629 18f4 CF82      		std Y+7,r12
 4630 18f6 D886      		std Y+8,r13
 4631 18f8 6D81      		ldd r22,Y+5
 4632 18fa 7E81      		ldd r23,Y+6
 4633 18fc 8F81      		ldd r24,Y+7
 4634 18fe 9885      		ldd r25,Y+8
 4635 1900 0E94 0000 		call calc_solve
 386:plot.c        **** 		{
 4637               	.LM481:
 4638 1904 8111      		cpse r24,__zero_reg__
 4639 1906 00C0      		rjmp .L210
 4640               	.LBB118:
 4641               	.LBB119:
 291:plot.c        **** }
 4643               	.LM482:
 4644 1908 B801      		movw r22,r16
 4645 190a C701      		movw r24,r14
 4646 190c 272F      		mov r18,r23
 4647 190e 302F      		mov r19,r16
 4648 1910 492F      		mov r20,r25
 4649 1912 5E2D      		mov r21,r14
 4650 1914 AD82      		std Y+5,r10
 4651 1916 BE82      		std Y+6,r11
 4652 1918 CF82      		std Y+7,r12
 4653 191a D886      		std Y+8,r13
 4654 191c 6D81      		ldd r22,Y+5
 4655 191e 7E81      		ldd r23,Y+6
 4656 1920 8F81      		ldd r24,Y+7
 4657 1922 9885      		ldd r25,Y+8
 4658 1924 0E94 0000 		call __subsf3
 291:plot.c        **** }
 4660               	.LM483:
 4661 1928 20E0      		ldi r18,0
 4662 192a 30E0      		ldi r19,0
 4663 192c 40E7      		ldi r20,lo8(112)
 4664 192e 53E4      		ldi r21,lo8(67)
 4665 1930 6D83      		std Y+5,r22
 4666 1932 7E83      		std Y+6,r23
 4667 1934 8F83      		std Y+7,r24
 4668 1936 9887      		std Y+8,r25
 4669 1938 6D81      		ldd r22,Y+5
 4670 193a 7E81      		ldd r23,Y+6
 4671 193c 8F81      		ldd r24,Y+7
 4672 193e 9885      		ldd r25,Y+8
 4673 1940 0E94 0000 		call __mulsf3
 291:plot.c        **** }
 4675               	.LM484:
 4676 1944 2985      		ldd r18,Y+9
 4677 1946 388D      		ldd r19,Y+24
 4678 1948 498D      		ldd r20,Y+25
 4679 194a 5A8D      		ldd r21,Y+26
 4680 194c 6D83      		std Y+5,r22
 4681 194e 7E83      		std Y+6,r23
 4682 1950 8F83      		std Y+7,r24
 4683 1952 9887      		std Y+8,r25
 4684 1954 6D81      		ldd r22,Y+5
 4685 1956 7E81      		ldd r23,Y+6
 4686 1958 8F81      		ldd r24,Y+7
 4687 195a 9885      		ldd r25,Y+8
 4688 195c 0E94 0000 		call __divsf3
 291:plot.c        **** }
 4690               	.LM485:
 4691 1960 20E0      		ldi r18,0
 4692 1962 30E0      		ldi r19,0
 4693 1964 A901      		movw r20,r18
 4694 1966 6D83      		std Y+5,r22
 4695 1968 7E83      		std Y+6,r23
 4696 196a 8F83      		std Y+7,r24
 4697 196c 9887      		std Y+8,r25
 4698 196e 6D81      		ldd r22,Y+5
 4699 1970 7E81      		ldd r23,Y+6
 4700 1972 8F81      		ldd r24,Y+7
 4701 1974 9885      		ldd r25,Y+8
 4702 1976 0E94 0000 		call __addsf3
 4703               	.LBE119:
 4704               	.LBE118:
 391:plot.c        **** 		if(mx < 0 || mx >= 240)
 4706               	.LM486:
 4707 197a 6D83      		std Y+5,r22
 4708 197c 7E83      		std Y+6,r23
 4709 197e 8F83      		std Y+7,r24
 4710 1980 9887      		std Y+8,r25
 4711 1982 6D81      		ldd r22,Y+5
 4712 1984 7E81      		ldd r23,Y+6
 4713 1986 8F81      		ldd r24,Y+7
 4714 1988 9885      		ldd r25,Y+8
 4715 198a 0E94 0000 		call __fixsfsi
 4716 198e 2B01      		movw r4,r22
 392:plot.c        **** 		{
 4718               	.LM487:
 4719 1990 90EF      		ldi r25,-16
 4720 1992 4916      		cp r4,r25
 4721 1994 5104      		cpc r5,__zero_reg__
 4722 1996 00F0      		brlo .+2
 4723 1998 00C0      		rjmp .L210
 4724               	.LBB120:
 4725               	.LBB121:
 291:plot.c        **** }
 4727               	.LM488:
 4728 199a 2D85      		ldd r18,Y+13
 4729 199c 3989      		ldd r19,Y+17
 4730 199e 4A89      		ldd r20,Y+18
 4731 19a0 5B89      		ldd r21,Y+19
 4732 19a2 6981      		ldd r22,Y+1
 4733 19a4 7A81      		ldd r23,Y+2
 4734 19a6 8B81      		ldd r24,Y+3
 4735 19a8 9C81      		ldd r25,Y+4
 4736 19aa 0E94 0000 		call __subsf3
 291:plot.c        **** }
 4738               	.LM489:
 4739 19ae 20E0      		ldi r18,0
 4740 19b0 30E0      		ldi r19,0
 4741 19b2 4CE5      		ldi r20,lo8(92)
 4742 19b4 53EC      		ldi r21,lo8(-61)
 4743 19b6 6D83      		std Y+5,r22
 4744 19b8 7E83      		std Y+6,r23
 4745 19ba 8F83      		std Y+7,r24
 4746 19bc 9887      		std Y+8,r25
 4747 19be 6D81      		ldd r22,Y+5
 4748 19c0 7E81      		ldd r23,Y+6
 4749 19c2 8F81      		ldd r24,Y+7
 4750 19c4 9885      		ldd r25,Y+8
 4751 19c6 0E94 0000 		call __mulsf3
 291:plot.c        **** }
 4753               	.LM490:
 4754 19ca 9101      		movw r18,r2
 4755 19cc A401      		movw r20,r8
 4756 19ce 6D83      		std Y+5,r22
 4757 19d0 7E83      		std Y+6,r23
 4758 19d2 8F83      		std Y+7,r24
 4759 19d4 9887      		std Y+8,r25
 4760 19d6 6D81      		ldd r22,Y+5
 4761 19d8 7E81      		ldd r23,Y+6
 4762 19da 8F81      		ldd r24,Y+7
 4763 19dc 9885      		ldd r25,Y+8
 4764 19de 0E94 0000 		call __divsf3
 291:plot.c        **** }
 4766               	.LM491:
 4767 19e2 20E0      		ldi r18,0
 4768 19e4 30E0      		ldi r19,0
 4769 19e6 40E7      		ldi r20,lo8(112)
 4770 19e8 53E4      		ldi r21,lo8(67)
 4771 19ea 6D83      		std Y+5,r22
 4772 19ec 7E83      		std Y+6,r23
 4773 19ee 8F83      		std Y+7,r24
 4774 19f0 9887      		std Y+8,r25
 4775 19f2 6D81      		ldd r22,Y+5
 4776 19f4 7E81      		ldd r23,Y+6
 4777 19f6 8F81      		ldd r24,Y+7
 4778 19f8 9885      		ldd r25,Y+8
 4779 19fa 0E94 0000 		call __addsf3
 4780               	.LBE121:
 4781               	.LBE120:
 397:plot.c        **** 		if(my < 20 || my >= 240)
 4783               	.LM492:
 4784 19fe 6D83      		std Y+5,r22
 4785 1a00 7E83      		std Y+6,r23
 4786 1a02 8F83      		std Y+7,r24
 4787 1a04 9887      		std Y+8,r25
 4788 1a06 6D81      		ldd r22,Y+5
 4789 1a08 7E81      		ldd r23,Y+6
 4790 1a0a 8F81      		ldd r24,Y+7
 4791 1a0c 9885      		ldd r25,Y+8
 4792 1a0e 0E94 0000 		call __fixsfsi
 398:plot.c        **** 		{
 4794               	.LM493:
 4795 1a12 9B01      		movw r18,r22
 4796 1a14 2451      		subi r18,20
 4797 1a16 3109      		sbc r19,__zero_reg__
 398:plot.c        **** 		{
 4799               	.LM494:
 4800 1a18 2C3D      		cpi r18,-36
 4801 1a1a 3105      		cpc r19,__zero_reg__
 4802 1a1c 00F4      		brsh .L210
 403:plot.c        **** 	}
 4804               	.LM495:
 4805 1a1e C201      		movw r24,r4
 4806 1a20 0E94 0000 		call lcd_pixel
 4807               	.L210:
 384:plot.c        **** 	{
 4809               	.LM496:
 4810 1a24 2091 0000 		lds r18,pstep
 4811 1a28 3091 0000 		lds r19,pstep+1
 4812 1a2c 4091 0000 		lds r20,pstep+2
 4813 1a30 5091 0000 		lds r21,pstep+3
 4814 1a34 AD82      		std Y+5,r10
 4815 1a36 BE82      		std Y+6,r11
 4816 1a38 CF82      		std Y+7,r12
 4817 1a3a D886      		std Y+8,r13
 4818 1a3c 6D81      		ldd r22,Y+5
 4819 1a3e 7E81      		ldd r23,Y+6
 4820 1a40 8F81      		ldd r24,Y+7
 4821 1a42 9885      		ldd r25,Y+8
 4822 1a44 0E94 0000 		call __addsf3
 4823 1a48 5B01      		movw r10,r22
 4824 1a4a 6C01      		movw r12,r24
 4825 1a4c 00C0      		rjmp .L209
 4826               	.L216:
 413:plot.c        **** 	for(x = min_x; x < max_x; x += pstep)
 4828               	.LM497:
 4829 1a4e 80EE      		ldi r24,lo8(-32)
 4830 1a50 97E0      		ldi r25,lo8(7)
 4831 1a52 9093 0000 		sts _color+1,r25
 4832 1a56 8093 0000 		sts _color,r24
 414:plot.c        **** 	{
 4834               	.LM498:
 4835 1a5a A12E      		mov r10,r17
 4836 1a5c B02E      		mov r11,r16
 4837 1a5e CF2C      		mov r12,r15
 4838 1a60 DE2C      		mov r13,r14
 4839               	.L213:
 414:plot.c        **** 	{
 4841               	.LM499:
 4842 1a62 2C89      		ldd r18,Y+20
 4843 1a64 3D89      		ldd r19,Y+21
 4844 1a66 4E89      		ldd r20,Y+22
 4845 1a68 5F89      		ldd r21,Y+23
 4846 1a6a AD82      		std Y+5,r10
 4847 1a6c BE82      		std Y+6,r11
 4848 1a6e CF82      		std Y+7,r12
 4849 1a70 D886      		std Y+8,r13
 4850 1a72 6D81      		ldd r22,Y+5
 4851 1a74 7E81      		ldd r23,Y+6
 4852 1a76 8F81      		ldd r24,Y+7
 4853 1a78 9885      		ldd r25,Y+8
 4854 1a7a 0E94 0000 		call __ltsf2
 4855 1a7e 87FF      		sbrs r24,7
 4856 1a80 00C0      		rjmp .L198
 416:plot.c        **** 		{
 4858               	.LM500:
 4859 1a82 AE01      		movw r20,r28
 4860 1a84 4F5F      		subi r20,-1
 4861 1a86 5F4F      		sbci r21,-1
 4862 1a88 AD82      		std Y+5,r10
 4863 1a8a BE82      		std Y+6,r11
 4864 1a8c CF82      		std Y+7,r12
 4865 1a8e D886      		std Y+8,r13
 4866 1a90 6D81      		ldd r22,Y+5
 4867 1a92 7E81      		ldd r23,Y+6
 4868 1a94 8F81      		ldd r24,Y+7
 4869 1a96 9885      		ldd r25,Y+8
 4870 1a98 0E94 0000 		call calc_solve
 416:plot.c        **** 		{
 4872               	.LM501:
 4873 1a9c 8111      		cpse r24,__zero_reg__
 4874 1a9e 00C0      		rjmp .L214
 4875               	.LBB122:
 4876               	.LBB123:
 291:plot.c        **** }
 4878               	.LM502:
 4879 1aa0 B801      		movw r22,r16
 4880 1aa2 C701      		movw r24,r14
 4881 1aa4 272F      		mov r18,r23
 4882 1aa6 302F      		mov r19,r16
 4883 1aa8 492F      		mov r20,r25
 4884 1aaa 5E2D      		mov r21,r14
 4885 1aac AD82      		std Y+5,r10
 4886 1aae BE82      		std Y+6,r11
 4887 1ab0 CF82      		std Y+7,r12
 4888 1ab2 D886      		std Y+8,r13
 4889 1ab4 6D81      		ldd r22,Y+5
 4890 1ab6 7E81      		ldd r23,Y+6
 4891 1ab8 8F81      		ldd r24,Y+7
 4892 1aba 9885      		ldd r25,Y+8
 4893 1abc 0E94 0000 		call __subsf3
 291:plot.c        **** }
 4895               	.LM503:
 4896 1ac0 20E0      		ldi r18,0
 4897 1ac2 30E0      		ldi r19,0
 4898 1ac4 40E7      		ldi r20,lo8(112)
 4899 1ac6 53E4      		ldi r21,lo8(67)
 4900 1ac8 6D83      		std Y+5,r22
 4901 1aca 7E83      		std Y+6,r23
 4902 1acc 8F83      		std Y+7,r24
 4903 1ace 9887      		std Y+8,r25
 4904 1ad0 6D81      		ldd r22,Y+5
 4905 1ad2 7E81      		ldd r23,Y+6
 4906 1ad4 8F81      		ldd r24,Y+7
 4907 1ad6 9885      		ldd r25,Y+8
 4908 1ad8 0E94 0000 		call __mulsf3
 291:plot.c        **** }
 4910               	.LM504:
 4911 1adc 2985      		ldd r18,Y+9
 4912 1ade 388D      		ldd r19,Y+24
 4913 1ae0 498D      		ldd r20,Y+25
 4914 1ae2 5A8D      		ldd r21,Y+26
 4915 1ae4 6D83      		std Y+5,r22
 4916 1ae6 7E83      		std Y+6,r23
 4917 1ae8 8F83      		std Y+7,r24
 4918 1aea 9887      		std Y+8,r25
 4919 1aec 6D81      		ldd r22,Y+5
 4920 1aee 7E81      		ldd r23,Y+6
 4921 1af0 8F81      		ldd r24,Y+7
 4922 1af2 9885      		ldd r25,Y+8
 4923 1af4 0E94 0000 		call __divsf3
 291:plot.c        **** }
 4925               	.LM505:
 4926 1af8 20E0      		ldi r18,0
 4927 1afa 30E0      		ldi r19,0
 4928 1afc A901      		movw r20,r18
 4929 1afe 6D83      		std Y+5,r22
 4930 1b00 7E83      		std Y+6,r23
 4931 1b02 8F83      		std Y+7,r24
 4932 1b04 9887      		std Y+8,r25
 4933 1b06 6D81      		ldd r22,Y+5
 4934 1b08 7E81      		ldd r23,Y+6
 4935 1b0a 8F81      		ldd r24,Y+7
 4936 1b0c 9885      		ldd r25,Y+8
 4937 1b0e 0E94 0000 		call __addsf3
 4938               	.LBE123:
 4939               	.LBE122:
 421:plot.c        **** 		if(mx < 0 || mx >= 240)
 4941               	.LM506:
 4942 1b12 6D83      		std Y+5,r22
 4943 1b14 7E83      		std Y+6,r23
 4944 1b16 8F83      		std Y+7,r24
 4945 1b18 9887      		std Y+8,r25
 4946 1b1a 6D81      		ldd r22,Y+5
 4947 1b1c 7E81      		ldd r23,Y+6
 4948 1b1e 8F81      		ldd r24,Y+7
 4949 1b20 9885      		ldd r25,Y+8
 4950 1b22 0E94 0000 		call __fixsfsi
 4951 1b26 2B01      		movw r4,r22
 422:plot.c        **** 		{
 4953               	.LM507:
 4954 1b28 603F      		cpi r22,-16
 4955 1b2a 7105      		cpc r23,__zero_reg__
 4956 1b2c 00F0      		brlo .+2
 4957 1b2e 00C0      		rjmp .L214
 4958               	.LBB124:
 4959               	.LBB125:
 291:plot.c        **** }
 4961               	.LM508:
 4962 1b30 2D85      		ldd r18,Y+13
 4963 1b32 3989      		ldd r19,Y+17
 4964 1b34 4A89      		ldd r20,Y+18
 4965 1b36 5B89      		ldd r21,Y+19
 4966 1b38 6981      		ldd r22,Y+1
 4967 1b3a 7A81      		ldd r23,Y+2
 4968 1b3c 8B81      		ldd r24,Y+3
 4969 1b3e 9C81      		ldd r25,Y+4
 4970 1b40 0E94 0000 		call __subsf3
 291:plot.c        **** }
 4972               	.LM509:
 4973 1b44 20E0      		ldi r18,0
 4974 1b46 30E0      		ldi r19,0
 4975 1b48 4CE5      		ldi r20,lo8(92)
 4976 1b4a 53EC      		ldi r21,lo8(-61)
 4977 1b4c 6D83      		std Y+5,r22
 4978 1b4e 7E83      		std Y+6,r23
 4979 1b50 8F83      		std Y+7,r24
 4980 1b52 9887      		std Y+8,r25
 4981 1b54 6D81      		ldd r22,Y+5
 4982 1b56 7E81      		ldd r23,Y+6
 4983 1b58 8F81      		ldd r24,Y+7
 4984 1b5a 9885      		ldd r25,Y+8
 4985 1b5c 0E94 0000 		call __mulsf3
 291:plot.c        **** }
 4987               	.LM510:
 4988 1b60 9101      		movw r18,r2
 4989 1b62 A401      		movw r20,r8
 4990 1b64 6D83      		std Y+5,r22
 4991 1b66 7E83      		std Y+6,r23
 4992 1b68 8F83      		std Y+7,r24
 4993 1b6a 9887      		std Y+8,r25
 4994 1b6c 6D81      		ldd r22,Y+5
 4995 1b6e 7E81      		ldd r23,Y+6
 4996 1b70 8F81      		ldd r24,Y+7
 4997 1b72 9885      		ldd r25,Y+8
 4998 1b74 0E94 0000 		call __divsf3
 291:plot.c        **** }
 5000               	.LM511:
 5001 1b78 20E0      		ldi r18,0
 5002 1b7a 30E0      		ldi r19,0
 5003 1b7c 40E7      		ldi r20,lo8(112)
 5004 1b7e 53E4      		ldi r21,lo8(67)
 5005 1b80 6D83      		std Y+5,r22
 5006 1b82 7E83      		std Y+6,r23
 5007 1b84 8F83      		std Y+7,r24
 5008 1b86 9887      		std Y+8,r25
 5009 1b88 6D81      		ldd r22,Y+5
 5010 1b8a 7E81      		ldd r23,Y+6
 5011 1b8c 8F81      		ldd r24,Y+7
 5012 1b8e 9885      		ldd r25,Y+8
 5013 1b90 0E94 0000 		call __addsf3
 5014               	.LBE125:
 5015               	.LBE124:
 427:plot.c        **** 		if(my < 20 || my >= 240)
 5017               	.LM512:
 5018 1b94 6D83      		std Y+5,r22
 5019 1b96 7E83      		std Y+6,r23
 5020 1b98 8F83      		std Y+7,r24
 5021 1b9a 9887      		std Y+8,r25
 5022 1b9c 6D81      		ldd r22,Y+5
 5023 1b9e 7E81      		ldd r23,Y+6
 5024 1ba0 8F81      		ldd r24,Y+7
 5025 1ba2 9885      		ldd r25,Y+8
 5026 1ba4 0E94 0000 		call __fixsfsi
 428:plot.c        **** 		{
 5028               	.LM513:
 5029 1ba8 9B01      		movw r18,r22
 5030 1baa 2451      		subi r18,20
 5031 1bac 3109      		sbc r19,__zero_reg__
 428:plot.c        **** 		{
 5033               	.LM514:
 5034 1bae 2C3D      		cpi r18,-36
 5035 1bb0 3105      		cpc r19,__zero_reg__
 5036 1bb2 00F4      		brsh .L214
 433:plot.c        **** 	}
 5038               	.LM515:
 5039 1bb4 C201      		movw r24,r4
 5040 1bb6 0E94 0000 		call lcd_pixel
 5041               	.L214:
 414:plot.c        **** 	{
 5043               	.LM516:
 5044 1bba 2091 0000 		lds r18,pstep
 5045 1bbe 3091 0000 		lds r19,pstep+1
 5046 1bc2 4091 0000 		lds r20,pstep+2
 5047 1bc6 5091 0000 		lds r21,pstep+3
 5048 1bca AD82      		std Y+5,r10
 5049 1bcc BE82      		std Y+6,r11
 5050 1bce CF82      		std Y+7,r12
 5051 1bd0 D886      		std Y+8,r13
 5052 1bd2 6D81      		ldd r22,Y+5
 5053 1bd4 7E81      		ldd r23,Y+6
 5054 1bd6 8F81      		ldd r24,Y+7
 5055 1bd8 9885      		ldd r25,Y+8
 5056 1bda 0E94 0000 		call __addsf3
 5057 1bde 5B01      		movw r10,r22
 5058 1be0 6C01      		movw r12,r24
 5059 1be2 00C0      		rjmp .L213
 5064               	.Lscope21:
 5068               	form_table_input_button_ok_click:
 5070               	.Ltext15:
 187:table.c       **** 
 188:table.c       **** static void form_table_input_button_ok_click(void)
 189:table.c       **** {
 5072               	.LM517:
 5073               	.LFBB22:
 5074 1be4 0F93      		push r16
 5075 1be6 1F93      		push r17
 5076 1be8 CF93      		push r28
 5077 1bea DF93      		push r29
 5078 1bec 00D0      		rcall .
 5079 1bee 00D0      		rcall .
 5080 1bf0 00D0      		rcall .
 5081 1bf2 CDB7      		in r28,__SP_L__
 5082 1bf4 DEB7      		in r29,__SP_H__
 5083               	/* prologue: function */
 5084               	/* frame size = 6 */
 5085               	/* stack size = 10 */
 5086               	.L__stack_usage = 10
 190:table.c       **** 	uint8_t e;
 191:table.c       **** 	tx = atof(input_x_buffer);
 5088               	.LM518:
 5089 1bf6 80E0      		ldi r24,lo8(input_x_buffer)
 5090 1bf8 90E0      		ldi r25,hi8(input_x_buffer)
 5091 1bfa 0E94 0000 		call atof
 5092 1bfe 8B01      		movw r16,r22
 5093 1c00 8E83      		std Y+6,r24
 5094 1c02 9D83      		std Y+5,r25
 5096               	.LM519:
 5097 1c04 AB01      		movw r20,r22
 5098 1c06 BC01      		movw r22,r24
 5099 1c08 4093 0000 		sts tx,r20
 5100 1c0c 5093 0000 		sts tx+1,r21
 5101 1c10 6093 0000 		sts tx+2,r22
 5102 1c14 7093 0000 		sts tx+3,r23
 192:table.c       **** 	if((e = calc_prepare(input_fx_buffer)))
 5104               	.LM520:
 5105 1c18 80E0      		ldi r24,lo8(input_fx_buffer)
 5106 1c1a 90E0      		ldi r25,hi8(input_fx_buffer)
 5107 1c1c 0E94 0000 		call calc_prepare
 5109               	.LM521:
 5110 1c20 8823      		tst r24
 5111 1c22 01F0      		breq .L220
 5112               	.L222:
 5113               	/* epilogue start */
 193:table.c       **** 	{
 194:table.c       **** 		print_error(e);
 195:table.c       **** 		return;
 196:table.c       **** 	}
 197:table.c       **** 
 198:table.c       **** 	if((e = calc_solve(tx, &ty)))
 199:table.c       **** 	{
 200:table.c       **** 		print_error(e);
 201:table.c       **** 		return;
 202:table.c       **** 	}
 203:table.c       **** 
 204:table.c       **** 	print_result();
 205:table.c       **** }
 5115               	.LM522:
 5116 1c24 2696      		adiw r28,6
 5117 1c26 0FB6      		in __tmp_reg__,__SREG__
 5118 1c28 F894      		cli
 5119 1c2a DEBF      		out __SP_H__,r29
 5120 1c2c 0FBE      		out __SREG__,__tmp_reg__
 5121 1c2e CDBF      		out __SP_L__,r28
 5122 1c30 DF91      		pop r29
 5123 1c32 CF91      		pop r28
 5124 1c34 1F91      		pop r17
 5125 1c36 0F91      		pop r16
 5126               	.LBB128:
 5127               	.LBB129:
 200:table.c       **** 		return;
 5129               	.LM523:
 5130 1c38 0C94 0000 		jmp print_error
 5131               	.L220:
 198:table.c       **** 	{
 5133               	.LM524:
 5134 1c3c 40E0      		ldi r20,lo8(ty)
 5135 1c3e 50E0      		ldi r21,hi8(ty)
 5136 1c40 0983      		std Y+1,r16
 5137 1c42 1A83      		std Y+2,r17
 5138 1c44 8E81      		ldd r24,Y+6
 5139 1c46 8B83      		std Y+3,r24
 5140 1c48 8D81      		ldd r24,Y+5
 5141 1c4a 8C83      		std Y+4,r24
 5142 1c4c 6981      		ldd r22,Y+1
 5143 1c4e 7A81      		ldd r23,Y+2
 5144 1c50 8B81      		ldd r24,Y+3
 5145 1c52 9C81      		ldd r25,Y+4
 5146 1c54 0E94 0000 		call calc_solve
 198:table.c       **** 	{
 5148               	.LM525:
 5149 1c58 8111      		cpse r24,__zero_reg__
 5150 1c5a 00C0      		rjmp .L222
 5151               	/* epilogue start */
 5152               	.LBE129:
 5153               	.LBE128:
 5155               	.LM526:
 5156 1c5c 2696      		adiw r28,6
 5157 1c5e 0FB6      		in __tmp_reg__,__SREG__
 5158 1c60 F894      		cli
 5159 1c62 DEBF      		out __SP_H__,r29
 5160 1c64 0FBE      		out __SREG__,__tmp_reg__
 5161 1c66 CDBF      		out __SP_L__,r28
 5162 1c68 DF91      		pop r29
 5163 1c6a CF91      		pop r28
 5164 1c6c 1F91      		pop r17
 5165 1c6e 0F91      		pop r16
 5166               	.LBB131:
 5167               	.LBB130:
 204:table.c       **** }
 5169               	.LM527:
 5170 1c70 0C94 0000 		jmp print_result
 5171               	.LBE130:
 5172               	.LBE131:
 5183               	.Lscope22:
 5190               	input_render:
 5192               	.Ltext16:
 219:form.c        **** 	}
 220:form.c        **** }
 221:form.c        **** 
 222:form.c        **** static void button_render(Button *b, uint8_t sel)
 223:form.c        **** {
 224:form.c        **** 	int16_t x, y;
 225:form.c        **** 	y = 20 + b->Y;
 226:form.c        **** 
 227:form.c        **** 	lcd_color(LCD_WHITE);
 228:form.c        **** 	lcd_rect(b->X, y, b->W, b->H);
 229:form.c        **** 
 230:form.c        **** 	if(sel)
 231:form.c        **** 	{
 232:form.c        **** 		lcd_color(LCD_RED);
 233:form.c        **** 		lcd_rect_border2(b->X, y, b->W, b->H);
 234:form.c        **** 	}
 235:form.c        **** 	else
 236:form.c        **** 	{
 237:form.c        **** 		lcd_color(LCD_BLACK);
 238:form.c        **** 		lcd_rect_border(b->X, y, b->W, b->H);
 239:form.c        **** 	}
 240:form.c        **** 
 241:form.c        **** 	lcd_color(LCD_BLACK);
 242:form.c        **** 	if(b->Flags & FLAG_TEXT_PROGMEM)
 243:form.c        **** 	{
 244:form.c        **** 		x = b->X + b->W / 2 - lcd_string_width_P(b->Text.Flash) / 2;
 245:form.c        **** 		lcd_string_P(x, y + b->H / 2 - 5, b->Text.Flash);
 246:form.c        **** 	}
 247:form.c        **** 	else
 248:form.c        **** 	{
 249:form.c        **** 		x = b->X + b->W / 2 - lcd_string_width(b->Text.RAM) / 2;
 250:form.c        **** 		lcd_string(x, y, b->Text.RAM);
 251:form.c        **** 	}
 252:form.c        **** }
 253:form.c        **** 
 254:form.c        **** static void input_render(Input *i, uint8_t sel)
 255:form.c        **** {
 5194               	.LM528:
 5195               	.LFBB23:
 5196 1c74 0F93      		push r16
 5197 1c76 1F93      		push r17
 5198 1c78 CF93      		push r28
 5199 1c7a DF93      		push r29
 5200               	/* prologue: function */
 5201               	/* frame size = 0 */
 5202               	/* stack size = 4 */
 5203               	.L__stack_usage = 4
 5204 1c7c EC01      		movw r28,r24
 5205 1c7e 162F      		mov r17,r22
 256:form.c        **** 	lcd_color(LCD_WHITE);
 5207               	.LM529:
 5208 1c80 8FEF      		ldi r24,lo8(-1)
 5209 1c82 9FEF      		ldi r25,lo8(-1)
 5210 1c84 9093 0000 		sts _color+1,r25
 5211 1c88 8093 0000 		sts _color,r24
 257:form.c        **** 	lcd_rect(i->X + 1, 20 + i->Y + 1, i->W - 2, 20 - 2);
 5213               	.LM530:
 5214 1c8c 4C81      		ldd r20,Y+4
 5215 1c8e 5D81      		ldd r21,Y+5
 5216 1c90 4250      		subi r20,2
 5217 1c92 5109      		sbc r21,__zero_reg__
 5218 1c94 6A81      		ldd r22,Y+2
 5219 1c96 7B81      		ldd r23,Y+3
 5220 1c98 6B5E      		subi r22,-21
 5221 1c9a 7F4F      		sbci r23,-1
 5222 1c9c 8881      		ld r24,Y
 5223 1c9e 9981      		ldd r25,Y+1
 5224 1ca0 22E1      		ldi r18,lo8(18)
 5225 1ca2 30E0      		ldi r19,0
 5226 1ca4 0196      		adiw r24,1
 5227 1ca6 0E94 0000 		call lcd_rect
 5228 1caa 4C81      		ldd r20,Y+4
 5229 1cac 5D81      		ldd r21,Y+5
 5230 1cae 6A81      		ldd r22,Y+2
 5231 1cb0 7B81      		ldd r23,Y+3
 5232 1cb2 8881      		ld r24,Y
 5233 1cb4 9981      		ldd r25,Y+1
 258:form.c        **** 
 259:form.c        **** 	if(sel)
 5235               	.LM531:
 5236 1cb6 1123      		tst r17
 5237 1cb8 01F0      		breq .L224
 260:form.c        **** 	{
 261:form.c        **** 		lcd_color(LCD_RED);
 5239               	.LM532:
 5240 1cba 20E0      		ldi r18,0
 5241 1cbc 38EF      		ldi r19,lo8(-8)
 5242 1cbe 3093 0000 		sts _color+1,r19
 5243 1cc2 2093 0000 		sts _color,r18
 262:form.c        **** 		lcd_rect_border2(i->X, 20 + i->Y, i->W, 20);
 5245               	.LM533:
 5246 1cc6 6C5E      		subi r22,-20
 5247 1cc8 7F4F      		sbci r23,-1
 5248 1cca 24E1      		ldi r18,lo8(20)
 5249 1ccc 30E0      		ldi r19,0
 5250 1cce 0E94 0000 		call lcd_rect_border2
 5251               	.L225:
 263:form.c        **** 	}
 264:form.c        **** 	else
 265:form.c        **** 	{
 266:form.c        **** 		lcd_color(LCD_BLACK);
 267:form.c        **** 		lcd_rect_border(i->X, 20 + i->Y, i->W, 20);
 268:form.c        **** 	}
 269:form.c        **** 
 270:form.c        **** 	lcd_color(LCD_BLACK);
 5253               	.LM534:
 5254 1cd2 1092 0000 		sts _color+1,__zero_reg__
 5255 1cd6 1092 0000 		sts _color,__zero_reg__
 271:form.c        **** 	if(sel)
 5257               	.LM535:
 5258 1cda 1123      		tst r17
 5259 1cdc 01F0      		breq .L226
 272:form.c        **** 	{
 273:form.c        **** 		lcd_vline(i->X + 5 + lcd_string_width_len(i->Text, i->Position) - 1, 20 + i->Y + 3, 14);
 5261               	.LM536:
 5262 1cde 6A81      		ldd r22,Y+2
 5263 1ce0 7B81      		ldd r23,Y+3
 5264 1ce2 695E      		subi r22,-23
 5265 1ce4 7F4F      		sbci r23,-1
 5266 1ce6 8881      		ld r24,Y
 5267 1ce8 9981      		ldd r25,Y+1
 5268 1cea 4F81      		ldd r20,Y+7
 5269 1cec 2A85      		ldd r18,Y+10
 5270               	.LBB137:
 5271               	.LBB138:
 5273               	.Ltext17:
 221:graphics.c    **** 	{
 5275               	.LM537:
 5276 1cee A22F      		mov r26,r18
 5277 1cf0 BB85      		ldd r27,Y+11
 218:graphics.c    **** 	uint8_t i;
 5279               	.LM538:
 5280 1cf2 10E0      		ldi r17,0
 5281 1cf4 00E0      		ldi r16,0
 5282               	.L227:
 221:graphics.c    **** 	{
 5284               	.LM539:
 5285 1cf6 3A2F      		mov r19,r26
 5286 1cf8 321B      		sub r19,r18
 5287 1cfa 3417      		cp r19,r20
 5288 1cfc 00F0      		brlo .L229
 5289               	.LBE138:
 5290               	.LBE137:
 5292               	.Ltext18:
 5294               	.LM540:
 5295 1cfe 0496      		adiw r24,4
 5296 1d00 2EE0      		ldi r18,lo8(14)
 5297 1d02 30E0      		ldi r19,0
 5298 1d04 41E0      		ldi r20,lo8(1)
 5299 1d06 50E0      		ldi r21,0
 5300 1d08 800F      		add r24,r16
 5301 1d0a 911F      		adc r25,r17
 5302 1d0c 0E94 0000 		call lcd_rect
 5303               	.L226:
 274:form.c        **** 	}
 275:form.c        **** 
 276:form.c        **** 	lcd_string(i->X + 5, 20 + i->Y + 5, i->Text);
 5305               	.LM541:
 5306 1d10 4A85      		ldd r20,Y+10
 5307 1d12 5B85      		ldd r21,Y+11
 5309               	.LM542:
 5310 1d14 6A81      		ldd r22,Y+2
 5311 1d16 7B81      		ldd r23,Y+3
 5312 1d18 675E      		subi r22,-25
 5313 1d1a 7F4F      		sbci r23,-1
 5315               	.LM543:
 5316 1d1c 8881      		ld r24,Y
 5317 1d1e 9981      		ldd r25,Y+1
 5319               	.LM544:
 5320 1d20 0596      		adiw r24,5
 5321               	/* epilogue start */
 277:form.c        **** }
 5323               	.LM545:
 5324 1d22 DF91      		pop r29
 5325 1d24 CF91      		pop r28
 5326 1d26 1F91      		pop r17
 5327 1d28 0F91      		pop r16
 276:form.c        **** }
 5329               	.LM546:
 5330 1d2a 0C94 0000 		jmp lcd_string
 5331               	.L224:
 266:form.c        **** 		lcd_rect_border(i->X, 20 + i->Y, i->W, 20);
 5333               	.LM547:
 5334 1d2e 1092 0000 		sts _color+1,__zero_reg__
 5335 1d32 1092 0000 		sts _color,__zero_reg__
 267:form.c        **** 	}
 5337               	.LM548:
 5338 1d36 6C5E      		subi r22,-20
 5339 1d38 7F4F      		sbci r23,-1
 5340 1d3a 24E1      		ldi r18,lo8(20)
 5341 1d3c 30E0      		ldi r19,0
 5342 1d3e 0E94 0000 		call lcd_rect_border
 5343 1d42 00C0      		rjmp .L225
 5344               	.L229:
 5345               	.LBB145:
 5346               	.LBB144:
 5348               	.Ltext19:
 223:graphics.c    **** 		x += lcd_width_char(c);
 5350               	.LM549:
 5351 1d44 ED91      		ld r30,X+
 5352               	.LBB139:
 5353               	.LBB140:
 183:graphics.c    **** 	{
 5355               	.LM550:
 5356 1d46 E052      		subi r30,lo8(-(-32))
 183:graphics.c    **** 	{
 5358               	.LM551:
 5359 1d48 EF35      		cpi r30,lo8(95)
 5360 1d4a 00F4      		brsh .L230
 5361               	.LBB141:
 186:graphics.c    **** 	}
 5363               	.LM552:
 5364 1d4c F0E0      		ldi r31,0
 5365 1d4e E050      		subi r30,lo8(-(font_default_widths))
 5366 1d50 F040      		sbci r31,hi8(-(font_default_widths))
 5367               	/* #APP */
 5368               	 ;  186 "graphics.c" 1
 5369 1d52 E491      		lpm r30, Z
 5370               		
 5371               	 ;  0 "" 2
 5372               	/* #NOAPP */
 5373               	.L228:
 5374               	.LBE141:
 5375               	.LBE140:
 5376               	.LBE139:
 224:graphics.c    **** 	}
 5378               	.LM553:
 5379 1d54 0E0F      		add r16,r30
 5380 1d56 111D      		adc r17,__zero_reg__
 5381 1d58 00C0      		rjmp .L227
 5382               	.L230:
 5383               	.LBB143:
 5384               	.LBB142:
 182:graphics.c    **** 	if(c >= 32 && c <= 126)
 5386               	.LM554:
 5387 1d5a E0E0      		ldi r30,0
 5388 1d5c 00C0      		rjmp .L228
 5389               	.LBE142:
 5390               	.LBE143:
 5391               	.LBE144:
 5392               	.LBE145:
 5411               	.Lscope23:
 5415               	update_x:
 5417               	.Ltext20:
 206:table.c       **** 
 207:table.c       **** static uint8_t flen(char *s)
 208:table.c       **** {
 209:table.c       **** 	uint8_t i;
 210:table.c       **** 	char c;
 211:table.c       **** 	for(i = 0; (c = *s); ++s, ++i)
 212:table.c       **** 	{
 213:table.c       **** 		if(!((c >= '0' && c <= '9') || c == '.'))
 214:table.c       **** 		{
 215:table.c       **** 			break;
 216:table.c       **** 		}
 217:table.c       **** 	}
 218:table.c       **** 
 219:table.c       **** 	s[i] = '\0';
 220:table.c       **** 	return i;
 221:table.c       **** }
 222:table.c       **** 
 223:table.c       **** static void update_x(float tx)
 224:table.c       **** {
 5419               	.LM555:
 5420               	.LFBB24:
 5421 1d5e 0F93      		push r16
 5422 1d60 1F93      		push r17
 5423 1d62 CF93      		push r28
 5424 1d64 DF93      		push r29
 5425 1d66 00D0      		rcall .
 5426 1d68 00D0      		rcall .
 5427 1d6a CDB7      		in r28,__SP_L__
 5428 1d6c DEB7      		in r29,__SP_H__
 5429               	/* prologue: function */
 5430               	/* frame size = 4 */
 5431               	/* stack size = 8 */
 5432               	.L__stack_usage = 8
 225:table.c       **** 	uint8_t len;
 226:table.c       **** 	dtostrf(tx, -15, 6, table_elements[3].E.I.Text);
 5434               	.LM556:
 5435 1d6e 0091 0000 		lds r16,table_elements+53
 5436 1d72 1091 0000 		lds r17,table_elements+53+1
 5437 1d76 26E0      		ldi r18,lo8(6)
 5438 1d78 41EF      		ldi r20,lo8(-15)
 5439 1d7a 6983      		std Y+1,r22
 5440 1d7c 7A83      		std Y+2,r23
 5441 1d7e 8B83      		std Y+3,r24
 5442 1d80 9C83      		std Y+4,r25
 5443 1d82 6981      		ldd r22,Y+1
 5444 1d84 7A81      		ldd r23,Y+2
 5445 1d86 8B81      		ldd r24,Y+3
 5446 1d88 9C81      		ldd r25,Y+4
 5447 1d8a 0E94 0000 		call dtostrf
 5448 1d8e 4091 0000 		lds r20,table_elements+53
 5449               	.LBB148:
 5450               	.LBB149:
 211:table.c       **** 	{
 5452               	.LM557:
 5453 1d92 E42F      		mov r30,r20
 5454 1d94 F091 0000 		lds r31,table_elements+54
 5455               	.L239:
 5456 1d98 2E2F      		mov r18,r30
 5457 1d9a 241B      		sub r18,r20
 5458 1d9c CF01      		movw r24,r30
 211:table.c       **** 	{
 5460               	.LM558:
 5461 1d9e 3191      		ld r19,Z+
 211:table.c       **** 	{
 5463               	.LM559:
 5464 1da0 3323      		tst r19
 5465 1da2 01F0      		breq .L237
 213:table.c       **** 		{
 5467               	.LM560:
 5468 1da4 50ED      		ldi r21,lo8(-48)
 5469 1da6 530F      		add r21,r19
 213:table.c       **** 		{
 5471               	.LM561:
 5472 1da8 5A30      		cpi r21,lo8(10)
 5473 1daa 00F0      		brlo .L239
 213:table.c       **** 		{
 5475               	.LM562:
 5476 1dac 3E32      		cpi r19,lo8(46)
 5477 1dae 01F0      		breq .L239
 5478               	.L237:
 219:table.c       **** 	return i;
 5480               	.LM563:
 5481 1db0 820F      		add r24,r18
 5482 1db2 911D      		adc r25,__zero_reg__
 5483 1db4 FC01      		movw r30,r24
 5484 1db6 1082      		st Z,__zero_reg__
 5485               	.LBE149:
 5486               	.LBE148:
 227:table.c       **** 	len = flen(table_elements[3].E.I.Text);
 228:table.c       **** 	table_elements[3].E.I.Position = len;
 5488               	.LM564:
 5489 1db8 2093 0000 		sts table_elements+50,r18
 229:table.c       **** 	table_elements[3].E.I.Length = len;
 5491               	.LM565:
 5492 1dbc 2093 0000 		sts table_elements+51,r18
 230:table.c       **** 	input_render(&table_elements[3].E.I, 0);
 5494               	.LM566:
 5495 1dc0 60E0      		ldi r22,0
 5496 1dc2 80E0      		ldi r24,lo8(table_elements+43)
 5497 1dc4 90E0      		ldi r25,hi8(table_elements+43)
 5498               	/* epilogue start */
 231:table.c       **** }
 5500               	.LM567:
 5501 1dc6 0F90      		pop __tmp_reg__
 5502 1dc8 0F90      		pop __tmp_reg__
 5503 1dca 0F90      		pop __tmp_reg__
 5504 1dcc 0F90      		pop __tmp_reg__
 5505 1dce DF91      		pop r29
 5506 1dd0 CF91      		pop r28
 5507 1dd2 1F91      		pop r17
 5508 1dd4 0F91      		pop r16
 230:table.c       **** 	input_render(&table_elements[3].E.I, 0);
 5510               	.LM568:
 5511 1dd6 0C94 0000 		jmp input_render
 5519               	.Lscope24:
 5523               	form_table_input_button_next_click:
 232:table.c       **** 
 233:table.c       **** static void form_table_input_button_prev_click(void)
 234:table.c       **** {
 235:table.c       **** 	uint8_t e;
 236:table.c       **** 	tstep = atof(input_table_step_buffer);
 237:table.c       **** 	tx = atof(input_x_buffer);
 238:table.c       **** 	tx -= tstep;
 239:table.c       **** 	update_x(tx);
 240:table.c       **** 	if((e = calc_solve(tx, &ty)))
 241:table.c       **** 	{
 242:table.c       **** 		print_error(e);
 243:table.c       **** 		return;
 244:table.c       **** 	}
 245:table.c       **** 
 246:table.c       **** 	print_result();
 247:table.c       **** }
 248:table.c       **** 
 249:table.c       **** static void form_table_input_button_next_click(void)
 250:table.c       **** {
 5525               	.LM569:
 5526               	.LFBB25:
 5527 1dda CF93      		push r28
 5528 1ddc DF93      		push r29
 5529 1dde 00D0      		rcall .
 5530 1de0 00D0      		rcall .
 5531 1de2 CDB7      		in r28,__SP_L__
 5532 1de4 DEB7      		in r29,__SP_H__
 5533               	/* prologue: function */
 5534               	/* frame size = 4 */
 5535               	/* stack size = 6 */
 5536               	.L__stack_usage = 6
 251:table.c       **** 	uint8_t e;
 252:table.c       **** 	tstep = atof(input_table_step_buffer);
 5538               	.LM570:
 5539 1de6 80E0      		ldi r24,lo8(input_table_step_buffer)
 5540 1de8 90E0      		ldi r25,hi8(input_table_step_buffer)
 5541 1dea 0E94 0000 		call atof
 5542 1dee 6093 0000 		sts tstep,r22
 5543 1df2 7093 0000 		sts tstep+1,r23
 5544 1df6 8093 0000 		sts tstep+2,r24
 5545 1dfa 9093 0000 		sts tstep+3,r25
 253:table.c       **** 	tx = atof(input_x_buffer);
 5547               	.LM571:
 5548 1dfe 80E0      		ldi r24,lo8(input_x_buffer)
 5549 1e00 90E0      		ldi r25,hi8(input_x_buffer)
 5550 1e02 0E94 0000 		call atof
 254:table.c       **** 	tx += tstep;
 5552               	.LM572:
 5553 1e06 2091 0000 		lds r18,tstep
 5554 1e0a 3091 0000 		lds r19,tstep+1
 5555 1e0e 4091 0000 		lds r20,tstep+2
 5556 1e12 5091 0000 		lds r21,tstep+3
 5557 1e16 6983      		std Y+1,r22
 5558 1e18 7A83      		std Y+2,r23
 5559 1e1a 8B83      		std Y+3,r24
 5560 1e1c 9C83      		std Y+4,r25
 5561 1e1e 6981      		ldd r22,Y+1
 5562 1e20 7A81      		ldd r23,Y+2
 5563 1e22 8B81      		ldd r24,Y+3
 5564 1e24 9C81      		ldd r25,Y+4
 5565 1e26 0E94 0000 		call __addsf3
 5566 1e2a 362F      		mov r19,r22
 5567 1e2c 272F      		mov r18,r23
 5568 1e2e 462F      		mov r20,r22
 5569 1e30 572F      		mov r21,r23
 5570 1e32 BC01      		movw r22,r24
 5571 1e34 4093 0000 		sts tx,r20
 5572 1e38 5093 0000 		sts tx+1,r21
 5573 1e3c 6093 0000 		sts tx+2,r22
 5574 1e40 7093 0000 		sts tx+3,r23
 255:table.c       **** 	update_x(tx);
 5576               	.LM573:
 5577 1e44 3983      		std Y+1,r19
 5578 1e46 2A83      		std Y+2,r18
 5579 1e48 8B83      		std Y+3,r24
 5580 1e4a 9C83      		std Y+4,r25
 5581 1e4c 6981      		ldd r22,Y+1
 5582 1e4e 7A81      		ldd r23,Y+2
 5583 1e50 8B81      		ldd r24,Y+3
 5584 1e52 9C81      		ldd r25,Y+4
 5585 1e54 0E94 0000 		call update_x
 256:table.c       **** 	if((e = calc_solve(tx, &ty)))
 5587               	.LM574:
 5588 1e58 8091 0000 		lds r24,tx
 5589 1e5c 9091 0000 		lds r25,tx+1
 5590 1e60 A091 0000 		lds r26,tx+2
 5591 1e64 B091 0000 		lds r27,tx+3
 5592 1e68 8983      		std Y+1,r24
 5593 1e6a 9A83      		std Y+2,r25
 5594 1e6c AB83      		std Y+3,r26
 5595 1e6e BC83      		std Y+4,r27
 5596 1e70 40E0      		ldi r20,lo8(ty)
 5597 1e72 50E0      		ldi r21,hi8(ty)
 5598 1e74 BC01      		movw r22,r24
 5599 1e76 CD01      		movw r24,r26
 5600 1e78 0E94 0000 		call calc_solve
 5602               	.LM575:
 5603 1e7c 8823      		tst r24
 5604 1e7e 01F0      		breq .L242
 5605               	/* epilogue start */
 257:table.c       **** 	{
 258:table.c       **** 		print_error(e);
 259:table.c       **** 		return;
 260:table.c       **** 	}
 261:table.c       **** 
 262:table.c       **** 	print_result();
 263:table.c       **** }
 5607               	.LM576:
 5608 1e80 0F90      		pop __tmp_reg__
 5609 1e82 0F90      		pop __tmp_reg__
 5610 1e84 0F90      		pop __tmp_reg__
 5611 1e86 0F90      		pop __tmp_reg__
 5612 1e88 DF91      		pop r29
 5613 1e8a CF91      		pop r28
 258:table.c       **** 		return;
 5615               	.LM577:
 5616 1e8c 0C94 0000 		jmp print_error
 5617               	.L242:
 5618               	/* epilogue start */
 5620               	.LM578:
 5621 1e90 0F90      		pop __tmp_reg__
 5622 1e92 0F90      		pop __tmp_reg__
 5623 1e94 0F90      		pop __tmp_reg__
 5624 1e96 0F90      		pop __tmp_reg__
 5625 1e98 DF91      		pop r29
 5626 1e9a CF91      		pop r28
 262:table.c       **** }
 5628               	.LM579:
 5629 1e9c 0C94 0000 		jmp print_result
 5634               	.Lscope25:
 5638               	form_table_input_button_prev_click:
 234:table.c       **** 	uint8_t e;
 5640               	.LM580:
 5641               	.LFBB26:
 5642 1ea0 CF93      		push r28
 5643 1ea2 DF93      		push r29
 5644 1ea4 00D0      		rcall .
 5645 1ea6 00D0      		rcall .
 5646 1ea8 CDB7      		in r28,__SP_L__
 5647 1eaa DEB7      		in r29,__SP_H__
 5648               	/* prologue: function */
 5649               	/* frame size = 4 */
 5650               	/* stack size = 6 */
 5651               	.L__stack_usage = 6
 236:table.c       **** 	tx = atof(input_x_buffer);
 5653               	.LM581:
 5654 1eac 80E0      		ldi r24,lo8(input_table_step_buffer)
 5655 1eae 90E0      		ldi r25,hi8(input_table_step_buffer)
 5656 1eb0 0E94 0000 		call atof
 5657 1eb4 6093 0000 		sts tstep,r22
 5658 1eb8 7093 0000 		sts tstep+1,r23
 5659 1ebc 8093 0000 		sts tstep+2,r24
 5660 1ec0 9093 0000 		sts tstep+3,r25
 237:table.c       **** 	tx -= tstep;
 5662               	.LM582:
 5663 1ec4 80E0      		ldi r24,lo8(input_x_buffer)
 5664 1ec6 90E0      		ldi r25,hi8(input_x_buffer)
 5665 1ec8 0E94 0000 		call atof
 238:table.c       **** 	update_x(tx);
 5667               	.LM583:
 5668 1ecc 2091 0000 		lds r18,tstep
 5669 1ed0 3091 0000 		lds r19,tstep+1
 5670 1ed4 4091 0000 		lds r20,tstep+2
 5671 1ed8 5091 0000 		lds r21,tstep+3
 5672 1edc 6983      		std Y+1,r22
 5673 1ede 7A83      		std Y+2,r23
 5674 1ee0 8B83      		std Y+3,r24
 5675 1ee2 9C83      		std Y+4,r25
 5676 1ee4 6981      		ldd r22,Y+1
 5677 1ee6 7A81      		ldd r23,Y+2
 5678 1ee8 8B81      		ldd r24,Y+3
 5679 1eea 9C81      		ldd r25,Y+4
 5680 1eec 0E94 0000 		call __subsf3
 5681 1ef0 362F      		mov r19,r22
 5682 1ef2 272F      		mov r18,r23
 5683 1ef4 462F      		mov r20,r22
 5684 1ef6 572F      		mov r21,r23
 5685 1ef8 BC01      		movw r22,r24
 5686 1efa 4093 0000 		sts tx,r20
 5687 1efe 5093 0000 		sts tx+1,r21
 5688 1f02 6093 0000 		sts tx+2,r22
 5689 1f06 7093 0000 		sts tx+3,r23
 239:table.c       **** 	if((e = calc_solve(tx, &ty)))
 5691               	.LM584:
 5692 1f0a 3983      		std Y+1,r19
 5693 1f0c 2A83      		std Y+2,r18
 5694 1f0e 8B83      		std Y+3,r24
 5695 1f10 9C83      		std Y+4,r25
 5696 1f12 6981      		ldd r22,Y+1
 5697 1f14 7A81      		ldd r23,Y+2
 5698 1f16 8B81      		ldd r24,Y+3
 5699 1f18 9C81      		ldd r25,Y+4
 5700 1f1a 0E94 0000 		call update_x
 240:table.c       **** 	{
 5702               	.LM585:
 5703 1f1e 8091 0000 		lds r24,tx
 5704 1f22 9091 0000 		lds r25,tx+1
 5705 1f26 A091 0000 		lds r26,tx+2
 5706 1f2a B091 0000 		lds r27,tx+3
 5707 1f2e 8983      		std Y+1,r24
 5708 1f30 9A83      		std Y+2,r25
 5709 1f32 AB83      		std Y+3,r26
 5710 1f34 BC83      		std Y+4,r27
 5711 1f36 40E0      		ldi r20,lo8(ty)
 5712 1f38 50E0      		ldi r21,hi8(ty)
 5713 1f3a BC01      		movw r22,r24
 5714 1f3c CD01      		movw r24,r26
 5715 1f3e 0E94 0000 		call calc_solve
 240:table.c       **** 	{
 5717               	.LM586:
 5718 1f42 8823      		tst r24
 5719 1f44 01F0      		breq .L244
 5720               	/* epilogue start */
 247:table.c       **** 
 5722               	.LM587:
 5723 1f46 0F90      		pop __tmp_reg__
 5724 1f48 0F90      		pop __tmp_reg__
 5725 1f4a 0F90      		pop __tmp_reg__
 5726 1f4c 0F90      		pop __tmp_reg__
 5727 1f4e DF91      		pop r29
 5728 1f50 CF91      		pop r28
 242:table.c       **** 		return;
 5730               	.LM588:
 5731 1f52 0C94 0000 		jmp print_error
 5732               	.L244:
 5733               	/* epilogue start */
 247:table.c       **** 
 5735               	.LM589:
 5736 1f56 0F90      		pop __tmp_reg__
 5737 1f58 0F90      		pop __tmp_reg__
 5738 1f5a 0F90      		pop __tmp_reg__
 5739 1f5c 0F90      		pop __tmp_reg__
 5740 1f5e DF91      		pop r29
 5741 1f60 CF91      		pop r28
 246:table.c       **** }
 5743               	.LM590:
 5744 1f62 0C94 0000 		jmp print_result
 5749               	.Lscope26:
 5756               	button_render:
 5758               	.Ltext21:
 223:form.c        **** 	int16_t x, y;
 5760               	.LM591:
 5761               	.LFBB27:
 5762 1f66 FF92      		push r15
 5763 1f68 0F93      		push r16
 5764 1f6a 1F93      		push r17
 5765 1f6c CF93      		push r28
 5766 1f6e DF93      		push r29
 5767               	/* prologue: function */
 5768               	/* frame size = 0 */
 5769               	/* stack size = 5 */
 5770               	.L__stack_usage = 5
 5771 1f70 EC01      		movw r28,r24
 5772 1f72 F62E      		mov r15,r22
 225:form.c        **** 
 5774               	.LM592:
 5775 1f74 0B81      		ldd r16,Y+3
 5776 1f76 1C81      		ldd r17,Y+4
 5777 1f78 0C5E      		subi r16,-20
 5778 1f7a 1F4F      		sbci r17,-1
 227:form.c        **** 	lcd_rect(b->X, y, b->W, b->H);
 5780               	.LM593:
 5781 1f7c 8FEF      		ldi r24,lo8(-1)
 5782 1f7e 9FEF      		ldi r25,lo8(-1)
 5783 1f80 9093 0000 		sts _color+1,r25
 5784 1f84 8093 0000 		sts _color,r24
 228:form.c        **** 
 5786               	.LM594:
 5787 1f88 2F81      		ldd r18,Y+7
 5788 1f8a 3885      		ldd r19,Y+8
 5789 1f8c 4D81      		ldd r20,Y+5
 5790 1f8e 5E81      		ldd r21,Y+6
 5791 1f90 B801      		movw r22,r16
 5792 1f92 8981      		ldd r24,Y+1
 5793 1f94 9A81      		ldd r25,Y+2
 5794 1f96 0E94 0000 		call lcd_rect
 5795 1f9a 2F81      		ldd r18,Y+7
 5796 1f9c 3885      		ldd r19,Y+8
 5797 1f9e 4D81      		ldd r20,Y+5
 5798 1fa0 5E81      		ldd r21,Y+6
 5799 1fa2 8981      		ldd r24,Y+1
 5800 1fa4 9A81      		ldd r25,Y+2
 230:form.c        **** 	{
 5802               	.LM595:
 5803 1fa6 FF20      		tst r15
 5804 1fa8 01F0      		breq .L246
 232:form.c        **** 		lcd_rect_border2(b->X, y, b->W, b->H);
 5806               	.LM596:
 5807 1faa 60E0      		ldi r22,0
 5808 1fac 78EF      		ldi r23,lo8(-8)
 5809 1fae 7093 0000 		sts _color+1,r23
 5810 1fb2 6093 0000 		sts _color,r22
 233:form.c        **** 	}
 5812               	.LM597:
 5813 1fb6 B801      		movw r22,r16
 5814 1fb8 0E94 0000 		call lcd_rect_border2
 5815               	.L247:
 241:form.c        **** 	if(b->Flags & FLAG_TEXT_PROGMEM)
 5817               	.LM598:
 5818 1fbc 1092 0000 		sts _color+1,__zero_reg__
 5819 1fc0 1092 0000 		sts _color,__zero_reg__
 5820 1fc4 2881      		ld r18,Y
 5821 1fc6 2170      		andi r18,lo8(1)
 244:form.c        **** 		lcd_string_P(x, y + b->H / 2 - 5, b->Text.Flash);
 5823               	.LM599:
 5824 1fc8 8D81      		ldd r24,Y+5
 5825 1fca 9E81      		ldd r25,Y+6
 5826 1fcc 97FD      		sbrc r25,7
 5827 1fce 0196      		adiw r24,1
 5828               	.L248:
 5829 1fd0 9595      		asr r25
 5830 1fd2 8795      		ror r24
 244:form.c        **** 		lcd_string_P(x, y + b->H / 2 - 5, b->Text.Flash);
 5832               	.LM600:
 5833 1fd4 4981      		ldd r20,Y+1
 5834 1fd6 5A81      		ldd r21,Y+2
 5835 1fd8 840F      		add r24,r20
 5836 1fda 951F      		adc r25,r21
 244:form.c        **** 		lcd_string_P(x, y + b->H / 2 - 5, b->Text.Flash);
 5838               	.LM601:
 5839 1fdc 4985      		ldd r20,Y+9
 5840 1fde 5A85      		ldd r21,Y+10
 242:form.c        **** 	{
 5842               	.LM602:
 5843 1fe0 2111      		cpse r18,__zero_reg__
 5844 1fe2 00C0      		rjmp .L256
 5845 1fe4 DA01      		movw r26,r20
 5846               	.LBB161:
 5847               	.LBB162:
 5849               	.Ltext22:
 194:graphics.c    **** 	char c;
 5851               	.LM603:
 5852 1fe6 30E0      		ldi r19,0
 5853 1fe8 20E0      		ldi r18,0
 5854               	.L250:
 196:graphics.c    **** 	{
 5856               	.LM604:
 5857 1fea ED91      		ld r30,X+
 196:graphics.c    **** 	{
 5859               	.LM605:
 5860 1fec E111      		cpse r30,__zero_reg__
 5861 1fee 00C0      		rjmp .L255
 5862               	.LBE162:
 5863               	.LBE161:
 5865               	.Ltext23:
 249:form.c        **** 		lcd_string(x, y, b->Text.RAM);
 5867               	.LM606:
 5868 1ff0 3695      		lsr r19
 5869 1ff2 2795      		ror r18
 250:form.c        **** 	}
 5871               	.LM607:
 5872 1ff4 B801      		movw r22,r16
 5873 1ff6 821B      		sub r24,r18
 5874 1ff8 930B      		sbc r25,r19
 5875               	/* epilogue start */
 252:form.c        **** 
 5877               	.LM608:
 5878 1ffa DF91      		pop r29
 5879 1ffc CF91      		pop r28
 5880 1ffe 1F91      		pop r17
 5881 2000 0F91      		pop r16
 5882 2002 FF90      		pop r15
 250:form.c        **** 	}
 5884               	.LM609:
 5885 2004 0C94 0000 		jmp lcd_string
 5886               	.L246:
 237:form.c        **** 		lcd_rect_border(b->X, y, b->W, b->H);
 5888               	.LM610:
 5889 2008 1092 0000 		sts _color+1,__zero_reg__
 5890 200c 1092 0000 		sts _color,__zero_reg__
 238:form.c        **** 	}
 5892               	.LM611:
 5893 2010 B801      		movw r22,r16
 5894 2012 0E94 0000 		call lcd_rect_border
 5895 2016 00C0      		rjmp .L247
 5896               	.L252:
 5897               	.LBB169:
 5898               	.LBB170:
 5899               	.LBB171:
 5900               	.LBB172:
 5902               	.Ltext24:
 183:graphics.c    **** 	{
 5904               	.LM612:
 5905 2018 E0EE      		ldi r30,lo8(-32)
 5906 201a EA0F      		add r30,r26
 183:graphics.c    **** 	{
 5908               	.LM613:
 5909 201c EF35      		cpi r30,lo8(95)
 5910 201e 00F4      		brsh .L257
 5911               	.LBB173:
 186:graphics.c    **** 	}
 5913               	.LM614:
 5914 2020 F0E0      		ldi r31,0
 5915 2022 E050      		subi r30,lo8(-(font_default_widths))
 5916 2024 F040      		sbci r31,hi8(-(font_default_widths))
 5917               	/* #APP */
 5918               	 ;  186 "graphics.c" 1
 5919 2026 E491      		lpm r30, Z
 5920               		
 5921               	 ;  0 "" 2
 5922               	/* #NOAPP */
 5923               	.L251:
 5924               	.LBE173:
 5925               	.LBE172:
 5926               	.LBE171:
 210:graphics.c    **** 	}
 5928               	.LM615:
 5929 2028 2E0F      		add r18,r30
 5930 202a 311D      		adc r19,__zero_reg__
 208:graphics.c    **** 	{
 5932               	.LM616:
 5933 202c 6F5F      		subi r22,-1
 5934 202e 7F4F      		sbci r23,-1
 5935               	.L249:
 5936               	.LBB175:
 208:graphics.c    **** 	{
 5938               	.LM617:
 5939 2030 FB01      		movw r30,r22
 5940               	/* #APP */
 5941               	 ;  208 "graphics.c" 1
 5942 2032 A491      		lpm r26, Z
 5943               		
 5944               	 ;  0 "" 2
 5945               	/* #NOAPP */
 5946               	.LBE175:
 208:graphics.c    **** 	{
 5948               	.LM618:
 5949 2034 A111      		cpse r26,__zero_reg__
 5950 2036 00C0      		rjmp .L252
 5951               	.LBE170:
 5952               	.LBE169:
 5954               	.Ltext25:
 245:form.c        **** 	}
 5956               	.LM619:
 5957 2038 6F81      		ldd r22,Y+7
 5958 203a 7885      		ldd r23,Y+8
 5959 203c 77FF      		sbrs r23,7
 5960 203e 00C0      		rjmp .L253
 5961 2040 6F5F      		subi r22,-1
 5962 2042 7F4F      		sbci r23,-1
 5963               	.L253:
 5964 2044 7595      		asr r23
 5965 2046 6795      		ror r22
 245:form.c        **** 	}
 5967               	.LM620:
 5968 2048 600F      		add r22,r16
 5969 204a 711F      		adc r23,r17
 245:form.c        **** 	}
 5971               	.LM621:
 5972 204c 6550      		subi r22,5
 5973 204e 7109      		sbc r23,__zero_reg__
 244:form.c        **** 		lcd_string_P(x, y + b->H / 2 - 5, b->Text.Flash);
 5975               	.LM622:
 5976 2050 3695      		lsr r19
 5977 2052 2795      		ror r18
 245:form.c        **** 	}
 5979               	.LM623:
 5980 2054 821B      		sub r24,r18
 5981 2056 930B      		sbc r25,r19
 5982               	/* epilogue start */
 252:form.c        **** 
 5984               	.LM624:
 5985 2058 DF91      		pop r29
 5986 205a CF91      		pop r28
 5987 205c 1F91      		pop r17
 5988 205e 0F91      		pop r16
 5989 2060 FF90      		pop r15
 245:form.c        **** 	}
 5991               	.LM625:
 5992 2062 0C94 0000 		jmp lcd_string_P.isra.0
 5993               	.L257:
 5994               	.LBB179:
 5995               	.LBB177:
 5996               	.LBB176:
 5997               	.LBB174:
 5999               	.Ltext26:
 182:graphics.c    **** 	if(c >= 32 && c <= 126)
 6001               	.LM626:
 6002 2066 E0E0      		ldi r30,0
 6003 2068 00C0      		rjmp .L251
 6004               	.L256:
 6005               	.LBE174:
 6006               	.LBE176:
 6007               	.LBE177:
 6008               	.LBE179:
 6009 206a BA01      		movw r22,r20
 6010               	.LBB180:
 6011               	.LBB178:
 206:graphics.c    **** 	char c;
 6013               	.LM627:
 6014 206c 30E0      		ldi r19,0
 6015 206e 20E0      		ldi r18,0
 6016 2070 00C0      		rjmp .L249
 6017               	.L255:
 6018               	.LBE178:
 6019               	.LBE180:
 6020               	.LBB181:
 6021               	.LBB168:
 6022               	.LBB163:
 6023               	.LBB164:
 183:graphics.c    **** 	{
 6025               	.LM628:
 6026 2072 E052      		subi r30,lo8(-(-32))
 183:graphics.c    **** 	{
 6028               	.LM629:
 6029 2074 EF35      		cpi r30,lo8(95)
 6030 2076 00F4      		brsh .L258
 6031               	.LBB165:
 186:graphics.c    **** 	}
 6033               	.LM630:
 6034 2078 F0E0      		ldi r31,0
 6035 207a E050      		subi r30,lo8(-(font_default_widths))
 6036 207c F040      		sbci r31,hi8(-(font_default_widths))
 6037               	/* #APP */
 6038               	 ;  186 "graphics.c" 1
 6039 207e E491      		lpm r30, Z
 6040               		
 6041               	 ;  0 "" 2
 6042               	/* #NOAPP */
 6043               	.L254:
 6044               	.LBE165:
 6045               	.LBE164:
 6046               	.LBE163:
 198:graphics.c    **** 	}
 6048               	.LM631:
 6049 2080 2E0F      		add r18,r30
 6050 2082 311D      		adc r19,__zero_reg__
 6051 2084 00C0      		rjmp .L250
 6052               	.L258:
 6053               	.LBB167:
 6054               	.LBB166:
 182:graphics.c    **** 	if(c >= 32 && c <= 126)
 6056               	.LM632:
 6057 2086 E0E0      		ldi r30,0
 6058 2088 00C0      		rjmp .L254
 6059               	.LBE166:
 6060               	.LBE167:
 6061               	.LBE168:
 6062               	.LBE181:
 6111               	.Lscope27:
 6118               	element_render_sel:
 6120               	.Ltext27:
 173:form.c        **** 	switch(e->Type)
 6122               	.LM633:
 6123               	.LFBB28:
 6124               	/* prologue: function */
 6125               	/* frame size = 0 */
 6126               	/* stack size = 0 */
 6127               	.L__stack_usage = 0
 174:form.c        **** 	{
 6129               	.LM634:
 6130 208a FC01      		movw r30,r24
 6131 208c 2081      		ld r18,Z
 174:form.c        **** 	{
 6133               	.LM635:
 6134 208e 2130      		cpi r18,lo8(1)
 6135 2090 01F0      		breq .L260
 6136 2092 2230      		cpi r18,lo8(2)
 6137 2094 01F0      		breq .L261
 6138 2096 2111      		cpse r18,__zero_reg__
 6139 2098 00C0      		rjmp .L259
 177:form.c        **** 			break;
 6141               	.LM636:
 6142 209a 0196      		adiw r24,1
 6143 209c 0C94 0000 		jmp label_render
 6144               	.L260:
 181:form.c        **** 			break;
 6146               	.LM637:
 6147 20a0 0196      		adiw r24,1
 6148 20a2 0C94 0000 		jmp button_render
 6149               	.L261:
 185:form.c        **** 			break;
 6151               	.LM638:
 6152 20a6 0196      		adiw r24,1
 6153 20a8 0C94 0000 		jmp input_render
 6154               	.L259:
 6155               	/* epilogue start */
 188:form.c        **** 
 6157               	.LM639:
 6158 20ac 0895      		ret
 6160               	.Lscope28:
 6166               	event_button:
 6168               	.Ltext28:
   1:main.c        **** #include <avr/io.h>
   2:main.c        **** #include <avr/interrupt.h>
   3:main.c        **** #include <avr/pgmspace.h>
   4:main.c        **** #include <string.h>
   5:main.c        **** 
   6:main.c        **** #define arrlen(A) (sizeof(A) / sizeof(*A))
   7:main.c        **** 
   8:main.c        **** /* Hardware Layer */
   9:main.c        **** #include "buttons.c"
  10:main.c        **** #include "mstimer.c"
  11:main.c        **** #include "graphics.c"
  12:main.c        **** #include "uart.c"
  13:main.c        **** 
  14:main.c        **** /* Library Layer */
  15:main.c        **** #include "calc.c"
  16:main.c        **** 
  17:main.c        **** /* Middle Layer */
  18:main.c        **** #include "form.c"
  19:main.c        **** #include "network.c"
  20:main.c        **** #include "keyboard.c"
  21:main.c        **** 
  22:main.c        **** /* Data */
  23:main.c        **** #include "strings.c"
  24:main.c        **** 
  25:main.c        **** /* Application Layer */
  26:main.c        **** #include "init.c"
  27:main.c        **** #include "apps.c"
  28:main.c        **** #include "plot.c"
  29:main.c        **** #include "table.c"
  30:main.c        **** #include "request.c"
  31:main.c        **** #include "message.c"
  32:main.c        **** #include "clock.c"
  33:main.c        **** 
  34:main.c        **** static void event_key(uint8_t key, uint8_t ascii);
  35:main.c        **** static void event_button(uint8_t button, uint8_t action);
  36:main.c        **** 
  37:main.c        **** int main(void)
  38:main.c        **** {
  39:main.c        **** 	form_init_open();
  40:main.c        **** 	render_keyboard();
  41:main.c        **** 	apps_open();
  42:main.c        **** 	for(;;)
  43:main.c        **** 	{
  44:main.c        **** 
  45:main.c        **** 	}
  46:main.c        **** 
  47:main.c        **** 	return 0;
  48:main.c        **** }
  49:main.c        **** 
  50:main.c        **** static void tick(void)
  51:main.c        **** {
  52:main.c        **** 	mstimer_disable();
  53:main.c        **** 	clock_update();
  54:main.c        **** 	buttons_update();
  55:main.c        **** 	mstimer_enable();
  56:main.c        **** }
  57:main.c        **** 
  58:main.c        **** static void event_button(uint8_t button, uint8_t action)
  59:main.c        **** {
 6170               	.LM640:
 6171               	.LFBB29:
 6172 20ae CF92      		push r12
 6173 20b0 DF92      		push r13
 6174 20b2 EF92      		push r14
 6175 20b4 FF92      		push r15
 6176 20b6 1F93      		push r17
 6177 20b8 CF93      		push r28
 6178 20ba DF93      		push r29
 6179               	/* prologue: function */
 6180               	/* frame size = 0 */
 6181               	/* stack size = 7 */
 6182               	.L__stack_usage = 7
 6183 20bc D82F      		mov r29,r24
 6184 20be 162F      		mov r17,r22
  60:main.c        **** 	if(any_key)
 6186               	.LM641:
 6187 20c0 8091 0000 		lds r24,any_key
 6188 20c4 8823      		tst r24
 6189 20c6 01F0      		breq .L264
 6190               	.LBB232:
 6191               	.LBB233:
 6193               	.Ltext29:
   1:init.c        **** static uint8_t any_key = 1;
   2:init.c        **** 
   3:init.c        **** static void form_init_open(void)
   4:init.c        **** {
   5:init.c        **** 	uint16_t y;
   6:init.c        **** 	buttons_init();
   7:init.c        **** 	mstimer_init();
   8:init.c        **** 	sei();
   9:init.c        **** 	lcd_init();
  10:init.c        **** 	lcd_color(LCD_WHITE);
  11:init.c        **** 	lcd_clear();
  12:init.c        **** 
  13:init.c        **** 	lcd_color(LCD_BLUE);
  14:init.c        **** 	lcd_rect(0, 0, LCD_WIDTH, 20);
  15:init.c        **** 
  16:init.c        **** 	lcd_color(LCD_WHITE);
  17:init.c        **** 	lcd_string(5, 5, "Initializing ...");
  18:init.c        **** 
  19:init.c        **** 	lcd_color(LCD_BLACK);
  20:init.c        **** 
  21:init.c        **** 	/* Hardware */
  22:init.c        **** 	y = 25;
  23:init.c        **** 	lcd_string(5, y, "[ HW ] Initialized");
  24:init.c        **** 	y += 20;
  25:init.c        **** 
  26:init.c        **** 	/* Press A to disable */
  27:init.c        **** 	if(PINC & (1 << 0))
  28:init.c        **** 	{
  29:init.c        **** 		/* UART */
  30:init.c        **** 		uart_init();
  31:init.c        **** 		lcd_string(5, y, "[ UART ] Initialized");
  32:init.c        **** 		y += 20;
  33:init.c        **** 
  34:init.c        **** 		lcd_string(5, y, "[ NET ] Waiting for Connection");
  35:init.c        **** 		y += 20;
  36:init.c        **** 		network_init();
  37:init.c        **** 
  38:init.c        **** 		if(connected)
  39:init.c        **** 		{
  40:init.c        **** 			uint16_t x0 = lcd_string(5, 85, "[ NET ] IP Address: ");
  41:init.c        **** 			lcd_string(x0, y, _ip);
  42:init.c        **** 		}
  43:init.c        **** 		else
  44:init.c        **** 		{
  45:init.c        **** 			lcd_string(5, y, "[ NET ] Timed out");
  46:init.c        **** 		}
  47:init.c        **** 
  48:init.c        **** 		y += 20;
  49:init.c        **** 	}
  50:init.c        **** 	else
  51:init.c        **** 	{
  52:init.c        **** 		lcd_string(5, y, "[ NET ] Disabled");
  53:init.c        **** 		y += 20;
  54:init.c        **** 	}
  55:init.c        **** 
  56:init.c        **** 	while(any_key)
  57:init.c        **** 	{
  58:init.c        **** 		lcd_color(LCD_BLACK);
  59:init.c        **** 		lcd_string(5, y, "[ OS ] Press any key to continue ...");
  60:init.c        **** 		wait_ms(500);
  61:init.c        **** 
  62:init.c        **** 		lcd_color(LCD_WHITE);
  63:init.c        **** 		lcd_rect(0, y - 5, LCD_WIDTH, 20);
  64:init.c        **** 		wait_ms(500);
  65:init.c        **** 	}
  66:init.c        **** }
  67:init.c        **** 
  68:init.c        **** static void init_key(void)
  69:init.c        **** {
  70:init.c        **** 	any_key = 0;
 6195               	.LM642:
 6196 20c8 1092 0000 		sts any_key,__zero_reg__
 6197               	.L263:
 6198               	/* epilogue start */
 6199               	.LBE233:
 6200               	.LBE232:
 6202               	.Ltext30:
  61:main.c        **** 	{
  62:main.c        **** 		init_key();
  63:main.c        **** 		return;
  64:main.c        **** 	}
  65:main.c        **** 
  66:main.c        **** 	if(kbd_mode == 2)
  67:main.c        **** 	{
  68:main.c        **** 		form_event_button(button, action);
  69:main.c        **** 	}
  70:main.c        **** 
  71:main.c        **** 	keyboard_key(button, action);
  72:main.c        **** }
 6204               	.LM643:
 6205 20cc DF91      		pop r29
 6206 20ce CF91      		pop r28
 6207 20d0 1F91      		pop r17
 6208 20d2 FF90      		pop r15
 6209 20d4 EF90      		pop r14
 6210 20d6 DF90      		pop r13
 6211 20d8 CF90      		pop r12
 6212 20da 0895      		ret
 6213               	.L264:
 6214               	.LBB234:
 6215               	.LBB235:
  66:main.c        **** 	{
 6217               	.LM644:
 6218 20dc 8091 0000 		lds r24,kbd_mode
 6219 20e0 8230      		cpi r24,lo8(2)
 6220 20e2 01F0      		breq .+2
 6221 20e4 00C0      		rjmp .L266
 6222               	.LBB236:
 6223               	.LBB237:
 6225               	.Ltext31:
 278:form.c        **** 
 279:form.c        **** static void input_grow(Input *i, uint8_t n)
 280:form.c        **** {
 281:form.c        **** 	if(i->Text[i->Position])
 282:form.c        **** 	{
 283:form.c        **** 		int8_t j;
 284:form.c        **** 		for(j = i->Length - 1; j >= i->Position; --j)
 285:form.c        **** 		{
 286:form.c        **** 			i->Text[j + n] = i->Text[j];
 287:form.c        **** 		}
 288:form.c        **** 	}
 289:form.c        **** 
 290:form.c        **** 	i->Length += n;
 291:form.c        **** 	i->Text[i->Length] = '\0';
 292:form.c        **** }
 293:form.c        **** 
 294:form.c        **** static void input_shrink(Input *i, uint8_t n)
 295:form.c        **** {
 296:form.c        **** 	if(i->Text[i->Position])
 297:form.c        **** 	{
 298:form.c        **** 		int8_t j = i->Position;
 299:form.c        **** 		for(; i->Text[j]; ++j)
 300:form.c        **** 		{
 301:form.c        **** 			i->Text[j - n] = i->Text[j];
 302:form.c        **** 		}
 303:form.c        **** 	}
 304:form.c        **** }
 305:form.c        **** 
 306:form.c        **** static void input_insert(Input *i, char c)
 307:form.c        **** {
 308:form.c        **** 	if(i->Length + 1 < i->Size)
 309:form.c        **** 	{
 310:form.c        **** 		input_grow(i, 1);
 311:form.c        **** 		i->Text [i->Position++] = c;
 312:form.c        **** 		input_render(i, 1);
 313:form.c        **** 	}
 314:form.c        **** }
 315:form.c        **** 
 316:form.c        **** static void input_clear(Input *i)
 317:form.c        **** {
 318:form.c        **** 	i->Length = 0;
 319:form.c        **** 	i->Position = 0;
 320:form.c        **** 	i->Text[0] = '\0';
 321:form.c        **** 	input_render(i, 1);
 322:form.c        **** }
 323:form.c        **** 
 324:form.c        **** static void input_delete(Input *i)
 325:form.c        **** {
 326:form.c        **** 	if(i->Position > 0)
 327:form.c        **** 	{
 328:form.c        **** 		input_shrink(i, 1);
 329:form.c        **** 		--(i->Position);
 330:form.c        **** 		--(i->Length);
 331:form.c        **** 		i->Text[i->Length] = '\0';
 332:form.c        **** 		input_render(i, 1);
 333:form.c        **** 	}
 334:form.c        **** }
 335:form.c        **** 
 336:form.c        **** static void input_left(Input *i)
 337:form.c        **** {
 338:form.c        **** 	if(i->Position > 0)
 339:form.c        **** 	{
 340:form.c        **** 		--(i->Position);
 341:form.c        **** 		input_render(i, 1);
 342:form.c        **** 	}
 343:form.c        **** }
 344:form.c        **** 
 345:form.c        **** static void input_right(Input *i)
 346:form.c        **** {
 347:form.c        **** 	if(i->Position < i->Length)
 348:form.c        **** 	{
 349:form.c        **** 		++(i->Position);
 350:form.c        **** 		input_render(i, 1);
 351:form.c        **** 	}
 352:form.c        **** }
 353:form.c        **** 
 354:form.c        **** static void input_event_key(Input *i, uint8_t key, uint8_t ascii)
 355:form.c        **** {
 356:form.c        **** 	if(ascii >= 32 && ascii <= 126)
 357:form.c        **** 	{
 358:form.c        **** 		input_insert(i, (char)ascii);
 359:form.c        **** 	}
 360:form.c        **** 	else if(ascii == '\b')
 361:form.c        **** 	{
 362:form.c        **** 		input_delete(i);
 363:form.c        **** 	}
 364:form.c        **** }
 365:form.c        **** 
 366:form.c        **** static void form_event_button(uint8_t button, uint8_t action)
 367:form.c        **** {
 368:form.c        **** 	Element *ce;
 369:form.c        **** 	if(!current_form)
 6227               	.LM645:
 6228 20e6 E091 0000 		lds r30,current_form
 6229 20ea F091 0000 		lds r31,current_form+1
 6231               	.LM646:
 6232 20ee 3097      		sbiw r30,0
 6233 20f0 01F4      		brne .+2
 6234 20f2 00C0      		rjmp .L267
 370:form.c        **** 	{
 371:form.c        **** 		return;
 372:form.c        **** 	}
 373:form.c        **** 
 374:form.c        **** 	if(current_form->OnKey)
 6236               	.LM647:
 6237 20f4 0780      		ldd __tmp_reg__,Z+7
 6238 20f6 F085      		ldd r31,Z+8
 6239 20f8 E02D      		mov r30,__tmp_reg__
 6241               	.LM648:
 6242 20fa 3097      		sbiw r30,0
 6243 20fc 01F0      		breq .L268
 375:form.c        **** 	{
 376:form.c        **** 		current_form->OnKey(button, action);
 6245               	.LM649:
 6246 20fe 8D2F      		mov r24,r29
 6247 2100 0995      		icall
 6248               	.L268:
 377:form.c        **** 	}
 378:form.c        **** 
 379:form.c        **** 	if(current_element < 0)
 6250               	.LM650:
 6251 2102 C091 0000 		lds r28,current_element
 6253               	.LM651:
 6254 2106 C7FD      		sbrc r28,7
 6255 2108 00C0      		rjmp .L269
 380:form.c        **** 	{
 381:form.c        **** 		return;
 382:form.c        **** 	}
 383:form.c        **** 
 384:form.c        **** 	ce = &current_form->Elements[current_element];
 6257               	.LM652:
 6258 210a E090 0000 		lds r14,current_form
 6259 210e F090 0000 		lds r15,current_form+1
 6260 2112 D701      		movw r26,r14
 6261 2114 1396      		adiw r26,3
 6262 2116 2D91      		ld r18,X+
 6263 2118 3C91      		ld r19,X
 6265               	.LM653:
 6266 211a C901      		movw r24,r18
 6267 211c BEE0      		ldi r27,lo8(14)
 6268 211e CB02      		muls r28,r27
 6269 2120 800D      		add r24,r0
 6270 2122 911D      		adc r25,r1
 6271 2124 1124      		clr __zero_reg__
 385:form.c        **** 	if(action == BUTTON_RELEASE)
 6273               	.LM654:
 6274 2126 1130      		cpi r17,lo8(1)
 6275 2128 01F4      		brne .+2
 6276 212a 00C0      		rjmp .L269
 386:form.c        **** 	{
 387:form.c        **** 		if(ce->Type == ELEMENT_TYPE_BUTTON)
 388:form.c        **** 		{
 389:form.c        **** 
 390:form.c        **** 		}
 391:form.c        **** 
 392:form.c        **** 		return;
 393:form.c        **** 	}
 394:form.c        **** 
 395:form.c        **** 	if(ce->Type == ELEMENT_TYPE_BUTTON ||
 6278               	.LM655:
 6279 212c FC01      		movw r30,r24
 6280 212e 4081      		ld r20,Z
 6282               	.LM656:
 6283 2130 5FEF      		ldi r21,lo8(-1)
 6284 2132 540F      		add r21,r20
 6286               	.LM657:
 6287 2134 5230      		cpi r21,lo8(2)
 6288 2136 00F0      		brlo .+2
 6289 2138 00C0      		rjmp .L269
 396:form.c        **** 		ce->Type == ELEMENT_TYPE_INPUT)
 397:form.c        **** 	{
 398:form.c        **** 		if(button == BUTTON_UP)
 6291               	.LM658:
 6292 213a D130      		cpi r29,lo8(1)
 6293 213c 01F0      		breq .+2
 6294 213e 00C0      		rjmp .L270
 6295               	.LBB238:
 6296               	.LBB239:
 116:form.c        **** 	{
 6298               	.LM659:
 6299 2140 C150      		subi r28,lo8(-(-1))
 118:form.c        **** 		{
 6301               	.LM660:
 6302 2142 5EE0      		ldi r21,lo8(14)
 6303               	.L271:
 116:form.c        **** 	{
 6305               	.LM661:
 6306 2144 CF3F      		cpi r28,lo8(-1)
 6307 2146 01F0      		breq .L273
 118:form.c        **** 		{
 6309               	.LM662:
 6310 2148 C502      		muls r28,r21
 6311 214a 6001      		movw r12,r0
 6312 214c 1124      		clr __zero_reg__
 118:form.c        **** 		{
 6314               	.LM663:
 6315 214e F901      		movw r30,r18
 6316 2150 EC0D      		add r30,r12
 6317 2152 FD1D      		adc r31,r13
 6318 2154 4081      		ld r20,Z
 118:form.c        **** 		{
 6320               	.LM664:
 6321 2156 4130      		cpi r20,lo8(1)
 6322 2158 01F4      		brne .L272
 6323               	.L365:
 6324               	.LBE239:
 6325               	.LBE238:
 6326               	.LBB241:
 6327               	.LBB242:
 105:form.c        **** 			element_render_sel(&current_form->Elements[i], 1);
 6329               	.LM665:
 6330 215a 60E0      		ldi r22,0
 6331 215c 0E94 0000 		call element_render_sel
 106:form.c        **** 			current_element = i;
 6333               	.LM666:
 6334 2160 D701      		movw r26,r14
 6335 2162 1396      		adiw r26,3
 6336 2164 8D91      		ld r24,X+
 6337 2166 9C91      		ld r25,X
 6338 2168 00C0      		rjmp .L354
 6339               	.L272:
 6340               	.LBE242:
 6341               	.LBE241:
 6342               	.LBB244:
 6343               	.LBB240:
 126:form.c        **** 		{
 6345               	.LM667:
 6346 216a 4230      		cpi r20,lo8(2)
 6347 216c 01F4      		brne .L274
 6348               	.L355:
 128:form.c        **** 			element_render_sel(&current_form->Elements[i], 1);
 6350               	.LM668:
 6351 216e 60E0      		ldi r22,0
 6352 2170 0E94 0000 		call element_render_sel
 129:form.c        **** 			current_element = i;
 6354               	.LM669:
 6355 2174 F701      		movw r30,r14
 6356 2176 8381      		ldd r24,Z+3
 6357 2178 9481      		ldd r25,Z+4
 6358               	.L354:
 6359 217a 61E0      		ldi r22,lo8(1)
 6360 217c 8C0D      		add r24,r12
 6361 217e 9D1D      		adc r25,r13
 6362 2180 0E94 0000 		call element_render_sel
 130:form.c        **** 			break;
 6364               	.LM670:
 6365 2184 C093 0000 		sts current_element,r28
 6366               	.L273:
 6367               	.LBE240:
 6368               	.LBE244:
 6369               	.LBE237:
 6370               	.LBE236:
 6371               	.LBB253:
 6372               	.LBB254:
 6374               	.Ltext32:
 213:keyboard.c    **** 
 214:keyboard.c    **** static void keyboard_key(uint8_t button, uint8_t action)
 215:keyboard.c    **** {
 216:keyboard.c    **** 	if(button == BUTTON_A && action == BUTTON_PRESS)
 217:keyboard.c    **** 	{
 218:keyboard.c    **** 		++kbd_mode;
 219:keyboard.c    **** 		if(kbd_mode == 3)
 220:keyboard.c    **** 		{
 221:keyboard.c    **** 			kbd_mode = 0;
 222:keyboard.c    **** 		}
 223:keyboard.c    **** 
 224:keyboard.c    **** 		render_keyboard();
 225:keyboard.c    **** 	}
 226:keyboard.c    **** 	else
 227:keyboard.c    **** 	{
 228:keyboard.c    **** 		if(kbd_mode != 2)
 6376               	.LM671:
 6377 2188 8091 0000 		lds r24,kbd_mode
 6378 218c 8230      		cpi r24,lo8(2)
 6379 218e 01F4      		brne .+2
 6380 2190 00C0      		rjmp .L286
 6381               	.L317:
 229:keyboard.c    **** 		{
 230:keyboard.c    **** 			if(action == BUTTON_PRESS || action == BUTTON_REPEAT)
 6383               	.LM672:
 6384 2192 1D7F      		andi r17,lo8(-3)
 6385 2194 01F0      		breq .+2
 6386 2196 00C0      		rjmp .L263
 231:keyboard.c    **** 			{
 232:keyboard.c    **** 				switch(button)
 6388               	.LM673:
 6389 2198 D230      		cpi r29,lo8(2)
 6390 219a 01F4      		brne .+2
 6391 219c 00C0      		rjmp .L288
 6392 219e 00F0      		brlo .+2
 6393 21a0 00C0      		rjmp .L289
 6394 21a2 DD23      		tst r29
 6395 21a4 01F4      		brne .+2
 6396 21a6 00C0      		rjmp .L290
 6397 21a8 D130      		cpi r29,lo8(1)
 6398 21aa 01F0      		breq .+2
 6399 21ac 00C0      		rjmp .L263
 6400               	.LBB255:
 6401               	.LBB256:
 233:keyboard.c    **** 				{
 234:keyboard.c    **** 					case BUTTON_UP:
 235:keyboard.c    **** 					{
 236:keyboard.c    **** 						uint8_t new;
 237:keyboard.c    **** 						new = pgm_read_byte(&(keys[cur_key].Up));
 6403               	.LM674:
 6404 21ae 8091 0000 		lds r24,cur_key
 6405 21b2 B9E0      		ldi r27,lo8(9)
 6406 21b4 8B9F      		mul r24,r27
 6407 21b6 F001      		movw r30,r0
 6408 21b8 1124      		clr __zero_reg__
 6409 21ba E050      		subi r30,lo8(-(keys+5))
 6410 21bc F040      		sbci r31,hi8(-(keys+5))
 6411               	.L360:
 6412               	.LBE256:
 6413               	.LBE255:
 6414               	.LBB257:
 6415               	.LBB258:
 238:keyboard.c    **** 						if(new == 0xFF) { return; }
 239:keyboard.c    **** 						render_key_move(cur_key, new);
 240:keyboard.c    **** 						cur_key = new;
 241:keyboard.c    **** 						break;
 242:keyboard.c    **** 					}
 243:keyboard.c    **** 
 244:keyboard.c    **** 					case BUTTON_DOWN:
 245:keyboard.c    **** 					{
 246:keyboard.c    **** 						uint8_t new;
 247:keyboard.c    **** 						new = pgm_read_byte(&(keys[cur_key].Down));
 6417               	.LM675:
 6418               	/* #APP */
 6419               	 ;  247 "keyboard.c" 1
 6420 21be C491      		lpm r28, Z
 6421               		
 6422               	 ;  0 "" 2
 6423               	/* #NOAPP */
 6424               	.LBE258:
 248:keyboard.c    **** 						if(new == 0xFF) { return; }
 6426               	.LM676:
 6427 21c0 CF3F      		cpi r28,lo8(-1)
 6428 21c2 01F4      		brne .+2
 6429 21c4 00C0      		rjmp .L263
 6430               	.LBE257:
 6431               	.LBB260:
 6432               	.LBB261:
 6433               	.LBB262:
 111:keyboard.c    **** 	render_key_sel(new);
 6435               	.LM677:
 6436 21c6 0E94 0000 		call render_key
 112:keyboard.c    **** }
 6438               	.LM678:
 6439 21ca 8C2F      		mov r24,r28
 6440 21cc 0E94 0000 		call render_key_sel
 6441               	.LBE262:
 6442               	.LBE261:
 249:keyboard.c    **** 						render_key_move(cur_key, new);
 250:keyboard.c    **** 						cur_key = new;
 251:keyboard.c    **** 						break;
 252:keyboard.c    **** 					}
 253:keyboard.c    **** 
 254:keyboard.c    **** 					case BUTTON_LEFT:
 255:keyboard.c    **** 					{
 256:keyboard.c    **** 						uint8_t new;
 257:keyboard.c    **** 						new = pgm_read_byte(&(keys[cur_key].Left));
 258:keyboard.c    **** 						if(new == 0xFF) { return; }
 259:keyboard.c    **** 						render_key_move(cur_key, new);
 260:keyboard.c    **** 						cur_key = new;
 261:keyboard.c    **** 						break;
 262:keyboard.c    **** 					}
 263:keyboard.c    **** 
 264:keyboard.c    **** 					case BUTTON_RIGHT:
 265:keyboard.c    **** 					{
 266:keyboard.c    **** 						uint8_t new;
 267:keyboard.c    **** 						new = pgm_read_byte(&(keys[cur_key].Right));
 268:keyboard.c    **** 						if(new == 0xFF) { return; }
 269:keyboard.c    **** 						render_key_move(cur_key, new);
 270:keyboard.c    **** 						cur_key = new;
 6444               	.LM679:
 6445 21d0 C093 0000 		sts cur_key,r28
 271:keyboard.c    **** 						break;
 6447               	.LM680:
 6448 21d4 00C0      		rjmp .L263
 6449               	.L274:
 6450 21d6 C150      		subi r28,lo8(-(-1))
 6451 21d8 00C0      		rjmp .L271
 6452               	.L270:
 6453               	.LBE260:
 6454               	.LBE254:
 6455               	.LBE253:
 6456               	.LBB307:
 6457               	.LBB252:
 6459               	.Ltext33:
 399:form.c        **** 		{
 400:form.c        **** 			element_prev();
 401:form.c        **** 		}
 402:form.c        **** 		else if(button == BUTTON_DOWN)
 6461               	.LM681:
 6462 21da D230      		cpi r29,lo8(2)
 6463 21dc 01F4      		brne .L277
 6464               	.LBB245:
 6465               	.LBB243:
  93:form.c        **** 	{
 6467               	.LM682:
 6468 21de CF5F      		subi r28,lo8(-(1))
  93:form.c        **** 	{
 6470               	.LM683:
 6471 21e0 D701      		movw r26,r14
 6472 21e2 1596      		adiw r26,5
 6473 21e4 6D91      		ld r22,X+
 6474 21e6 7C91      		ld r23,X
  95:form.c        **** 		{
 6476               	.LM684:
 6477 21e8 EEE0      		ldi r30,lo8(14)
 6478               	.L278:
  93:form.c        **** 	{
 6480               	.LM685:
 6481 21ea 4C2F      		mov r20,r28
 6482 21ec 0C2E      		mov __tmp_reg__,r28
 6483 21ee 000C      		lsl r0
 6484 21f0 550B      		sbc r21,r21
  93:form.c        **** 	{
 6486               	.LM686:
 6487 21f2 4617      		cp r20,r22
 6488 21f4 5707      		cpc r21,r23
 6489 21f6 04F4      		brge .L273
  95:form.c        **** 		{
 6491               	.LM687:
 6492 21f8 CE02      		muls r28,r30
 6493 21fa 6001      		movw r12,r0
 6494 21fc 1124      		clr __zero_reg__
  95:form.c        **** 		{
 6496               	.LM688:
 6497 21fe D901      		movw r26,r18
 6498 2200 AC0D      		add r26,r12
 6499 2202 BD1D      		adc r27,r13
 6500 2204 4C91      		ld r20,X
  95:form.c        **** 		{
 6502               	.LM689:
 6503 2206 4130      		cpi r20,lo8(1)
 6504 2208 01F4      		brne .+2
 6505 220a 00C0      		rjmp .L355
 103:form.c        **** 		{
 6507               	.LM690:
 6508 220c 4230      		cpi r20,lo8(2)
 6509 220e 01F4      		brne .+2
 6510 2210 00C0      		rjmp .L365
 6511 2212 CF5F      		subi r28,lo8(-(1))
 6512 2214 00C0      		rjmp .L278
 6513               	.L277:
 6514               	.LBE243:
 6515               	.LBE245:
 403:form.c        **** 		{
 404:form.c        **** 			element_next();
 405:form.c        **** 		}
 406:form.c        **** 		else
 407:form.c        **** 		{
 408:form.c        **** 			if(ce->Type == ELEMENT_TYPE_BUTTON)
 6517               	.LM691:
 6518 2216 4130      		cpi r20,lo8(1)
 6519 2218 01F4      		brne .L282
 409:form.c        **** 			{
 410:form.c        **** 				if(button == BUTTON_CENTER)
 6521               	.LM692:
 6522 221a D430      		cpi r29,lo8(4)
 6523 221c 01F4      		brne .L269
 411:form.c        **** 				{
 412:form.c        **** 					ce->E.B.Click();
 6525               	.LM693:
 6526 221e 0484      		ldd __tmp_reg__,Z+12
 6527 2220 F585      		ldd r31,Z+13
 6528 2222 E02D      		mov r30,__tmp_reg__
 6529 2224 0995      		icall
 6530 2226 00C0      		rjmp .L273
 6531               	.L282:
 413:form.c        **** 				}
 414:form.c        **** 			}
 415:form.c        **** 			else if(ce->Type == ELEMENT_TYPE_INPUT)
 416:form.c        **** 			{
 417:form.c        **** 				if(button == BUTTON_LEFT)
 6533               	.LM694:
 6534 2228 D111      		cpse r29,__zero_reg__
 6535 222a 00C0      		rjmp .L283
 6536               	.LBB246:
 6537               	.LBB247:
 338:form.c        **** 	{
 6539               	.LM695:
 6540 222c 2085      		ldd r18,Z+8
 338:form.c        **** 	{
 6542               	.LM696:
 6543 222e 2223      		tst r18
 6544 2230 01F4      		brne .+2
 6545 2232 00C0      		rjmp .L273
 340:form.c        **** 		input_render(i, 1);
 6547               	.LM697:
 6548 2234 2150      		subi r18,lo8(-(-1))
 6549 2236 2087      		std Z+8,r18
 6550               	.L356:
 6551               	.LBE247:
 6552               	.LBE246:
 6553               	.LBB248:
 6554               	.LBB249:
 350:form.c        **** 	}
 6556               	.LM698:
 6557 2238 61E0      		ldi r22,lo8(1)
 6558 223a 0196      		adiw r24,1
 6559 223c 0E94 0000 		call input_render
 6560 2240 00C0      		rjmp .L273
 6561               	.L283:
 6562               	.LBE249:
 6563               	.LBE248:
 418:form.c        **** 				{
 419:form.c        **** 					input_left(&ce->E.I);
 420:form.c        **** 				}
 421:form.c        **** 				else if(button == BUTTON_RIGHT)
 6565               	.LM699:
 6566 2242 D330      		cpi r29,lo8(3)
 6567 2244 01F4      		brne .L269
 6568               	.LBB251:
 6569               	.LBB250:
 347:form.c        **** 	{
 6571               	.LM700:
 6572 2246 2085      		ldd r18,Z+8
 347:form.c        **** 	{
 6574               	.LM701:
 6575 2248 3185      		ldd r19,Z+9
 6576 224a 2317      		cp r18,r19
 6577 224c 00F0      		brlo .+2
 6578 224e 00C0      		rjmp .L273
 349:form.c        **** 		input_render(i, 1);
 6580               	.LM702:
 6581 2250 2F5F      		subi r18,lo8(-(1))
 6582 2252 2087      		std Z+8,r18
 6583 2254 00C0      		rjmp .L356
 6584               	.L269:
 6585               	.LBE250:
 6586               	.LBE251:
 6587               	.LBE252:
 6588               	.LBE307:
 6589               	.LBB308:
 6590               	.LBB303:
 6592               	.Ltext34:
 216:keyboard.c    **** 	{
 6594               	.LM703:
 6595 2256 D530      		cpi r29,lo8(5)
 6596 2258 01F0      		breq .+2
 6597 225a 00C0      		rjmp .L273
 6598               	.L316:
 216:keyboard.c    **** 	{
 6600               	.LM704:
 6601 225c 1111      		cpse r17,__zero_reg__
 6602 225e 00C0      		rjmp .L273
 218:keyboard.c    **** 		if(kbd_mode == 3)
 6604               	.LM705:
 6605 2260 8091 0000 		lds r24,kbd_mode
 6606 2264 91E0      		ldi r25,lo8(1)
 6607 2266 980F      		add r25,r24
 219:keyboard.c    **** 		{
 6609               	.LM706:
 6610 2268 8230      		cpi r24,lo8(2)
 6611 226a 01F0      		breq .L284
 218:keyboard.c    **** 		if(kbd_mode == 3)
 6613               	.LM707:
 6614 226c 9093 0000 		sts kbd_mode,r25
 6615               	.L285:
 6616               	/* epilogue start */
 6617               	.LBE303:
 6618               	.LBE308:
 6619               	.LBE235:
 6620               	.LBE234:
 6622               	.Ltext35:
 6624               	.LM708:
 6625 2270 DF91      		pop r29
 6626 2272 CF91      		pop r28
 6627 2274 1F91      		pop r17
 6628 2276 FF90      		pop r15
 6629 2278 EF90      		pop r14
 6630 227a DF90      		pop r13
 6631 227c CF90      		pop r12
 6632               	.LBB315:
 6633               	.LBB312:
 6634               	.LBB309:
 6635               	.LBB304:
 6637               	.Ltext36:
 224:keyboard.c    **** 	}
 6639               	.LM709:
 6640 227e 0C94 0000 		jmp render_keyboard
 6641               	.L284:
 221:keyboard.c    **** 		}
 6643               	.LM710:
 6644 2282 1092 0000 		sts kbd_mode,__zero_reg__
 6645 2286 00C0      		rjmp .L285
 6646               	.L289:
 232:keyboard.c    **** 				{
 6648               	.LM711:
 6649 2288 D330      		cpi r29,lo8(3)
 6650 228a 01F4      		brne .+2
 6651 228c 00C0      		rjmp .L293
 6652 228e D430      		cpi r29,lo8(4)
 6653 2290 01F0      		breq .+2
 6654 2292 00C0      		rjmp .L263
 272:keyboard.c    **** 					}
 273:keyboard.c    **** 
 274:keyboard.c    **** 					case BUTTON_CENTER:
 275:keyboard.c    **** 					{
 276:keyboard.c    **** 						event_key(cur_key, key_shift(cur_key));
 6656               	.LM712:
 6657 2294 8091 0000 		lds r24,cur_key
 6658 2298 0E94 0000 		call key_shift
 6659 229c 282F      		mov r18,r24
 6660               	.LBB264:
 6661               	.LBB265:
 6662               	.LBB266:
 6664               	.Ltext37:
 422:form.c        **** 				{
 423:form.c        **** 					input_right(&ce->E.I);
 424:form.c        **** 				}
 425:form.c        **** 			}
 426:form.c        **** 		}
 427:form.c        **** 	}
 428:form.c        **** }
 429:form.c        **** 
 430:form.c        **** static void form_event_key(uint8_t key, uint8_t ascii)
 431:form.c        **** {
 432:form.c        **** 	Element *ce;
 433:form.c        **** 	if(!current_form)
 6666               	.LM713:
 6667 229e E091 0000 		lds r30,current_form
 6668 22a2 F091 0000 		lds r31,current_form+1
 6670               	.LM714:
 6671 22a6 3097      		sbiw r30,0
 6672 22a8 01F4      		brne .+2
 6673 22aa 00C0      		rjmp .L263
 434:form.c        **** 	{
 435:form.c        **** 		return;
 436:form.c        **** 	}
 437:form.c        **** 
 438:form.c        **** 	if(current_element < 0)
 6675               	.LM715:
 6676 22ac 8091 0000 		lds r24,current_element
 6678               	.LM716:
 6679 22b0 87FD      		sbrc r24,7
 6680 22b2 00C0      		rjmp .L263
 439:form.c        **** 	{
 440:form.c        **** 		return;
 441:form.c        **** 	}
 442:form.c        **** 
 443:form.c        **** 	ce = &current_form->Elements[current_element];
 6682               	.LM717:
 6683 22b4 A381      		ldd r26,Z+3
 6684 22b6 B481      		ldd r27,Z+4
 6685 22b8 EEE0      		ldi r30,lo8(14)
 6686 22ba 8E02      		muls r24,r30
 6687 22bc A00D      		add r26,r0
 6688 22be B11D      		adc r27,r1
 6689 22c0 1124      		clr __zero_reg__
 444:form.c        **** 	if(ce->Type == ELEMENT_TYPE_INPUT)
 6691               	.LM718:
 6692 22c2 8C91      		ld r24,X
 6693 22c4 8230      		cpi r24,lo8(2)
 6694 22c6 01F0      		breq .+2
 6695 22c8 00C0      		rjmp .L263
 445:form.c        **** 	{
 446:form.c        **** 		input_event_key(&ce->E.I, key, ascii);
 6697               	.LM719:
 6698 22ca AD01      		movw r20,r26
 6699 22cc 4F5F      		subi r20,-1
 6700 22ce 5F4F      		sbci r21,-1
 6701               	.LBB267:
 6702               	.LBB268:
 356:form.c        **** 	{
 6704               	.LM720:
 6705 22d0 80EE      		ldi r24,lo8(-32)
 6706 22d2 820F      		add r24,r18
 356:form.c        **** 	{
 6708               	.LM721:
 6709 22d4 8F35      		cpi r24,lo8(95)
 6710 22d6 00F0      		brlo .+2
 6711 22d8 00C0      		rjmp .L296
 6712               	.LBB269:
 6713               	.LBB270:
 308:form.c        **** 	{
 6715               	.LM722:
 6716 22da 1996      		adiw r26,9
 6717 22dc 9C91      		ld r25,X
 6718 22de 1997      		sbiw r26,9
 6719 22e0 692F      		mov r22,r25
 6720 22e2 70E0      		ldi r23,0
 308:form.c        **** 	{
 6722               	.LM723:
 6723 22e4 6F5F      		subi r22,-1
 6724 22e6 7F4F      		sbci r23,-1
 308:form.c        **** 	{
 6726               	.LM724:
 6727 22e8 1A96      		adiw r26,10
 6728 22ea 8C91      		ld r24,X
 6729 22ec 1A97      		sbiw r26,10
 308:form.c        **** 	{
 6731               	.LM725:
 6732 22ee 8617      		cp r24,r22
 6733 22f0 1706      		cpc __zero_reg__,r23
 6734 22f2 01F0      		breq .+2
 6735 22f4 04F4      		brge .+2
 6736 22f6 00C0      		rjmp .L263
 6737               	.LBB271:
 6738               	.LBB272:
 281:form.c        **** 	{
 6740               	.LM726:
 6741 22f8 1896      		adiw r26,8
 6742 22fa 8C91      		ld r24,X
 6743 22fc 1897      		sbiw r26,8
 281:form.c        **** 	{
 6745               	.LM727:
 6746 22fe 1B96      		adiw r26,11
 6747 2300 ED91      		ld r30,X+
 6748 2302 FC91      		ld r31,X
 6749 2304 1C97      		sbiw r26,11+1
 6750 2306 E80F      		add r30,r24
 6751 2308 F11D      		adc r31,__zero_reg__
 281:form.c        **** 	{
 6753               	.LM728:
 6754 230a 8081      		ld r24,Z
 6755 230c 8111      		cpse r24,__zero_reg__
 6756 230e 00C0      		rjmp .L357
 6757               	.L300:
 290:form.c        **** 	i->Text[i->Length] = '\0';
 6759               	.LM729:
 6760 2310 1996      		adiw r26,9
 6761 2312 8C91      		ld r24,X
 6762 2314 1997      		sbiw r26,9
 6763 2316 8F5F      		subi r24,lo8(-(1))
 6764 2318 1996      		adiw r26,9
 6765 231a 8C93      		st X,r24
 6766 231c 1997      		sbiw r26,9
 291:form.c        **** }
 6768               	.LM730:
 6769 231e 1B96      		adiw r26,11
 6770 2320 ED91      		ld r30,X+
 6771 2322 FC91      		ld r31,X
 6772 2324 1C97      		sbiw r26,11+1
 6773 2326 E80F      		add r30,r24
 6774 2328 F11D      		adc r31,__zero_reg__
 6775 232a 1082      		st Z,__zero_reg__
 6776               	.LBE272:
 6777               	.LBE271:
 311:form.c        **** 		input_render(i, 1);
 6779               	.LM731:
 6780 232c 1B96      		adiw r26,11
 6781 232e ED91      		ld r30,X+
 6782 2330 FC91      		ld r31,X
 6783 2332 1C97      		sbiw r26,11+1
 311:form.c        **** 		input_render(i, 1);
 6785               	.LM732:
 6786 2334 1896      		adiw r26,8
 6787 2336 8C91      		ld r24,X
 6788 2338 1897      		sbiw r26,8
 311:form.c        **** 		input_render(i, 1);
 6790               	.LM733:
 6791 233a 91E0      		ldi r25,lo8(1)
 6792 233c 980F      		add r25,r24
 6793 233e 1896      		adiw r26,8
 6794 2340 9C93      		st X,r25
 311:form.c        **** 		input_render(i, 1);
 6796               	.LM734:
 6797 2342 E80F      		add r30,r24
 6798 2344 F11D      		adc r31,__zero_reg__
 6799 2346 2083      		st Z,r18
 6800               	.L362:
 6801               	.LBE270:
 6802               	.LBE269:
 6803               	.LBB277:
 6804               	.LBB278:
 332:form.c        **** 	}
 6806               	.LM735:
 6807 2348 61E0      		ldi r22,lo8(1)
 6808 234a CA01      		movw r24,r20
 6809               	/* epilogue start */
 6810               	.LBE278:
 6811               	.LBE277:
 6812               	.LBE268:
 6813               	.LBE267:
 6814               	.LBE266:
 6815               	.LBE265:
 6816               	.LBE264:
 6817               	.LBE304:
 6818               	.LBE309:
 6819               	.LBE312:
 6820               	.LBE315:
 6822               	.Ltext38:
 6824               	.LM736:
 6825 234c DF91      		pop r29
 6826 234e CF91      		pop r28
 6827 2350 1F91      		pop r17
 6828 2352 FF90      		pop r15
 6829 2354 EF90      		pop r14
 6830 2356 DF90      		pop r13
 6831 2358 CF90      		pop r12
 6832               	.LBB316:
 6833               	.LBB313:
 6834               	.LBB310:
 6835               	.LBB305:
 6836               	.LBB297:
 6837               	.LBB295:
 6838               	.LBB293:
 6839               	.LBB291:
 6840               	.LBB289:
 6841               	.LBB286:
 6842               	.LBB284:
 6844               	.Ltext39:
 332:form.c        **** 	}
 6846               	.LM737:
 6847 235a 0C94 0000 		jmp input_render
 6848               	.L288:
 6849               	.LBE284:
 6850               	.LBE286:
 6851               	.LBE289:
 6852               	.LBE291:
 6853               	.LBE293:
 6854               	.LBE295:
 6855               	.LBE297:
 6856               	.LBB298:
 6857               	.LBB259:
 6859               	.Ltext40:
 247:keyboard.c    **** 						if(new == 0xFF) { return; }
 6861               	.LM738:
 6862 235e 8091 0000 		lds r24,cur_key
 6863 2362 49E0      		ldi r20,lo8(9)
 6864 2364 849F      		mul r24,r20
 6865 2366 F001      		movw r30,r0
 6866 2368 1124      		clr __zero_reg__
 6867 236a E050      		subi r30,lo8(-(keys+6))
 6868 236c F040      		sbci r31,hi8(-(keys+6))
 6869 236e 00C0      		rjmp .L360
 6870               	.L290:
 6871               	.LBE259:
 6872               	.LBE298:
 6873               	.LBB299:
 6874               	.LBB300:
 257:keyboard.c    **** 						if(new == 0xFF) { return; }
 6876               	.LM739:
 6877 2370 8091 0000 		lds r24,cur_key
 6878 2374 99E0      		ldi r25,lo8(9)
 6879 2376 899F      		mul r24,r25
 6880 2378 F001      		movw r30,r0
 6881 237a 1124      		clr __zero_reg__
 6882 237c E050      		subi r30,lo8(-(keys+3))
 6883 237e F040      		sbci r31,hi8(-(keys+3))
 6884 2380 00C0      		rjmp .L360
 6885               	.L293:
 6886               	.LBE300:
 6887               	.LBE299:
 6888               	.LBB301:
 6889               	.LBB263:
 267:keyboard.c    **** 						if(new == 0xFF) { return; }
 6891               	.LM740:
 6892 2382 8091 0000 		lds r24,cur_key
 6893 2386 A9E0      		ldi r26,lo8(9)
 6894 2388 8A9F      		mul r24,r26
 6895 238a F001      		movw r30,r0
 6896 238c 1124      		clr __zero_reg__
 6897 238e E050      		subi r30,lo8(-(keys+4))
 6898 2390 F040      		sbci r31,hi8(-(keys+4))
 6899 2392 00C0      		rjmp .L360
 6900               	.L299:
 6901               	.LBE263:
 6902               	.LBE301:
 6903               	.LBB302:
 6904               	.LBB296:
 6905               	.LBB294:
 6906               	.LBB292:
 6907               	.LBB290:
 6908               	.LBB287:
 6909               	.LBB276:
 6910               	.LBB275:
 6911               	.LBB274:
 6912               	.LBB273:
 6914               	.Ltext41:
 286:form.c        **** 		}
 6916               	.LM741:
 6917 2394 E60F      		add r30,r22
 6918 2396 F71F      		adc r31,r23
 6919 2398 8081      		ld r24,Z
 286:form.c        **** 		}
 6921               	.LM742:
 6922 239a 8183      		std Z+1,r24
 6923               	.L357:
 6924 239c 9150      		subi r25,lo8(-(-1))
 284:form.c        **** 		{
 6926               	.LM743:
 6927 239e 692F      		mov r22,r25
 6928 23a0 092E      		mov __tmp_reg__,r25
 6929 23a2 000C      		lsl r0
 6930 23a4 770B      		sbc r23,r23
 286:form.c        **** 		}
 6932               	.LM744:
 6933 23a6 1B96      		adiw r26,11
 6934 23a8 ED91      		ld r30,X+
 6935 23aa FC91      		ld r31,X
 6936 23ac 1C97      		sbiw r26,11+1
 284:form.c        **** 		{
 6938               	.LM745:
 6939 23ae 1896      		adiw r26,8
 6940 23b0 8C91      		ld r24,X
 6941 23b2 1897      		sbiw r26,8
 284:form.c        **** 		{
 6943               	.LM746:
 6944 23b4 8617      		cp r24,r22
 6945 23b6 1706      		cpc __zero_reg__,r23
 6946 23b8 01F0      		breq .L299
 6947 23ba 04F0      		brlt .L299
 6948 23bc 00C0      		rjmp .L300
 6949               	.L296:
 6950               	.LBE273:
 6951               	.LBE274:
 6952               	.LBE275:
 6953               	.LBE276:
 6954               	.LBE287:
 360:form.c        **** 	{
 6956               	.LM747:
 6957 23be 2830      		cpi r18,lo8(8)
 6958 23c0 01F0      		breq .+2
 6959 23c2 00C0      		rjmp .L263
 6960               	.LBB288:
 6961               	.LBB285:
 326:form.c        **** 	{
 6963               	.LM748:
 6964 23c4 1896      		adiw r26,8
 6965 23c6 9C91      		ld r25,X
 6966 23c8 1897      		sbiw r26,8
 326:form.c        **** 	{
 6968               	.LM749:
 6969 23ca 9923      		tst r25
 6970 23cc 01F4      		brne .+2
 6971 23ce 00C0      		rjmp .L263
 6972               	.LBB279:
 6973               	.LBB280:
 296:form.c        **** 	{
 6975               	.LM750:
 6976 23d0 1B96      		adiw r26,11
 6977 23d2 ED91      		ld r30,X+
 6978 23d4 FC91      		ld r31,X
 6979 23d6 1C97      		sbiw r26,11+1
 6980 23d8 E90F      		add r30,r25
 6981 23da F11D      		adc r31,__zero_reg__
 296:form.c        **** 	{
 6983               	.LM751:
 6984 23dc 8081      		ld r24,Z
 6985 23de 8111      		cpse r24,__zero_reg__
 6986 23e0 00C0      		rjmp .L302
 6987               	.L304:
 6988               	.LBE280:
 6989               	.LBE279:
 329:form.c        **** 		--(i->Length);
 6991               	.LM752:
 6992 23e2 1896      		adiw r26,8
 6993 23e4 8C91      		ld r24,X
 6994 23e6 1897      		sbiw r26,8
 6995 23e8 8150      		subi r24,lo8(-(-1))
 6996 23ea 1896      		adiw r26,8
 6997 23ec 8C93      		st X,r24
 6998 23ee 1897      		sbiw r26,8
 330:form.c        **** 		i->Text[i->Length] = '\0';
 7000               	.LM753:
 7001 23f0 1996      		adiw r26,9
 7002 23f2 9C91      		ld r25,X
 7003 23f4 1997      		sbiw r26,9
 7004 23f6 9150      		subi r25,lo8(-(-1))
 7005 23f8 1996      		adiw r26,9
 7006 23fa 9C93      		st X,r25
 7007 23fc 1997      		sbiw r26,9
 331:form.c        **** 		input_render(i, 1);
 7009               	.LM754:
 7010 23fe 1B96      		adiw r26,11
 7011 2400 ED91      		ld r30,X+
 7012 2402 FC91      		ld r31,X
 7013 2404 E90F      		add r30,r25
 7014 2406 F11D      		adc r31,__zero_reg__
 7015 2408 1082      		st Z,__zero_reg__
 7016 240a 00C0      		rjmp .L362
 7017               	.L303:
 7018               	.LBB283:
 7019               	.LBB282:
 7020               	.LBB281:
 301:form.c        **** 		}
 7022               	.LM755:
 7023 240c 3197      		sbiw r30,1
 7024 240e 8083      		st Z,r24
 7025 2410 9F5F      		subi r25,lo8(-(1))
 7026               	.L302:
 299:form.c        **** 		{
 7028               	.LM756:
 7029 2412 1B96      		adiw r26,11
 7030 2414 ED91      		ld r30,X+
 7031 2416 FC91      		ld r31,X
 7032 2418 1C97      		sbiw r26,11+1
 299:form.c        **** 		{
 7034               	.LM757:
 7035 241a E90F      		add r30,r25
 7036 241c F11D      		adc r31,__zero_reg__
 7037 241e 97FD      		sbrc r25,7
 7038 2420 FA95      		dec r31
 7039 2422 8081      		ld r24,Z
 299:form.c        **** 		{
 7041               	.LM758:
 7042 2424 8111      		cpse r24,__zero_reg__
 7043 2426 00C0      		rjmp .L303
 7044 2428 00C0      		rjmp .L304
 7045               	.L305:
 7046               	.LBE281:
 7047               	.LBE282:
 7048               	.LBE283:
 7049               	.LBE285:
 7050               	.LBE288:
 7051               	.LBE290:
 7052               	.LBE292:
 7053               	.LBE294:
 7054               	.LBE296:
 7055               	.LBE302:
 7057               	.Ltext42:
 277:keyboard.c    **** 						break;
 278:keyboard.c    **** 					}
 279:keyboard.c    **** 				}
 280:keyboard.c    **** 			}
 281:keyboard.c    **** 		}
 282:keyboard.c    **** 		else
 283:keyboard.c    **** 		{
 284:keyboard.c    **** 			switch(action)
 285:keyboard.c    **** 			{
 286:keyboard.c    **** 				case BUTTON_PRESS:
 287:keyboard.c    **** 					lcd_color(LCD_BLUE);
 7059               	.LM759:
 7060 242a 8FE1      		ldi r24,lo8(31)
 7061 242c 90E0      		ldi r25,0
 7062               	.L358:
 288:keyboard.c    **** 					break;
 289:keyboard.c    **** 
 290:keyboard.c    **** 				case BUTTON_RELEASE:
 291:keyboard.c    **** 					lcd_color(LCD_WHITE);
 7064               	.LM760:
 7065 242e 9093 0000 		sts _color+1,r25
 7066 2432 8093 0000 		sts _color,r24
 292:keyboard.c    **** 					break;
 7068               	.LM761:
 7069 2436 00C0      		rjmp .L307
 7070               	.L306:
 291:keyboard.c    **** 					break;
 7072               	.LM762:
 7073 2438 8FEF      		ldi r24,lo8(-1)
 7074 243a 9FEF      		ldi r25,lo8(-1)
 7075 243c 00C0      		rjmp .L358
 7076               	.L310:
 293:keyboard.c    **** 			}
 294:keyboard.c    **** 
 295:keyboard.c    **** 			switch(button)
 296:keyboard.c    **** 			{
 297:keyboard.c    **** 				case BUTTON_A:
 298:keyboard.c    **** 					lcd_rect(5 + 1, LCD_HEIGHT - 80 + 5 + 1, 18, 18);
 7078               	.LM763:
 7079 243e 66EF      		ldi r22,lo8(-10)
 7080 2440 70E0      		ldi r23,0
 7081               	.L366:
 299:keyboard.c    **** 					break;
 300:keyboard.c    **** 
 301:keyboard.c    **** 				case BUTTON_B:
 302:keyboard.c    **** 					lcd_rect(5 + 1, LCD_HEIGHT - 80 + 30 + 1, 18, 18);
 7083               	.LM764:
 7084 2442 86E0      		ldi r24,lo8(6)
 7085 2444 90E0      		ldi r25,0
 7086               	.L363:
 7087               	/* epilogue start */
 7088               	.LBE305:
 7089               	.LBE310:
 7090               	.LBE313:
 7091               	.LBE316:
 7093               	.Ltext43:
 7095               	.LM765:
 7096 2446 DF91      		pop r29
 7097 2448 CF91      		pop r28
 7098 244a 1F91      		pop r17
 7099 244c FF90      		pop r15
 7100 244e EF90      		pop r14
 7101 2450 DF90      		pop r13
 7102 2452 CF90      		pop r12
 7103               	.LBB317:
 7104               	.LBB314:
 7105               	.LBB311:
 7106               	.LBB306:
 7108               	.Ltext44:
 303:keyboard.c    **** 					break;
 304:keyboard.c    **** 
 305:keyboard.c    **** 				case BUTTON_CENTER:
 306:keyboard.c    **** 					lcd_rect(110 + 1, LCD_HEIGHT - 80 + 30 + 1, 18, 18);
 307:keyboard.c    **** 					break;
 308:keyboard.c    **** 
 309:keyboard.c    **** 				case BUTTON_RIGHT:
 310:keyboard.c    **** 					lcd_rect(135 + 1, LCD_HEIGHT - 80 + 30 + 1, 18, 18);
 311:keyboard.c    **** 					break;
 312:keyboard.c    **** 
 313:keyboard.c    **** 				case BUTTON_LEFT:
 314:keyboard.c    **** 					lcd_rect(85 + 1, LCD_HEIGHT - 80 + 30 + 1, 18, 18);
 315:keyboard.c    **** 					break;
 316:keyboard.c    **** 
 317:keyboard.c    **** 				case BUTTON_UP:
 318:keyboard.c    **** 					lcd_rect(110 + 1, LCD_HEIGHT - 80 + 5 + 1, 18, 18);
 319:keyboard.c    **** 					break;
 320:keyboard.c    **** 
 321:keyboard.c    **** 				case BUTTON_DOWN:
 322:keyboard.c    **** 					lcd_rect(110 + 1, LCD_HEIGHT - 80 + 55 + 1, 18, 18);
 7110               	.LM766:
 7111 2454 0C94 0000 		jmp lcd_rect
 7112               	.L308:
 302:keyboard.c    **** 					break;
 7114               	.LM767:
 7115 2458 6FE0      		ldi r22,lo8(15)
 7116 245a 71E0      		ldi r23,lo8(1)
 7117 245c 00C0      		rjmp .L366
 7118               	.L311:
 306:keyboard.c    **** 					break;
 7120               	.LM768:
 7121 245e 6FE0      		ldi r22,lo8(15)
 7122 2460 71E0      		ldi r23,lo8(1)
 7123               	.L364:
 7125               	.LM769:
 7126 2462 8FE6      		ldi r24,lo8(111)
 7127 2464 90E0      		ldi r25,0
 7128 2466 00C0      		rjmp .L363
 7129               	.L312:
 310:keyboard.c    **** 					break;
 7131               	.LM770:
 7132 2468 6FE0      		ldi r22,lo8(15)
 7133 246a 71E0      		ldi r23,lo8(1)
 7134 246c 88E8      		ldi r24,lo8(-120)
 7135 246e 90E0      		ldi r25,0
 7136 2470 00C0      		rjmp .L363
 7137               	.L315:
 314:keyboard.c    **** 					break;
 7139               	.LM771:
 7140 2472 6FE0      		ldi r22,lo8(15)
 7141 2474 71E0      		ldi r23,lo8(1)
 7142 2476 86E5      		ldi r24,lo8(86)
 7143 2478 90E0      		ldi r25,0
 7144 247a 00C0      		rjmp .L363
 7145               	.L314:
 318:keyboard.c    **** 					break;
 7147               	.LM772:
 7148 247c 66EF      		ldi r22,lo8(-10)
 7149 247e 70E0      		ldi r23,0
 7150 2480 00C0      		rjmp .L364
 7151               	.L313:
 7153               	.LM773:
 7154 2482 68E2      		ldi r22,lo8(40)
 7155 2484 71E0      		ldi r23,lo8(1)
 7156 2486 00C0      		rjmp .L364
 7157               	.L266:
 216:keyboard.c    **** 	{
 7159               	.LM774:
 7160 2488 D530      		cpi r29,lo8(5)
 7161 248a 01F0      		breq .+2
 7162 248c 00C0      		rjmp .L317
 7163 248e 00C0      		rjmp .L316
 7164               	.L267:
 7165 2490 D530      		cpi r29,lo8(5)
 7166 2492 01F4      		brne .+2
 7167 2494 00C0      		rjmp .L316
 7168               	.L286:
 284:keyboard.c    **** 			{
 7170               	.LM775:
 7171 2496 1123      		tst r17
 7172 2498 01F0      		breq .L305
 7173 249a 1130      		cpi r17,lo8(1)
 7174 249c 01F0      		breq .L306
 7175               	.L307:
 7176 249e D730      		cpi r29,lo8(7)
 7177 24a0 00F0      		brlo .+2
 7178 24a2 00C0      		rjmp .L263
 7179 24a4 ED2F      		mov r30,r29
 7180 24a6 F0E0      		ldi r31,0
 7181 24a8 E050      		subi r30,lo8(-(gs(.L309)))
 7182 24aa F040      		sbci r31,hi8(-(gs(.L309)))
 302:keyboard.c    **** 					break;
 7184               	.LM776:
 7185 24ac 22E1      		ldi r18,lo8(18)
 7186 24ae 30E0      		ldi r19,0
 7187 24b0 42E1      		ldi r20,lo8(18)
 7188 24b2 50E0      		ldi r21,0
 7189 24b4 0C94 0000 		jmp __tablejump2__
 7190               		.section	.jumptables.gcc.event_button,"a",@progbits
 7191               		.p2align	1
 7192               	.L309:
 7193 0000 0000      		.word gs(.L315)
 7194 0002 0000      		.word gs(.L314)
 7195 0004 0000      		.word gs(.L313)
 7196 0006 0000      		.word gs(.L312)
 7197 0008 0000      		.word gs(.L311)
 7198 000a 0000      		.word gs(.L310)
 7199 000c 0000      		.word gs(.L308)
 7200               		.text
 7201               	.LBE306:
 7202               	.LBE311:
 7203               	.LBE314:
 7204               	.LBE317:
 7242               	.Lscope29:
 7248               	form_open:
 7250               	.Ltext45:
 137:form.c        **** 	current_form = form;
 7252               	.LM777:
 7253               	.LFBB30:
 7254 24b8 0F93      		push r16
 7255 24ba 1F93      		push r17
 7256 24bc CF93      		push r28
 7257 24be DF93      		push r29
 7258               	/* prologue: function */
 7259               	/* frame size = 0 */
 7260               	/* stack size = 4 */
 7261               	.L__stack_usage = 4
 7262 24c0 EC01      		movw r28,r24
 138:form.c        **** 	current_element = -1;
 7264               	.LM778:
 7265 24c2 9093 0000 		sts current_form+1,r25
 7266 24c6 8093 0000 		sts current_form,r24
 139:form.c        **** 	element_first();
 7268               	.LM779:
 7269 24ca 8FEF      		ldi r24,lo8(-1)
 7270 24cc 8093 0000 		sts current_element,r24
 7271               	.LBB324:
 7272               	.LBB325:
  79:form.c        **** 	{
 7274               	.LM780:
 7275 24d0 2D81      		ldd r18,Y+5
 7276 24d2 3E81      		ldd r19,Y+6
  79:form.c        **** 	{
 7278               	.LM781:
 7279 24d4 80E0      		ldi r24,0
  81:form.c        **** 			current_form->Elements[i].Type == ELEMENT_TYPE_INPUT)
 7281               	.LM782:
 7282 24d6 6EE0      		ldi r22,lo8(14)
 7283               	.L368:
  79:form.c        **** 	{
 7285               	.LM783:
 7286 24d8 482F      		mov r20,r24
 7287 24da 082E      		mov __tmp_reg__,r24
 7288 24dc 000C      		lsl r0
 7289 24de 550B      		sbc r21,r21
  79:form.c        **** 	{
 7291               	.LM784:
 7292 24e0 4217      		cp r20,r18
 7293 24e2 5307      		cpc r21,r19
 7294 24e4 04F4      		brge .L370
  81:form.c        **** 			current_form->Elements[i].Type == ELEMENT_TYPE_INPUT)
 7296               	.LM785:
 7297 24e6 EB81      		ldd r30,Y+3
 7298 24e8 FC81      		ldd r31,Y+4
 7299 24ea 8602      		muls r24,r22
 7300 24ec E00D      		add r30,r0
 7301 24ee F11D      		adc r31,r1
 7302 24f0 1124      		clr __zero_reg__
  81:form.c        **** 			current_form->Elements[i].Type == ELEMENT_TYPE_INPUT)
 7304               	.LM786:
 7305 24f2 9081      		ld r25,Z
 7306 24f4 9150      		subi r25,lo8(-(-1))
  81:form.c        **** 			current_form->Elements[i].Type == ELEMENT_TYPE_INPUT)
 7308               	.LM787:
 7309 24f6 9230      		cpi r25,lo8(2)
 7310 24f8 00F4      		brsh .L369
  84:form.c        **** 			break;
 7312               	.LM788:
 7313 24fa 8093 0000 		sts current_element,r24
 7314               	.L370:
 7315               	.LBE325:
 7316               	.LBE324:
 7317               	.LBB326:
 7318               	.LBB327:
 149:form.c        **** 	lcd_rect(0, 0, LCD_WIDTH, 20);
 7320               	.LM789:
 7321 24fe 8FE1      		ldi r24,lo8(31)
 7322 2500 90E0      		ldi r25,0
 7323 2502 9093 0000 		sts _color+1,r25
 7324 2506 8093 0000 		sts _color,r24
 150:form.c        **** 
 7326               	.LM790:
 7327 250a 24E1      		ldi r18,lo8(20)
 7328 250c 30E0      		ldi r19,0
 7329 250e 40EF      		ldi r20,lo8(-16)
 7330 2510 50E0      		ldi r21,0
 7331 2512 70E0      		ldi r23,0
 7332 2514 60E0      		ldi r22,0
 7333 2516 90E0      		ldi r25,0
 7334 2518 80E0      		ldi r24,0
 7335 251a 0E94 0000 		call lcd_rect
 153:form.c        **** 	lcd_rect(0, 20, LCD_WIDTH, 220);
 7337               	.LM791:
 7338 251e 8FEF      		ldi r24,lo8(-1)
 7339 2520 9FEF      		ldi r25,lo8(-1)
 7340 2522 9093 0000 		sts _color+1,r25
 7341 2526 8093 0000 		sts _color,r24
 154:form.c        **** 
 7343               	.LM792:
 7344 252a 2CED      		ldi r18,lo8(-36)
 7345 252c 30E0      		ldi r19,0
 7346 252e 40EF      		ldi r20,lo8(-16)
 7347 2530 50E0      		ldi r21,0
 7348 2532 64E1      		ldi r22,lo8(20)
 7349 2534 70E0      		ldi r23,0
 7350 2536 90E0      		ldi r25,0
 7351 2538 80E0      		ldi r24,0
 7352 253a 0E94 0000 		call lcd_rect
 157:form.c        **** 	{
 7354               	.LM793:
 7355 253e 8881      		ld r24,Y
 159:form.c        **** 	}
 7357               	.LM794:
 7358 2540 4981      		ldd r20,Y+1
 7359 2542 5A81      		ldd r21,Y+2
 7360 2544 64E0      		ldi r22,lo8(4)
 7361 2546 70E0      		ldi r23,0
 157:form.c        **** 	{
 7363               	.LM795:
 7364 2548 80FF      		sbrs r24,0
 7365 254a 00C0      		rjmp .L372
 159:form.c        **** 	}
 7367               	.LM796:
 7368 254c 84E0      		ldi r24,lo8(4)
 7369 254e 90E0      		ldi r25,0
 7370 2550 0E94 0000 		call lcd_string_P.isra.0
 7371               	.L373:
 7372               	.LBB328:
 7373               	.LBB329:
 192:form.c        **** 	switch(e->Type)
 7375               	.LM797:
 7376 2554 10E0      		ldi r17,0
 7377               	.LBE329:
 7378               	.LBE328:
 168:form.c        **** 	}
 7380               	.LM798:
 7381 2556 0EE0      		ldi r16,lo8(14)
 7382 2558 00C0      		rjmp .L379
 7383               	.L369:
 7384 255a 8F5F      		subi r24,lo8(-(1))
 7385 255c 00C0      		rjmp .L368
 7386               	.L372:
 163:form.c        **** 	}
 7388               	.LM799:
 7389 255e 84E0      		ldi r24,lo8(4)
 7390 2560 90E0      		ldi r25,0
 7391 2562 0E94 0000 		call lcd_string
 7392 2566 00C0      		rjmp .L373
 7393               	.L380:
 168:form.c        **** 	}
 7395               	.LM800:
 7396 2568 2B81      		ldd r18,Y+3
 7397 256a 3C81      		ldd r19,Y+4
 168:form.c        **** 	}
 7399               	.LM801:
 7400 256c C901      		movw r24,r18
 7401 256e 109F      		mul r17,r16
 7402 2570 800D      		add r24,r0
 7403 2572 911D      		adc r25,r1
 7404 2574 1124      		clr __zero_reg__
 7405               	.LBB332:
 7406               	.LBB330:
 192:form.c        **** 	switch(e->Type)
 7408               	.LM802:
 7409 2576 4091 0000 		lds r20,current_element
 192:form.c        **** 	switch(e->Type)
 7411               	.LM803:
 7412 257a 47FD      		sbrc r20,7
 7413 257c 00C0      		rjmp .L381
 192:form.c        **** 	switch(e->Type)
 7415               	.LM804:
 7416 257e 4002      		muls r20,r16
 7417 2580 200D      		add r18,r0
 7418 2582 311D      		adc r19,r1
 7419 2584 1124      		clr __zero_reg__
 192:form.c        **** 	switch(e->Type)
 7421               	.LM805:
 7422 2586 61E0      		ldi r22,lo8(1)
 7423 2588 8217      		cp r24,r18
 7424 258a 9307      		cpc r25,r19
 7425 258c 01F0      		breq .L374
 7426               	.L381:
 7427 258e 60E0      		ldi r22,0
 7428               	.L374:
 193:form.c        **** 	{
 7430               	.LM806:
 7431 2590 FC01      		movw r30,r24
 7432 2592 2081      		ld r18,Z
 193:form.c        **** 	{
 7434               	.LM807:
 7435 2594 2130      		cpi r18,lo8(1)
 7436 2596 01F0      		breq .L376
 7437 2598 2230      		cpi r18,lo8(2)
 7438 259a 01F0      		breq .L377
 7439 259c 2111      		cpse r18,__zero_reg__
 7440 259e 00C0      		rjmp .L378
 196:form.c        **** 			break;
 7442               	.LM808:
 7443 25a0 0196      		adiw r24,1
 7444 25a2 0E94 0000 		call label_render
 7445               	.L378:
 7446               	.LBE330:
 7447               	.LBE332:
 166:form.c        **** 	{
 7449               	.LM809:
 7450 25a6 1F5F      		subi r17,lo8(-(1))
 7451               	.L379:
 166:form.c        **** 	{
 7453               	.LM810:
 7454 25a8 8D81      		ldd r24,Y+5
 7455 25aa 9E81      		ldd r25,Y+6
 7456 25ac 1817      		cp r17,r24
 7457 25ae 1906      		cpc __zero_reg__,r25
 7458 25b0 04F0      		brlt .L380
 7459               	/* epilogue start */
 7460               	.LBE327:
 7461               	.LBE326:
 142:form.c        **** 
 7463               	.LM811:
 7464 25b2 DF91      		pop r29
 7465 25b4 CF91      		pop r28
 7466 25b6 1F91      		pop r17
 7467 25b8 0F91      		pop r16
 7468 25ba 0895      		ret
 7469               	.L376:
 7470               	.LBB335:
 7471               	.LBB334:
 7472               	.LBB333:
 7473               	.LBB331:
 200:form.c        **** 			break;
 7475               	.LM812:
 7476 25bc 0196      		adiw r24,1
 7477 25be 0E94 0000 		call button_render
 201:form.c        **** 
 7479               	.LM813:
 7480 25c2 00C0      		rjmp .L378
 7481               	.L377:
 204:form.c        **** 			break;
 7483               	.LM814:
 7484 25c4 0196      		adiw r24,1
 7485 25c6 0E94 0000 		call input_render
 205:form.c        **** 	}
 7487               	.LM815:
 7488 25ca 00C0      		rjmp .L378
 7489               	.LBE331:
 7490               	.LBE333:
 7491               	.LBE334:
 7492               	.LBE335:
 7503               	.Lscope30:
 7507               	apps_open:
 7509               	.Ltext46:
   1:apps.c        **** static void table_open(void);
   2:apps.c        **** static void plot_open(void);
   3:apps.c        **** static void request_open(void);
   4:apps.c        **** static void message_open(void);
   5:apps.c        **** static void clock_open(void);
   6:apps.c        **** 
   7:apps.c        **** static Element apps_elements[] =
   8:apps.c        **** {
   9:apps.c        **** 	/* Calculator */
  10:apps.c        **** 	{
  11:apps.c        **** 		.Type = ELEMENT_TYPE_BUTTON,
  12:apps.c        **** 		.E = { .B =
  13:apps.c        **** 		{
  14:apps.c        **** 			.Flags = FLAG_TEXT_PROGMEM,
  15:apps.c        **** 			.X = 5,
  16:apps.c        **** 			.Y = 5,
  17:apps.c        **** 			.W = 230,
  18:apps.c        **** 			.H = 20,
  19:apps.c        **** 			.Text = { .Flash = calculator },
  20:apps.c        **** 			.Click = table_open
  21:apps.c        **** 		}}
  22:apps.c        **** 	},
  23:apps.c        **** 
  24:apps.c        **** 	/* Function Plotter */
  25:apps.c        **** 	{
  26:apps.c        **** 		.Type = ELEMENT_TYPE_BUTTON,
  27:apps.c        **** 		.E = { .B =
  28:apps.c        **** 		{
  29:apps.c        **** 			.Flags = FLAG_TEXT_PROGMEM,
  30:apps.c        **** 			.X = 5,
  31:apps.c        **** 			.Y = 30,
  32:apps.c        **** 			.W = 230,
  33:apps.c        **** 			.H = 20,
  34:apps.c        **** 			.Text = { .Flash = function_plotter },
  35:apps.c        **** 			.Click = plot_open
  36:apps.c        **** 		}}
  37:apps.c        **** 	},
  38:apps.c        **** 
  39:apps.c        **** 	/* Clock */
  40:apps.c        **** 	{
  41:apps.c        **** 		.Type = ELEMENT_TYPE_BUTTON,
  42:apps.c        **** 		.E = { .B =
  43:apps.c        **** 		{
  44:apps.c        **** 			.Flags = FLAG_TEXT_PROGMEM,
  45:apps.c        **** 			.X = 5,
  46:apps.c        **** 			.Y = 55,
  47:apps.c        **** 			.W = 230,
  48:apps.c        **** 			.H = 20,
  49:apps.c        **** 			.Text = { .Flash = clock },
  50:apps.c        **** 			.Click = clock_open
  51:apps.c        **** 		}}
  52:apps.c        **** 	},
  53:apps.c        **** 
  54:apps.c        **** 	/* Request Resource */
  55:apps.c        **** 	{
  56:apps.c        **** 		.Type = ELEMENT_TYPE_BUTTON,
  57:apps.c        **** 		.E = { .B =
  58:apps.c        **** 		{
  59:apps.c        **** 			.Flags = FLAG_TEXT_PROGMEM,
  60:apps.c        **** 			.X = 5,
  61:apps.c        **** 			.Y = 80,
  62:apps.c        **** 			.W = 230,
  63:apps.c        **** 			.H = 20,
  64:apps.c        **** 			.Text = { .Flash = request_resource },
  65:apps.c        **** 			.Click = request_open
  66:apps.c        **** 		}}
  67:apps.c        **** 	},
  68:apps.c        **** 
  69:apps.c        **** 	/* Send Message */
  70:apps.c        **** 	{
  71:apps.c        **** 		.Type = ELEMENT_TYPE_BUTTON,
  72:apps.c        **** 		.E = { .B =
  73:apps.c        **** 		{
  74:apps.c        **** 			.Flags = FLAG_TEXT_PROGMEM,
  75:apps.c        **** 			.X = 5,
  76:apps.c        **** 			.Y = 105,
  77:apps.c        **** 			.W = 230,
  78:apps.c        **** 			.H = 20,
  79:apps.c        **** 			.Text = { .Flash = send_message },
  80:apps.c        **** 			.Click = message_open
  81:apps.c        **** 		}}
  82:apps.c        **** 	},
  83:apps.c        **** 
  84:apps.c        **** 	/* About Label */
  85:apps.c        **** 	{
  86:apps.c        **** 		.Type = ELEMENT_TYPE_LABEL,
  87:apps.c        **** 		.E = { .L =
  88:apps.c        **** 		{
  89:apps.c        **** 			.Flags = FLAG_TEXT_PROGMEM,
  90:apps.c        **** 			.X = 5,
  91:apps.c        **** 			.Y = 205,
  92:apps.c        **** 			.Text = { .Flash = about }
  93:apps.c        **** 		}}
  94:apps.c        **** 	},
  95:apps.c        **** };
  96:apps.c        **** 
  97:apps.c        **** static Form form_apps =
  98:apps.c        **** {
  99:apps.c        **** 	.Flags = FLAG_TEXT_PROGMEM,
 100:apps.c        **** 	.Title = { .Flash = applications },
 101:apps.c        **** 	.Elements = apps_elements,
 102:apps.c        **** 	.Count = arrlen(apps_elements),
 103:apps.c        **** 	.OnKey = NULL
 104:apps.c        **** };
 105:apps.c        **** 
 106:apps.c        **** static void apps_open(void)
 107:apps.c        **** {
 7511               	.LM816:
 7512               	.LFBB31:
 7513               	/* prologue: function */
 7514               	/* frame size = 0 */
 7515               	/* stack size = 0 */
 7516               	.L__stack_usage = 0
 108:apps.c        **** 	if(!connected)
 7518               	.LM817:
 7519 25cc 8091 0000 		lds r24,connected
 7520 25d0 8111      		cpse r24,__zero_reg__
 7521 25d2 00C0      		rjmp .L383
 109:apps.c        **** 	{
 110:apps.c        **** 		form_apps.Count = 2;
 7523               	.LM818:
 7524 25d4 82E0      		ldi r24,lo8(2)
 7525 25d6 90E0      		ldi r25,0
 7526 25d8 9093 0000 		sts form_apps+5+1,r25
 7527 25dc 8093 0000 		sts form_apps+5,r24
 7528               	.L383:
 111:apps.c        **** 	}
 112:apps.c        **** 
 113:apps.c        **** 	form_open(&form_apps);
 7530               	.LM819:
 7531 25e0 80E0      		ldi r24,lo8(form_apps)
 7532 25e2 90E0      		ldi r25,hi8(form_apps)
 7533 25e4 0C94 0000 		jmp form_open
 7535               	.Lscope31:
 7542               	form_plot_input_key:
 7544               	.Ltext47:
 436:plot.c        **** 
 437:plot.c        **** static void form_plot_input_button_ok_click(void)
 438:plot.c        **** {
 439:plot.c        **** 	form_open(&plot_form_output);
 440:plot.c        **** 
 441:plot.c        **** 	/* Get values */
 442:plot.c        **** 	pcx = atof(input_center_x_buffer);
 443:plot.c        **** 	pcy = atof(input_center_y_buffer);
 444:plot.c        **** 	psx = atof(input_scale_x_buffer);
 445:plot.c        **** 	psy = atof(input_scale_y_buffer);
 446:plot.c        **** 	pgx = atof(input_grid_x_buffer);
 447:plot.c        **** 	pgy = atof(input_grid_y_buffer);
 448:plot.c        **** 	pstep = atof(input_step_buffer);
 449:plot.c        **** 
 450:plot.c        **** 	if(psx <= 0.0f)
 451:plot.c        **** 	{
 452:plot.c        **** 		psx = 20.0f;
 453:plot.c        **** 	}
 454:plot.c        **** 
 455:plot.c        **** 	if(psy <= 0.0f)
 456:plot.c        **** 	{
 457:plot.c        **** 		psy = 20.0f;
 458:plot.c        **** 	}
 459:plot.c        **** 
 460:plot.c        **** 	if(pgx <= 0.0f)
 461:plot.c        **** 	{
 462:plot.c        **** 		pgx = 1.0f;
 463:plot.c        **** 	}
 464:plot.c        **** 
 465:plot.c        **** 	if(pgy <= 0.0f)
 466:plot.c        **** 	{
 467:plot.c        **** 		pgy = 1.0f;
 468:plot.c        **** 	}
 469:plot.c        **** 
 470:plot.c        **** 	if(pstep < 0.00001f)
 471:plot.c        **** 	{
 472:plot.c        **** 		pstep = 0.001f;
 473:plot.c        **** 	}
 474:plot.c        **** 
 475:plot.c        **** 	plot_render();
 476:plot.c        **** }
 477:plot.c        **** 
 478:plot.c        **** static void form_plot_input_key(uint8_t button, uint8_t action)
 479:plot.c        **** {
 7546               	.LM820:
 7547               	.LFBB32:
 7548               	/* prologue: function */
 7549               	/* frame size = 0 */
 7550               	/* stack size = 0 */
 7551               	.L__stack_usage = 0
 480:plot.c        **** 	if(button == BUTTON_B && action == BUTTON_PRESS)
 7553               	.LM821:
 7554 25e8 8630      		cpi r24,lo8(6)
 7555 25ea 01F4      		brne .L384
 7557               	.LM822:
 7558 25ec 6111      		cpse r22,__zero_reg__
 7559 25ee 00C0      		rjmp .L384
 481:plot.c        **** 	{
 482:plot.c        **** 		apps_open();
 7561               	.LM823:
 7562 25f0 0C94 0000 		jmp apps_open
 7563               	.L384:
 7564               	/* epilogue start */
 483:plot.c        **** 		return;
 484:plot.c        **** 	}
 485:plot.c        **** }
 7566               	.LM824:
 7567 25f4 0895      		ret
 7569               	.Lscope32:
 7575               	form_table_key:
 7577               	.Ltext48:
 147:table.c       **** 	if(button == BUTTON_B)
 7579               	.LM825:
 7580               	.LFBB33:
 7581               	/* prologue: function */
 7582               	/* frame size = 0 */
 7583               	/* stack size = 0 */
 7584               	.L__stack_usage = 0
 148:table.c       **** 	{
 7586               	.LM826:
 7587 25f6 8630      		cpi r24,lo8(6)
 7588 25f8 01F4      		brne .L386
 150:table.c       **** 	}
 7590               	.LM827:
 7591 25fa 0C94 0000 		jmp apps_open
 7592               	.L386:
 7593               	/* epilogue start */
 152:table.c       **** 
 7595               	.LM828:
 7596 25fe 0895      		ret
 7598               	.Lscope33:
 7604               	form_clock_key:
 7606               	.Ltext49:
 141:clock.c       **** 
 142:clock.c       **** static void form_clock_key(uint8_t button, uint8_t action)
 143:clock.c       **** {
 7608               	.LM829:
 7609               	.LFBB34:
 7610               	/* prologue: function */
 7611               	/* frame size = 0 */
 7612               	/* stack size = 0 */
 7613               	.L__stack_usage = 0
 144:clock.c       **** 	if(button == BUTTON_B)
 7615               	.LM830:
 7616 2600 8630      		cpi r24,lo8(6)
 7617 2602 01F4      		brne .L388
 7618               	.LBB338:
 7619               	.LBB339:
 145:clock.c       **** 	{
 146:clock.c       **** 		count_up = 0xFFFF;
 7621               	.LM831:
 7622 2604 8FEF      		ldi r24,lo8(-1)
 7623 2606 9FEF      		ldi r25,lo8(-1)
 7624 2608 9093 0000 		sts count_up+1,r25
 7625 260c 8093 0000 		sts count_up,r24
 147:clock.c       **** 		clock_elements[1].E.B.Text.Flash = start_timer;
 7627               	.LM832:
 7628 2610 80E0      		ldi r24,lo8(start_timer)
 7629 2612 90E0      		ldi r25,hi8(start_timer)
 7630 2614 9093 0000 		sts clock_elements+24+1,r25
 7631 2618 8093 0000 		sts clock_elements+24,r24
 148:clock.c       **** 		apps_open();
 7633               	.LM833:
 7634 261c 0C94 0000 		jmp apps_open
 7635               	.L388:
 7636               	/* epilogue start */
 7637               	.LBE339:
 7638               	.LBE338:
 149:clock.c       **** 	}
 150:clock.c       **** }
 7640               	.LM834:
 7641 2620 0895      		ret
 7643               	.Lscope34:
 7646               	form_message_key:
 7647               	/* prologue: function */
 7648               	/* frame size = 0 */
 7649               	/* stack size = 0 */
 7650               	.L__stack_usage = 0
 7651 2622 8630      		cpi r24,lo8(6)
 7652 2624 01F4      		brne .L390
 7653 2626 0C94 0000 		jmp apps_open
 7654               	.L390:
 7655               	/* epilogue start */
 7656 262a 0895      		ret
 7659               	form_request_key:
 7660               	/* prologue: function */
 7661               	/* frame size = 0 */
 7662               	/* stack size = 0 */
 7663               	.L__stack_usage = 0
 7664 262c 8630      		cpi r24,lo8(6)
 7665 262e 01F4      		brne .L392
 7666 2630 0C94 0000 		jmp apps_open
 7667               	.L392:
 7668               	/* epilogue start */
 7669 2634 0895      		ret
 7673               	plot_open:
 7675               	.Ltext50:
 295:plot.c        **** 	form_open(&plot_form_input);
 7677               	.LM835:
 7678               	.LFBB35:
 7679               	/* prologue: function */
 7680               	/* frame size = 0 */
 7681               	/* stack size = 0 */
 7682               	.L__stack_usage = 0
 296:plot.c        **** }
 7684               	.LM836:
 7685 2636 80E0      		ldi r24,lo8(plot_form_input)
 7686 2638 90E0      		ldi r25,hi8(plot_form_input)
 7687 263a 0C94 0000 		jmp form_open
 7689               	.Lscope35:
 7693               	table_open:
 7695               	.Ltext51:
 264:table.c       **** 
 265:table.c       **** static void table_open(void)
 266:table.c       **** {
 7697               	.LM837:
 7698               	.LFBB36:
 7699               	/* prologue: function */
 7700               	/* frame size = 0 */
 7701               	/* stack size = 0 */
 7702               	.L__stack_usage = 0
 267:table.c       **** 	form_open(&table_form);
 7704               	.LM838:
 7705 263e 80E0      		ldi r24,lo8(table_form)
 7706 2640 90E0      		ldi r25,hi8(table_form)
 7707 2642 0E94 0000 		call form_open
 268:table.c       **** 	lcd_color(LCD_BLACK);
 7709               	.LM839:
 7710 2646 1092 0000 		sts _color+1,__zero_reg__
 7711 264a 1092 0000 		sts _color,__zero_reg__
 269:table.c       **** 	lcd_rect_border(45, 125, 190, 20);
 7713               	.LM840:
 7714 264e 24E1      		ldi r18,lo8(20)
 7715 2650 30E0      		ldi r19,0
 7716 2652 4EEB      		ldi r20,lo8(-66)
 7717 2654 50E0      		ldi r21,0
 7718 2656 6DE7      		ldi r22,lo8(125)
 7719 2658 70E0      		ldi r23,0
 7720 265a 8DE2      		ldi r24,lo8(45)
 7721 265c 90E0      		ldi r25,0
 7722 265e 0C94 0000 		jmp lcd_rect_border
 7724               	.Lscope36:
 7728               	request_open:
 7730               	.Ltext52:
   1:request.c     **** static void form_request_button_send_click(void);
   2:request.c     **** static void form_request_key(uint8_t button, uint8_t action);
   3:request.c     **** 
   4:request.c     **** static Element request_elements[] =
   5:request.c     **** {
   6:request.c     **** 	{
   7:request.c     **** 		.Type = ELEMENT_TYPE_INPUT,
   8:request.c     **** 		.E = { .I =
   9:request.c     **** 		{
  10:request.c     **** 			.Flags = 0,
  11:request.c     **** 			.X = 5,
  12:request.c     **** 			.Y = 5,
  13:request.c     **** 			.W = 230,
  14:request.c     **** 			.Position = 0,
  15:request.c     **** 			.Length = 0,
  16:request.c     **** 			.Size = sizeof(input_message) - 4,
  17:request.c     **** 			.Text = input_message + 4
  18:request.c     **** 		}}
  19:request.c     **** 	},
  20:request.c     **** 
  21:request.c     **** 	/* Request */
  22:request.c     **** 	{
  23:request.c     **** 		.Type = ELEMENT_TYPE_BUTTON,
  24:request.c     **** 		.E = { .B =
  25:request.c     **** 		{
  26:request.c     **** 			.Flags = FLAG_TEXT_PROGMEM,
  27:request.c     **** 			.X = 155,
  28:request.c     **** 			.Y = 30,
  29:request.c     **** 			.W = 80,
  30:request.c     **** 			.H = 20,
  31:request.c     **** 			.Text = { .Flash = request },
  32:request.c     **** 			.Click = form_request_button_send_click
  33:request.c     **** 		}}
  34:request.c     **** 	},
  35:request.c     **** };
  36:request.c     **** 
  37:request.c     **** static Form request_form =
  38:request.c     **** {
  39:request.c     **** 	.Flags = FLAG_TEXT_PROGMEM,
  40:request.c     **** 	.Title = { .Flash = request },
  41:request.c     **** 	.Elements = request_elements,
  42:request.c     **** 	.Count = arrlen(request_elements),
  43:request.c     **** 	.OnKey = form_request_key
  44:request.c     **** };
  45:request.c     **** 
  46:request.c     **** static void form_request_button_send_click(void)
  47:request.c     **** {
  48:request.c     **** 	network_request(input_message + 4);
  49:request.c     **** 	lcd_color(LCD_WHITE);
  50:request.c     **** 	lcd_rect(0, 75, 240, 165);
  51:request.c     **** 	lcd_color(LCD_BLACK);
  52:request.c     **** 	lcd_string_ml(5, 75, 12, _response);
  53:request.c     **** }
  54:request.c     **** 
  55:request.c     **** static void form_request_key(uint8_t button, uint8_t action)
  56:request.c     **** {
  57:request.c     **** 	if(button == BUTTON_B)
  58:request.c     **** 	{
  59:request.c     **** 		apps_open();
  60:request.c     **** 	}
  61:request.c     **** }
  62:request.c     **** 
  63:request.c     **** static void request_open(void)
  64:request.c     **** {
 7732               	.LM841:
 7733               	.LFBB37:
 7734               	/* prologue: function */
 7735               	/* frame size = 0 */
 7736               	/* stack size = 0 */
 7737               	.L__stack_usage = 0
 7738               	.LBB342:
 7739               	.LBB343:
 7741               	.Ltext53:
 318:form.c        **** 	i->Position = 0;
 7743               	.LM842:
 7744 2662 E0E0      		ldi r30,lo8(request_elements)
 7745 2664 F0E0      		ldi r31,hi8(request_elements)
 7746 2666 1186      		std Z+9,__zero_reg__
 319:form.c        **** 	i->Text[0] = '\0';
 7748               	.LM843:
 7749 2668 1086      		std Z+8,__zero_reg__
 320:form.c        **** 	input_render(i, 1);
 7751               	.LM844:
 7752 266a 0384      		ldd __tmp_reg__,Z+11
 7753 266c F485      		ldd r31,Z+12
 7754 266e E02D      		mov r30,__tmp_reg__
 320:form.c        **** 	input_render(i, 1);
 7756               	.LM845:
 7757 2670 1082      		st Z,__zero_reg__
 321:form.c        **** }
 7759               	.LM846:
 7760 2672 61E0      		ldi r22,lo8(1)
 7761 2674 80E0      		ldi r24,lo8(request_elements+1)
 7762 2676 90E0      		ldi r25,hi8(request_elements+1)
 7763 2678 0E94 0000 		call input_render
 7764               	.LBE343:
 7765               	.LBE342:
 7767               	.Ltext54:
  65:request.c     **** 	input_clear(&request_elements[0].E.I);
  66:request.c     **** 	form_open(&request_form);
 7769               	.LM847:
 7770 267c 80E0      		ldi r24,lo8(request_form)
 7771 267e 90E0      		ldi r25,hi8(request_form)
 7772 2680 0C94 0000 		jmp form_open
 7774               	.Lscope37:
 7778               	message_open:
 7780               	.Ltext55:
   1:message.c     **** static void form_message_button_send_click(void);
   2:message.c     **** static void form_message_key(uint8_t button, uint8_t action);
   3:message.c     **** 
   4:message.c     **** static Element message_elements[] =
   5:message.c     **** {
   6:message.c     **** 	{
   7:message.c     **** 		.Type = ELEMENT_TYPE_INPUT,
   8:message.c     **** 		.E = { .I =
   9:message.c     **** 		{
  10:message.c     **** 			.Flags = 0,
  11:message.c     **** 			.X = 5,
  12:message.c     **** 			.Y = 5,
  13:message.c     **** 			.W = 230,
  14:message.c     **** 			.Position = 0,
  15:message.c     **** 			.Length = 0,
  16:message.c     **** 			.Size = sizeof(input_message) - 4,
  17:message.c     **** 			.Text = input_message + 4
  18:message.c     **** 		}}
  19:message.c     **** 	},
  20:message.c     **** 
  21:message.c     **** 	/* Send */
  22:message.c     **** 	{
  23:message.c     **** 		.Type = ELEMENT_TYPE_BUTTON,
  24:message.c     **** 		.E = { .B =
  25:message.c     **** 		{
  26:message.c     **** 			.Flags = FLAG_TEXT_PROGMEM,
  27:message.c     **** 			.X = 155,
  28:message.c     **** 			.Y = 30,
  29:message.c     **** 			.W = 80,
  30:message.c     **** 			.H = 20,
  31:message.c     **** 			.Text = { .Flash = send },
  32:message.c     **** 			.Click = form_message_button_send_click
  33:message.c     **** 		}}
  34:message.c     **** 	},
  35:message.c     **** };
  36:message.c     **** 
  37:message.c     **** static Form message_form =
  38:message.c     **** {
  39:message.c     **** 	.Flags = FLAG_TEXT_PROGMEM,
  40:message.c     **** 	.Title = { .Flash = send_message },
  41:message.c     **** 	.Elements = message_elements,
  42:message.c     **** 	.Count = arrlen(message_elements),
  43:message.c     **** 	.OnKey = form_message_key
  44:message.c     **** };
  45:message.c     **** 
  46:message.c     **** static void message_open(void)
  47:message.c     **** {
 7782               	.LM848:
 7783               	.LFBB38:
 7784               	/* prologue: function */
 7785               	/* frame size = 0 */
 7786               	/* stack size = 0 */
 7787               	.L__stack_usage = 0
 7788               	.LBB346:
 7789               	.LBB347:
 7791               	.Ltext56:
 318:form.c        **** 	i->Position = 0;
 7793               	.LM849:
 7794 2684 E0E0      		ldi r30,lo8(request_elements)
 7795 2686 F0E0      		ldi r31,hi8(request_elements)
 7796 2688 1186      		std Z+9,__zero_reg__
 319:form.c        **** 	i->Text[0] = '\0';
 7798               	.LM850:
 7799 268a 1086      		std Z+8,__zero_reg__
 320:form.c        **** 	input_render(i, 1);
 7801               	.LM851:
 7802 268c 0384      		ldd __tmp_reg__,Z+11
 7803 268e F485      		ldd r31,Z+12
 7804 2690 E02D      		mov r30,__tmp_reg__
 320:form.c        **** 	input_render(i, 1);
 7806               	.LM852:
 7807 2692 1082      		st Z,__zero_reg__
 321:form.c        **** }
 7809               	.LM853:
 7810 2694 61E0      		ldi r22,lo8(1)
 7811 2696 80E0      		ldi r24,lo8(request_elements+1)
 7812 2698 90E0      		ldi r25,hi8(request_elements+1)
 7813 269a 0E94 0000 		call input_render
 7814               	.LBE347:
 7815               	.LBE346:
 7817               	.Ltext57:
  48:message.c     **** 	input_clear(&request_elements[0].E.I);
  49:message.c     **** 	form_open(&message_form);
 7819               	.LM854:
 7820 269e 80E0      		ldi r24,lo8(message_form)
 7821 26a0 90E0      		ldi r25,hi8(message_form)
 7822 26a2 0C94 0000 		jmp form_open
 7824               	.Lscope38:
 7828               	clock_open:
 7830               	.Ltext58:
 151:clock.c       **** 
 152:clock.c       **** static void clock_open(void)
 153:clock.c       **** {
 7832               	.LM855:
 7833               	.LFBB39:
 7834               	/* prologue: function */
 7835               	/* frame size = 0 */
 7836               	/* stack size = 0 */
 7837               	.L__stack_usage = 0
 154:clock.c       **** 	form_open(&clock_form);
 7839               	.LM856:
 7840 26a6 80E0      		ldi r24,lo8(clock_form)
 7841 26a8 90E0      		ldi r25,hi8(clock_form)
 7842 26aa 0C94 0000 		jmp form_open
 7844               	.Lscope39:
 7848               	form_plot_input_button_ok_click:
 7850               	.Ltext59:
 438:plot.c        **** 	form_open(&plot_form_output);
 7852               	.LM857:
 7853               	.LFBB40:
 7854 26ae 0F93      		push r16
 7855 26b0 1F93      		push r17
 7856 26b2 CF93      		push r28
 7857 26b4 DF93      		push r29
 7858 26b6 00D0      		rcall .
 7859 26b8 00D0      		rcall .
 7860 26ba 00D0      		rcall .
 7861 26bc CDB7      		in r28,__SP_L__
 7862 26be DEB7      		in r29,__SP_H__
 7863               	/* prologue: function */
 7864               	/* frame size = 6 */
 7865               	/* stack size = 10 */
 7866               	.L__stack_usage = 10
 439:plot.c        **** 
 7868               	.LM858:
 7869 26c0 80E0      		ldi r24,lo8(plot_form_output)
 7870 26c2 90E0      		ldi r25,hi8(plot_form_output)
 7871 26c4 0E94 0000 		call form_open
 442:plot.c        **** 	pcy = atof(input_center_y_buffer);
 7873               	.LM859:
 7874 26c8 80E0      		ldi r24,lo8(input_center_x_buffer)
 7875 26ca 90E0      		ldi r25,hi8(input_center_x_buffer)
 7876 26cc 0E94 0000 		call atof
 7877 26d0 6093 0000 		sts pcx,r22
 7878 26d4 7093 0000 		sts pcx+1,r23
 7879 26d8 8093 0000 		sts pcx+2,r24
 7880 26dc 9093 0000 		sts pcx+3,r25
 443:plot.c        **** 	psx = atof(input_scale_x_buffer);
 7882               	.LM860:
 7883 26e0 80E0      		ldi r24,lo8(input_center_y_buffer)
 7884 26e2 90E0      		ldi r25,hi8(input_center_y_buffer)
 7885 26e4 0E94 0000 		call atof
 7886 26e8 6093 0000 		sts pcy,r22
 7887 26ec 7093 0000 		sts pcy+1,r23
 7888 26f0 8093 0000 		sts pcy+2,r24
 7889 26f4 9093 0000 		sts pcy+3,r25
 444:plot.c        **** 	psy = atof(input_scale_y_buffer);
 7891               	.LM861:
 7892 26f8 80E0      		ldi r24,lo8(input_scale_x_buffer)
 7893 26fa 90E0      		ldi r25,hi8(input_scale_x_buffer)
 7894 26fc 0E94 0000 		call atof
 7895 2700 6093 0000 		sts psx,r22
 7896 2704 7093 0000 		sts psx+1,r23
 7897 2708 8093 0000 		sts psx+2,r24
 7898 270c 9093 0000 		sts psx+3,r25
 445:plot.c        **** 	pgx = atof(input_grid_x_buffer);
 7900               	.LM862:
 7901 2710 80E0      		ldi r24,lo8(input_scale_y_buffer)
 7902 2712 90E0      		ldi r25,hi8(input_scale_y_buffer)
 7903 2714 0E94 0000 		call atof
 7904 2718 6093 0000 		sts psy,r22
 7905 271c 7093 0000 		sts psy+1,r23
 7906 2720 8093 0000 		sts psy+2,r24
 7907 2724 9093 0000 		sts psy+3,r25
 446:plot.c        **** 	pgy = atof(input_grid_y_buffer);
 7909               	.LM863:
 7910 2728 80E0      		ldi r24,lo8(input_grid_x_buffer)
 7911 272a 90E0      		ldi r25,hi8(input_grid_x_buffer)
 7912 272c 0E94 0000 		call atof
 7913 2730 6093 0000 		sts pgx,r22
 7914 2734 7093 0000 		sts pgx+1,r23
 7915 2738 8093 0000 		sts pgx+2,r24
 7916 273c 9093 0000 		sts pgx+3,r25
 447:plot.c        **** 	pstep = atof(input_step_buffer);
 7918               	.LM864:
 7919 2740 80E0      		ldi r24,lo8(input_grid_y_buffer)
 7920 2742 90E0      		ldi r25,hi8(input_grid_y_buffer)
 7921 2744 0E94 0000 		call atof
 7922 2748 6093 0000 		sts pgy,r22
 7923 274c 7093 0000 		sts pgy+1,r23
 7924 2750 8093 0000 		sts pgy+2,r24
 7925 2754 9093 0000 		sts pgy+3,r25
 448:plot.c        **** 
 7927               	.LM865:
 7928 2758 80E0      		ldi r24,lo8(input_step_buffer)
 7929 275a 90E0      		ldi r25,hi8(input_step_buffer)
 7930 275c 0E94 0000 		call atof
 7931 2760 8B01      		movw r16,r22
 7932 2762 8E83      		std Y+6,r24
 7933 2764 9D83      		std Y+5,r25
 448:plot.c        **** 
 7935               	.LM866:
 7936 2766 AB01      		movw r20,r22
 7937 2768 BC01      		movw r22,r24
 7938 276a 4093 0000 		sts pstep,r20
 7939 276e 5093 0000 		sts pstep+1,r21
 7940 2772 6093 0000 		sts pstep+2,r22
 7941 2776 7093 0000 		sts pstep+3,r23
 450:plot.c        **** 	{
 7943               	.LM867:
 7944 277a 20E0      		ldi r18,0
 7945 277c 30E0      		ldi r19,0
 7946 277e A901      		movw r20,r18
 7947 2780 6091 0000 		lds r22,psx
 7948 2784 7091 0000 		lds r23,psx+1
 7949 2788 8091 0000 		lds r24,psx+2
 7950 278c 9091 0000 		lds r25,psx+3
 7951 2790 0E94 0000 		call __lesf2
 7952 2794 1816      		cp __zero_reg__,r24
 7953 2796 04F0      		brlt .L400
 452:plot.c        **** 	}
 7955               	.LM868:
 7956 2798 80E0      		ldi r24,0
 7957 279a 90E0      		ldi r25,0
 7958 279c A0EA      		ldi r26,lo8(-96)
 7959 279e B1E4      		ldi r27,lo8(65)
 7960 27a0 8093 0000 		sts psx,r24
 7961 27a4 9093 0000 		sts psx+1,r25
 7962 27a8 A093 0000 		sts psx+2,r26
 7963 27ac B093 0000 		sts psx+3,r27
 7964               	.L400:
 455:plot.c        **** 	{
 7966               	.LM869:
 7967 27b0 20E0      		ldi r18,0
 7968 27b2 30E0      		ldi r19,0
 7969 27b4 A901      		movw r20,r18
 7970 27b6 6091 0000 		lds r22,psy
 7971 27ba 7091 0000 		lds r23,psy+1
 7972 27be 8091 0000 		lds r24,psy+2
 7973 27c2 9091 0000 		lds r25,psy+3
 7974 27c6 0E94 0000 		call __lesf2
 7975 27ca 1816      		cp __zero_reg__,r24
 7976 27cc 04F0      		brlt .L402
 457:plot.c        **** 	}
 7978               	.LM870:
 7979 27ce 80E0      		ldi r24,0
 7980 27d0 90E0      		ldi r25,0
 7981 27d2 A0EA      		ldi r26,lo8(-96)
 7982 27d4 B1E4      		ldi r27,lo8(65)
 7983 27d6 8093 0000 		sts psy,r24
 7984 27da 9093 0000 		sts psy+1,r25
 7985 27de A093 0000 		sts psy+2,r26
 7986 27e2 B093 0000 		sts psy+3,r27
 7987               	.L402:
 460:plot.c        **** 	{
 7989               	.LM871:
 7990 27e6 20E0      		ldi r18,0
 7991 27e8 30E0      		ldi r19,0
 7992 27ea A901      		movw r20,r18
 7993 27ec 6091 0000 		lds r22,pgx
 7994 27f0 7091 0000 		lds r23,pgx+1
 7995 27f4 8091 0000 		lds r24,pgx+2
 7996 27f8 9091 0000 		lds r25,pgx+3
 7997 27fc 0E94 0000 		call __lesf2
 7998 2800 1816      		cp __zero_reg__,r24
 7999 2802 04F0      		brlt .L404
 462:plot.c        **** 	}
 8001               	.LM872:
 8002 2804 80E0      		ldi r24,0
 8003 2806 90E0      		ldi r25,0
 8004 2808 A0E8      		ldi r26,lo8(-128)
 8005 280a BFE3      		ldi r27,lo8(63)
 8006 280c 8093 0000 		sts pgx,r24
 8007 2810 9093 0000 		sts pgx+1,r25
 8008 2814 A093 0000 		sts pgx+2,r26
 8009 2818 B093 0000 		sts pgx+3,r27
 8010               	.L404:
 465:plot.c        **** 	{
 8012               	.LM873:
 8013 281c 20E0      		ldi r18,0
 8014 281e 30E0      		ldi r19,0
 8015 2820 A901      		movw r20,r18
 8016 2822 6091 0000 		lds r22,pgy
 8017 2826 7091 0000 		lds r23,pgy+1
 8018 282a 8091 0000 		lds r24,pgy+2
 8019 282e 9091 0000 		lds r25,pgy+3
 8020 2832 0E94 0000 		call __lesf2
 8021 2836 1816      		cp __zero_reg__,r24
 8022 2838 04F0      		brlt .L406
 467:plot.c        **** 	}
 8024               	.LM874:
 8025 283a 80E0      		ldi r24,0
 8026 283c 90E0      		ldi r25,0
 8027 283e A0E8      		ldi r26,lo8(-128)
 8028 2840 BFE3      		ldi r27,lo8(63)
 8029 2842 8093 0000 		sts pgy,r24
 8030 2846 9093 0000 		sts pgy+1,r25
 8031 284a A093 0000 		sts pgy+2,r26
 8032 284e B093 0000 		sts pgy+3,r27
 8033               	.L406:
 470:plot.c        **** 	{
 8035               	.LM875:
 8036 2852 2CEA      		ldi r18,lo8(-84)
 8037 2854 35EC      		ldi r19,lo8(-59)
 8038 2856 47E2      		ldi r20,lo8(39)
 8039 2858 57E3      		ldi r21,lo8(55)
 8040 285a 0983      		std Y+1,r16
 8041 285c 1A83      		std Y+2,r17
 8042 285e 8E81      		ldd r24,Y+6
 8043 2860 8B83      		std Y+3,r24
 8044 2862 9D81      		ldd r25,Y+5
 8045 2864 9C83      		std Y+4,r25
 8046 2866 6981      		ldd r22,Y+1
 8047 2868 7A81      		ldd r23,Y+2
 8048 286a 8B81      		ldd r24,Y+3
 8049 286c 9C81      		ldd r25,Y+4
 8050 286e 0E94 0000 		call __ltsf2
 8051 2872 87FF      		sbrs r24,7
 8052 2874 00C0      		rjmp .L408
 472:plot.c        **** 	}
 8054               	.LM876:
 8055 2876 8FE6      		ldi r24,lo8(111)
 8056 2878 92E1      		ldi r25,lo8(18)
 8057 287a A3E8      		ldi r26,lo8(-125)
 8058 287c BAE3      		ldi r27,lo8(58)
 8059 287e 8093 0000 		sts pstep,r24
 8060 2882 9093 0000 		sts pstep+1,r25
 8061 2886 A093 0000 		sts pstep+2,r26
 8062 288a B093 0000 		sts pstep+3,r27
 8063               	.L408:
 8064               	/* epilogue start */
 476:plot.c        **** 
 8066               	.LM877:
 8067 288e 2696      		adiw r28,6
 8068 2890 0FB6      		in __tmp_reg__,__SREG__
 8069 2892 F894      		cli
 8070 2894 DEBF      		out __SP_H__,r29
 8071 2896 0FBE      		out __SREG__,__tmp_reg__
 8072 2898 CDBF      		out __SP_L__,r28
 8073 289a DF91      		pop r29
 8074 289c CF91      		pop r28
 8075 289e 1F91      		pop r17
 8076 28a0 0F91      		pop r16
 475:plot.c        **** }
 8078               	.LM878:
 8079 28a2 0C94 0000 		jmp plot_render
 8081               	.Lscope40:
 8087               	form_plot_output_key:
 486:plot.c        **** 
 487:plot.c        **** static void form_plot_output_key(uint8_t button, uint8_t action)
 488:plot.c        **** {
 8089               	.LM879:
 8090               	.LFBB41:
 8091               	/* prologue: function */
 8092               	/* frame size = 0 */
 8093               	/* stack size = 0 */
 8094               	.L__stack_usage = 0
 489:plot.c        **** 	if(action == BUTTON_PRESS)
 8096               	.LM880:
 8097 28a6 6623      		tst r22
 8098 28a8 01F4      		brne .+2
 8099 28aa 00C0      		rjmp .L415
 490:plot.c        **** 	{
 491:plot.c        **** 		return;
 492:plot.c        **** 	}
 493:plot.c        **** 
 494:plot.c        **** 	if(button == BUTTON_B)
 8101               	.LM881:
 8102 28ac 8630      		cpi r24,lo8(6)
 8103 28ae 01F4      		brne .L417
 495:plot.c        **** 	{
 496:plot.c        **** 		form_open(&plot_form_input);
 8105               	.LM882:
 8106 28b0 80E0      		ldi r24,lo8(plot_form_input)
 8107 28b2 90E0      		ldi r25,hi8(plot_form_input)
 8108 28b4 0C94 0000 		jmp form_open
 8109               	.L417:
 8110               	.LBB350:
 8111               	.LBB351:
 497:plot.c        **** 		return;
 498:plot.c        **** 	}
 499:plot.c        **** 
 500:plot.c        **** 	switch(button)
 8113               	.LM883:
 8114 28b8 8230      		cpi r24,lo8(2)
 8115 28ba 01F4      		brne .+2
 8116 28bc 00C0      		rjmp .L418
 8117 28be 00F4      		brsh .L419
 8118 28c0 8111      		cpse r24,__zero_reg__
 8119 28c2 00C0      		rjmp .L426
 501:plot.c        **** 	{
 502:plot.c        **** 		case BUTTON_UP:
 503:plot.c        **** 			pcy += 20.0f / psy;
 504:plot.c        **** 			plot_render();
 505:plot.c        **** 			break;
 506:plot.c        **** 
 507:plot.c        **** 		case BUTTON_DOWN:
 508:plot.c        **** 			pcy -= 20.0f / psy;
 509:plot.c        **** 			plot_render();
 510:plot.c        **** 			break;
 511:plot.c        **** 
 512:plot.c        **** 		case BUTTON_LEFT:
 513:plot.c        **** 			pcx -= 20.0f / psx;
 8121               	.LM884:
 8122 28c4 2091 0000 		lds r18,psx
 8123 28c8 3091 0000 		lds r19,psx+1
 8124 28cc 4091 0000 		lds r20,psx+2
 8125 28d0 5091 0000 		lds r21,psx+3
 8126 28d4 60E0      		ldi r22,0
 8127 28d6 70E0      		ldi r23,0
 8128 28d8 80EA      		ldi r24,lo8(-96)
 8129 28da 91E4      		ldi r25,lo8(65)
 8130 28dc 0E94 0000 		call __divsf3
 8132               	.LM885:
 8133 28e0 9B01      		movw r18,r22
 8134 28e2 AC01      		movw r20,r24
 8135 28e4 6091 0000 		lds r22,pcx
 8136 28e8 7091 0000 		lds r23,pcx+1
 8137 28ec 8091 0000 		lds r24,pcx+2
 8138 28f0 9091 0000 		lds r25,pcx+3
 8139 28f4 0E94 0000 		call __subsf3
 8140               	.L428:
 514:plot.c        **** 			plot_render();
 515:plot.c        **** 			break;
 516:plot.c        **** 
 517:plot.c        **** 		case BUTTON_RIGHT:
 518:plot.c        **** 			pcx += 20.0f / psx;
 8142               	.LM886:
 8143 28f8 6093 0000 		sts pcx,r22
 8144 28fc 7093 0000 		sts pcx+1,r23
 8145 2900 8093 0000 		sts pcx+2,r24
 8146 2904 9093 0000 		sts pcx+3,r25
 8147 2908 00C0      		rjmp .L427
 8148               	.L419:
 500:plot.c        **** 	{
 8150               	.LM887:
 8151 290a 8330      		cpi r24,lo8(3)
 8152 290c 01F4      		brne .+2
 8153 290e 00C0      		rjmp .L422
 8154 2910 0895      		ret
 8155               	.L426:
 503:plot.c        **** 			plot_render();
 8157               	.LM888:
 8158 2912 2091 0000 		lds r18,psy
 8159 2916 3091 0000 		lds r19,psy+1
 8160 291a 4091 0000 		lds r20,psy+2
 8161 291e 5091 0000 		lds r21,psy+3
 8162 2922 60E0      		ldi r22,0
 8163 2924 70E0      		ldi r23,0
 8164 2926 80EA      		ldi r24,lo8(-96)
 8165 2928 91E4      		ldi r25,lo8(65)
 8166 292a 0E94 0000 		call __divsf3
 503:plot.c        **** 			plot_render();
 8168               	.LM889:
 8169 292e 9B01      		movw r18,r22
 8170 2930 AC01      		movw r20,r24
 8171 2932 6091 0000 		lds r22,pcy
 8172 2936 7091 0000 		lds r23,pcy+1
 8173 293a 8091 0000 		lds r24,pcy+2
 8174 293e 9091 0000 		lds r25,pcy+3
 8175 2942 0E94 0000 		call __addsf3
 8176               	.L429:
 508:plot.c        **** 			plot_render();
 8178               	.LM890:
 8179 2946 6093 0000 		sts pcy,r22
 8180 294a 7093 0000 		sts pcy+1,r23
 8181 294e 8093 0000 		sts pcy+2,r24
 8182 2952 9093 0000 		sts pcy+3,r25
 8183               	.L427:
 519:plot.c        **** 			plot_render();
 8185               	.LM891:
 8186 2956 0C94 0000 		jmp plot_render
 8187               	.L418:
 508:plot.c        **** 			plot_render();
 8189               	.LM892:
 8190 295a 2091 0000 		lds r18,psy
 8191 295e 3091 0000 		lds r19,psy+1
 8192 2962 4091 0000 		lds r20,psy+2
 8193 2966 5091 0000 		lds r21,psy+3
 8194 296a 60E0      		ldi r22,0
 8195 296c 70E0      		ldi r23,0
 8196 296e 80EA      		ldi r24,lo8(-96)
 8197 2970 91E4      		ldi r25,lo8(65)
 8198 2972 0E94 0000 		call __divsf3
 508:plot.c        **** 			plot_render();
 8200               	.LM893:
 8201 2976 9B01      		movw r18,r22
 8202 2978 AC01      		movw r20,r24
 8203 297a 6091 0000 		lds r22,pcy
 8204 297e 7091 0000 		lds r23,pcy+1
 8205 2982 8091 0000 		lds r24,pcy+2
 8206 2986 9091 0000 		lds r25,pcy+3
 8207 298a 0E94 0000 		call __subsf3
 8208 298e 00C0      		rjmp .L429
 8209               	.L422:
 518:plot.c        **** 			plot_render();
 8211               	.LM894:
 8212 2990 2091 0000 		lds r18,psx
 8213 2994 3091 0000 		lds r19,psx+1
 8214 2998 4091 0000 		lds r20,psx+2
 8215 299c 5091 0000 		lds r21,psx+3
 8216 29a0 60E0      		ldi r22,0
 8217 29a2 70E0      		ldi r23,0
 8218 29a4 80EA      		ldi r24,lo8(-96)
 8219 29a6 91E4      		ldi r25,lo8(65)
 8220 29a8 0E94 0000 		call __divsf3
 518:plot.c        **** 			plot_render();
 8222               	.LM895:
 8223 29ac 9B01      		movw r18,r22
 8224 29ae AC01      		movw r20,r24
 8225 29b0 6091 0000 		lds r22,pcx
 8226 29b4 7091 0000 		lds r23,pcx+1
 8227 29b8 8091 0000 		lds r24,pcx+2
 8228 29bc 9091 0000 		lds r25,pcx+3
 8229 29c0 0E94 0000 		call __addsf3
 8230 29c4 00C0      		rjmp .L428
 8231               	.L415:
 8232               	/* epilogue start */
 8233               	.LBE351:
 8234               	.LBE350:
 520:plot.c        **** 			break;
 521:plot.c        **** 	}
 522:plot.c        **** }
 8236               	.LM896:
 8237 29c6 0895      		ret
 8239               	.Lscope41:
 8243               	form_clock_button_toggle_click:
 8245               	.Ltext60:
  60:clock.c       **** 	if(clock_elements[1].E.B.Text.Flash == start_timer)
 8247               	.LM897:
 8248               	.LFBB42:
 8249               	/* prologue: function */
 8250               	/* frame size = 0 */
 8251               	/* stack size = 0 */
 8252               	.L__stack_usage = 0
  61:clock.c       **** 	{
 8254               	.LM898:
 8255 29c8 8091 0000 		lds r24,clock_elements+24
 8256 29cc 9091 0000 		lds r25,clock_elements+24+1
 8257 29d0 8050      		subi r24,lo8(start_timer)
 8258 29d2 9040      		sbci r25,hi8(start_timer)
 8259 29d4 01F4      		brne .L431
  63:clock.c       **** 		timer_update();
 8261               	.LM899:
 8262 29d6 1092 0000 		sts count_up+1,__zero_reg__
 8263 29da 1092 0000 		sts count_up,__zero_reg__
  64:clock.c       **** 		clock_elements[1].E.B.Text.Flash = stop_timer;
 8265               	.LM900:
 8266 29de 0E94 0000 		call timer_update
  65:clock.c       **** 	}
 8268               	.LM901:
 8269 29e2 80E0      		ldi r24,lo8(stop_timer)
 8270 29e4 90E0      		ldi r25,hi8(stop_timer)
 8271               	.L433:
  70:clock.c       **** 	}
 8273               	.LM902:
 8274 29e6 9093 0000 		sts clock_elements+24+1,r25
 8275 29ea 8093 0000 		sts clock_elements+24,r24
  73:clock.c       **** }
 8277               	.LM903:
 8278 29ee 61E0      		ldi r22,lo8(1)
 8279 29f0 80E0      		ldi r24,lo8(clock_elements+15)
 8280 29f2 90E0      		ldi r25,hi8(clock_elements+15)
 8281 29f4 0C94 0000 		jmp button_render
 8282               	.L431:
  69:clock.c       **** 		clock_elements[1].E.B.Text.Flash = start_timer;
 8284               	.LM904:
 8285 29f8 8FEF      		ldi r24,lo8(-1)
 8286 29fa 9FEF      		ldi r25,lo8(-1)
 8287 29fc 9093 0000 		sts count_up+1,r25
 8288 2a00 8093 0000 		sts count_up,r24
  70:clock.c       **** 	}
 8290               	.LM905:
 8291 2a04 80E0      		ldi r24,lo8(start_timer)
 8292 2a06 90E0      		ldi r25,hi8(start_timer)
 8293 2a08 00C0      		rjmp .L433
 8295               	.Lscope42:
 8298               	.global	__vector_9
 8300               	__vector_9:
 8302               	.Ltext61:
  32:mstimer.c     **** 
  33:mstimer.c     **** ISR(TIMER2_COMPA_vect)
  34:mstimer.c     **** {
 8304               	.LM906:
 8305               	.LFBB43:
 8306 2a0a 1F92      		push r1
 8307 2a0c 0F92      		push r0
 8308 2a0e 0FB6      		in r0,__SREG__
 8309 2a10 0F92      		push r0
 8310 2a12 1124      		clr __zero_reg__
 8311 2a14 BF92      		push r11
 8312 2a16 CF92      		push r12
 8313 2a18 DF92      		push r13
 8314 2a1a EF92      		push r14
 8315 2a1c FF92      		push r15
 8316 2a1e 0F93      		push r16
 8317 2a20 1F93      		push r17
 8318 2a22 2F93      		push r18
 8319 2a24 3F93      		push r19
 8320 2a26 4F93      		push r20
 8321 2a28 5F93      		push r21
 8322 2a2a 6F93      		push r22
 8323 2a2c 7F93      		push r23
 8324 2a2e 8F93      		push r24
 8325 2a30 9F93      		push r25
 8326 2a32 AF93      		push r26
 8327 2a34 BF93      		push r27
 8328 2a36 CF93      		push r28
 8329 2a38 DF93      		push r29
 8330 2a3a EF93      		push r30
 8331 2a3c FF93      		push r31
 8332               	/* prologue: Signal */
 8333               	/* frame size = 0 */
 8334               	/* stack size = 24 */
 8335               	.L__stack_usage = 24
  35:mstimer.c     **** 	++ms;
 8337               	.LM907:
 8338 2a3e 8091 0000 		lds r24,ms
 8339 2a42 9091 0000 		lds r25,ms+1
 8340 2a46 0196      		adiw r24,1
 8341 2a48 9093 0000 		sts ms+1,r25
 8342 2a4c 8093 0000 		sts ms,r24
 8343               	.LBB362:
 8344               	.LBB363:
 8345               	.LBB364:
  17:mstimer.c     **** 	cli();
 8347               	.LM908:
 8348 2a50 8091 B100 		lds r24,177
 8349 2a54 8C7F      		andi r24,lo8(-4)
 8350 2a56 8093 B100 		sts 177,r24
  18:mstimer.c     **** }
 8352               	.LM909:
 8353               	/* #APP */
 8354               	 ;  18 "mstimer.c" 1
 8355 2a5a F894      		cli
 8356               	 ;  0 "" 2
 8357               	/* #NOAPP */
 8358               	.LBE364:
 8359               	.LBE363:
 8360               	.LBB365:
 8361               	.LBB366:
 8363               	.Ltext62:
  78:clock.c       **** 	{
 8365               	.LM910:
 8366 2a5c 8091 0000 		lds r24,count_up
 8367 2a60 9091 0000 		lds r25,count_up+1
  78:clock.c       **** 	{
 8369               	.LM911:
 8370 2a64 8036      		cpi r24,96
 8371 2a66 2AEE      		ldi r18,-22
 8372 2a68 9207      		cpc r25,r18
 8373 2a6a 00F4      		brsh .L435
  83:clock.c       **** 	timer_update();
 8375               	.LM912:
 8376 2a6c 0196      		adiw r24,1
 8377 2a6e 9093 0000 		sts count_up+1,r25
 8378 2a72 8093 0000 		sts count_up,r24
  84:clock.c       **** }
 8380               	.LM913:
 8381 2a76 0E94 0000 		call timer_update
 8382               	.L435:
 8383 2a7a 00E0      		ldi r16,lo8(button_ports)
 8384 2a7c 10E0      		ldi r17,hi8(button_ports)
 8385 2a7e 80E0      		ldi r24,lo8(button_pins)
 8386 2a80 E82E      		mov r14,r24
 8387 2a82 80E0      		ldi r24,hi8(button_pins)
 8388 2a84 F82E      		mov r15,r24
 8389 2a86 C0E0      		ldi r28,lo8(button_ticks)
 8390 2a88 D0E0      		ldi r29,hi8(button_ticks)
 8391               	.LBE366:
 8392               	.LBE365:
 8393               	.LBE362:
 8395               	.Ltext63:
  34:mstimer.c     **** 	++ms;
 8397               	.LM914:
 8398 2a8a B12C      		mov r11,__zero_reg__
 8399               	.LBB373:
 8400               	.LBB367:
 8401               	.LBB368:
 8403               	.Ltext64:
   1:buttons.c     **** enum HW_BUTTON
   2:buttons.c     **** {
   3:buttons.c     **** 	BUTTON_LEFT,
   4:buttons.c     **** 	BUTTON_UP,
   5:buttons.c     **** 	BUTTON_DOWN,
   6:buttons.c     **** 	BUTTON_RIGHT,
   7:buttons.c     **** 	BUTTON_CENTER,
   8:buttons.c     **** 	BUTTON_A,
   9:buttons.c     **** 	BUTTON_B
  10:buttons.c     **** };
  11:buttons.c     **** 
  12:buttons.c     **** #define BUTTON_PRESS          0
  13:buttons.c     **** #define BUTTON_RELEASE        1
  14:buttons.c     **** #define BUTTON_REPEAT         2
  15:buttons.c     **** #define BUTTON_PRESS_TICKS  150
  16:buttons.c     **** #define BUTTON_REPEAT_TICKS 800
  17:buttons.c     **** 
  18:buttons.c     **** static const volatile uint8_t *button_ports[7] = { &PIND, &PIND, &PIND, &PIND, &PIND, &PINC, &PIND 
  19:buttons.c     **** static const uint8_t button_pins[7] = { (1 << 2), (1 << 4), (1 << 3), (1 << 6), (1 << 5), (1 << 0),
  20:buttons.c     **** static uint16_t button_ticks[7];
  21:buttons.c     **** 
  22:buttons.c     **** #ifdef DEBUG
  23:buttons.c     **** 
  24:buttons.c     **** static const char *strings0[7] = { "Up", "Down", "Left", "Right", "Center", "A", "B" };
  25:buttons.c     **** static const char *strings1[3] = { "Press", "Release", "Repeat" };
  26:buttons.c     **** 
  27:buttons.c     **** #endif
  28:buttons.c     **** 
  29:buttons.c     **** static void event_button(uint8_t button, uint8_t action);
  30:buttons.c     **** 
  31:buttons.c     **** static void buttons_init(void)
  32:buttons.c     **** {
  33:buttons.c     **** 	PORTD = (1 << 2) | (1 << 3) | (1 << 4) | (1 << 5) | (1 << 6) | (1 << 7);
  34:buttons.c     **** 	PORTC |= (1 << 0);
  35:buttons.c     **** }
  36:buttons.c     **** 
  37:buttons.c     **** static void buttons_update(void)
  38:buttons.c     **** {
  39:buttons.c     **** 	uint8_t i;
  40:buttons.c     **** 	for(i = 0; i < 7; ++i)
  41:buttons.c     **** 	{
  42:buttons.c     **** 		if(!(*button_ports[i] & button_pins[i]))
  43:buttons.c     **** 		{
  44:buttons.c     **** 			if(button_ticks[i] < BUTTON_PRESS_TICKS)
  45:buttons.c     **** 			{
  46:buttons.c     **** 				++button_ticks[i];
  47:buttons.c     **** 			}
  48:buttons.c     **** 			else if(button_ticks[i] == BUTTON_PRESS_TICKS)
  49:buttons.c     **** 			{
  50:buttons.c     **** 				button_ticks[i] = BUTTON_PRESS_TICKS + 1;
  51:buttons.c     **** 				event_button(i, BUTTON_PRESS);
  52:buttons.c     **** 			}
  53:buttons.c     **** 			else if(button_ticks[i] < BUTTON_PRESS_TICKS + BUTTON_REPEAT_TICKS)
  54:buttons.c     **** 			{
  55:buttons.c     **** 				++button_ticks[i];
  56:buttons.c     **** 			}
  57:buttons.c     **** 			else
  58:buttons.c     **** 			{
  59:buttons.c     **** 				button_ticks[i] = BUTTON_PRESS_TICKS + 1;
 8405               	.LM915:
 8406 2a8c 97E9      		ldi r25,lo8(-105)
 8407 2a8e C92E      		mov r12,r25
 8408 2a90 D12C      		mov r13,__zero_reg__
 8409               	.L442:
  42:buttons.c     **** 		{
 8411               	.LM916:
 8412 2a92 D801      		movw r26,r16
 8413 2a94 ED91      		ld r30,X+
 8414 2a96 FD91      		ld r31,X+
 8415 2a98 8D01      		movw r16,r26
  42:buttons.c     **** 		{
 8417               	.LM917:
 8418 2a9a 2081      		ld r18,Z
  42:buttons.c     **** 		{
 8420               	.LM918:
 8421 2a9c F701      		movw r30,r14
 8422 2a9e 3191      		ld r19,Z+
 8423 2aa0 7F01      		movw r14,r30
  44:buttons.c     **** 			{
 8425               	.LM919:
 8426 2aa2 8991      		ld r24,Y+
 8427 2aa4 9991      		ld r25,Y+
  42:buttons.c     **** 		{
 8429               	.LM920:
 8430 2aa6 2323      		and r18,r19
 8431 2aa8 FE01      		movw r30,r28
 8432 2aaa 3297      		sbiw r30,2
  42:buttons.c     **** 		{
 8434               	.LM921:
 8435 2aac 2111      		cpse r18,__zero_reg__
 8436 2aae 00C0      		rjmp .L436
  44:buttons.c     **** 			{
 8438               	.LM922:
 8439 2ab0 8639      		cpi r24,-106
 8440 2ab2 9105      		cpc r25,__zero_reg__
 8441 2ab4 00F4      		brsh .L437
 8442               	.L444:
  55:buttons.c     **** 			}
 8444               	.LM923:
 8445 2ab6 0196      		adiw r24,1
 8446 2ab8 9183      		std Z+1,r25
 8447 2aba 8083      		st Z,r24
 8448               	.L438:
  40:buttons.c     **** 	{
 8450               	.LM924:
 8451 2abc B394      		inc r11
  40:buttons.c     **** 	{
 8453               	.LM925:
 8454 2abe 87E0      		ldi r24,lo8(7)
 8455 2ac0 B812      		cpse r11,r24
 8456 2ac2 00C0      		rjmp .L442
 8457               	.LBE368:
 8458               	.LBE367:
 8459               	.LBB370:
 8460               	.LBB371:
 8462               	.Ltext65:
  23:mstimer.c     **** 	sei();
 8464               	.LM926:
 8465 2ac4 8091 B100 		lds r24,177
 8466 2ac8 8360      		ori r24,lo8(3)
 8467 2aca 8093 B100 		sts 177,r24
  24:mstimer.c     **** }
 8469               	.LM927:
 8470               	/* #APP */
 8471               	 ;  24 "mstimer.c" 1
 8472 2ace 7894      		sei
 8473               	 ;  0 "" 2
 8474               	/* #NOAPP */
 8475               	/* epilogue start */
 8476               	.LBE371:
 8477               	.LBE370:
 8478               	.LBE373:
  36:mstimer.c     **** 	tick();
  37:mstimer.c     **** }
 8480               	.LM928:
 8481 2ad0 FF91      		pop r31
 8482 2ad2 EF91      		pop r30
 8483 2ad4 DF91      		pop r29
 8484 2ad6 CF91      		pop r28
 8485 2ad8 BF91      		pop r27
 8486 2ada AF91      		pop r26
 8487 2adc 9F91      		pop r25
 8488 2ade 8F91      		pop r24
 8489 2ae0 7F91      		pop r23
 8490 2ae2 6F91      		pop r22
 8491 2ae4 5F91      		pop r21
 8492 2ae6 4F91      		pop r20
 8493 2ae8 3F91      		pop r19
 8494 2aea 2F91      		pop r18
 8495 2aec 1F91      		pop r17
 8496 2aee 0F91      		pop r16
 8497 2af0 FF90      		pop r15
 8498 2af2 EF90      		pop r14
 8499 2af4 DF90      		pop r13
 8500 2af6 CF90      		pop r12
 8501 2af8 BF90      		pop r11
 8502 2afa 0F90      		pop r0
 8503 2afc 0FBE      		out __SREG__,r0
 8504 2afe 0F90      		pop r0
 8505 2b00 1F90      		pop r1
 8506 2b02 1895      		reti
 8507               	.L437:
 8508               	.LBB374:
 8509               	.LBB372:
 8510               	.LBB369:
 8512               	.Ltext66:
  48:buttons.c     **** 			{
 8514               	.LM929:
 8515 2b04 8639      		cpi r24,-106
 8516 2b06 9105      		cpc r25,__zero_reg__
 8517 2b08 01F4      		brne .L439
  50:buttons.c     **** 				event_button(i, BUTTON_PRESS);
 8519               	.LM930:
 8520 2b0a D182      		std Z+1,r13
 8521 2b0c C082      		st Z,r12
  51:buttons.c     **** 			}
 8523               	.LM931:
 8524 2b0e 60E0      		ldi r22,0
 8525               	.L445:
  60:buttons.c     **** 				event_button(i, BUTTON_REPEAT);
  61:buttons.c     **** 			}
  62:buttons.c     **** 		}
  63:buttons.c     **** 		else if(button_ticks[i] >= BUTTON_PRESS_TICKS)
  64:buttons.c     **** 		{
  65:buttons.c     **** 			button_ticks[i] = 0;
  66:buttons.c     **** 			event_button(i, BUTTON_RELEASE);
 8527               	.LM932:
 8528 2b10 8B2D      		mov r24,r11
 8529 2b12 0E94 0000 		call event_button
 8530 2b16 00C0      		rjmp .L438
 8531               	.L439:
  53:buttons.c     **** 			{
 8533               	.LM933:
 8534 2b18 863B      		cpi r24,-74
 8535 2b1a 23E0      		ldi r18,3
 8536 2b1c 9207      		cpc r25,r18
 8537 2b1e 00F0      		brlo .L444
  59:buttons.c     **** 				event_button(i, BUTTON_REPEAT);
 8539               	.LM934:
 8540 2b20 D182      		std Z+1,r13
 8541 2b22 C082      		st Z,r12
  60:buttons.c     **** 				event_button(i, BUTTON_REPEAT);
 8543               	.LM935:
 8544 2b24 62E0      		ldi r22,lo8(2)
 8545 2b26 00C0      		rjmp .L445
 8546               	.L436:
  65:buttons.c     **** 			event_button(i, BUTTON_RELEASE);
 8548               	.LM936:
 8549 2b28 1182      		std Z+1,__zero_reg__
 8550 2b2a 1082      		st Z,__zero_reg__
  63:buttons.c     **** 		{
 8552               	.LM937:
 8553 2b2c 8639      		cpi r24,-106
 8554 2b2e 9105      		cpc r25,__zero_reg__
 8555 2b30 00F0      		brlo .L438
 8557               	.LM938:
 8558 2b32 61E0      		ldi r22,lo8(1)
 8559 2b34 00C0      		rjmp .L445
 8560               	.LBE369:
 8561               	.LBE372:
 8562               	.LBE374:
 8570               	.Lscope43:
 8573               	.global	uart_flush
 8575               	uart_flush:
 8577               	.Ltext67:
  22:uart.c        **** 
  23:uart.c        **** static void uart_tx_str(const char *s)
  24:uart.c        **** {
  25:uart.c        **** 	register char c;
  26:uart.c        **** 	while((c = *s++)) { uart_tx(c); }
  27:uart.c        **** }
  28:uart.c        **** 
  29:uart.c        **** static void uart_tx_str_P(const char *s)
  30:uart.c        **** {
  31:uart.c        **** 	register char c;
  32:uart.c        **** 	while((c = pgm_read_byte(s++))) { uart_tx(c); }
  33:uart.c        **** }
  34:uart.c        **** 
  35:uart.c        **** void uart_flush(void)
  36:uart.c        **** {
 8579               	.LM939:
 8580               	.LFBB44:
 8581               	/* prologue: function */
 8582               	/* frame size = 0 */
 8583               	/* stack size = 0 */
 8584               	.L__stack_usage = 0
 8585               	.L447:
  37:uart.c        **** 	uint8_t dummy;
  38:uart.c        **** 	while(UCSR0A & (1 << RXC0))
 8587               	.LM940:
 8588 2b36 8091 C000 		lds r24,192
 8590               	.LM941:
 8591 2b3a 87FF      		sbrs r24,7
 8592               	/* epilogue start */
  39:uart.c        **** 	{
  40:uart.c        **** 		dummy = UDR0;
  41:uart.c        **** 	}
  42:uart.c        **** 
  43:uart.c        **** 	(void)dummy;
  44:uart.c        **** }
 8594               	.LM942:
 8595 2b3c 0895      		ret
 8596               	.L448:
  40:uart.c        **** 	}
 8598               	.LM943:
 8599 2b3e 8091 C600 		lds r24,198
 8600 2b42 00C0      		rjmp .L447
 8605               	.Lscope44:
 8608               	.global	uart_rx
 8610               	uart_rx:
  45:uart.c        **** 
  46:uart.c        **** char uart_rx(void)
  47:uart.c        **** {
 8612               	.LM944:
 8613               	.LFBB45:
 8614               	/* prologue: function */
 8615               	/* frame size = 0 */
 8616               	/* stack size = 0 */
 8617               	.L__stack_usage = 0
 8618               	.L450:
  48:uart.c        **** 	while(!(UCSR0A & (1 << RXC0))) ;
 8620               	.LM945:
 8621 2b44 8091 C000 		lds r24,192
 8623               	.LM946:
 8624 2b48 87FF      		sbrs r24,7
 8625 2b4a 00C0      		rjmp .L450
  49:uart.c        **** 	return UDR0;
 8627               	.LM947:
 8628 2b4c 8091 C600 		lds r24,198
 8629               	/* epilogue start */
  50:uart.c        **** }
 8631               	.LM948:
 8632 2b50 0895      		ret
 8634               	.Lscope45:
 8636               		.section	.rodata.str1.1,"aMS",@progbits,1
 8637               	.LC0:
 8638 0000 0D0A 00   		.string	"\r\n"
 8639               		.text
 8643               	.global	uart_rx_str
 8645               	uart_rx_str:
  51:uart.c        **** 
  52:uart.c        **** void uart_rx_str(char *buf, uint16_t size)
  53:uart.c        **** {
 8647               	.LM949:
 8648               	.LFBB46:
 8649 2b52 AF92      		push r10
 8650 2b54 BF92      		push r11
 8651 2b56 CF92      		push r12
 8652 2b58 DF92      		push r13
 8653 2b5a EF92      		push r14
 8654 2b5c FF92      		push r15
 8655 2b5e 0F93      		push r16
 8656 2b60 1F93      		push r17
 8657 2b62 CF93      		push r28
 8658 2b64 DF93      		push r29
 8659               	/* prologue: function */
 8660               	/* frame size = 0 */
 8661               	/* stack size = 10 */
 8662               	.L__stack_usage = 10
 8663 2b66 EC01      		movw r28,r24
 8664 2b68 5C01      		movw r10,r24
  54:uart.c        **** 	size_t i;
  55:uart.c        **** 	char c;
  56:uart.c        **** 	i = 0;
 8666               	.LM950:
 8667 2b6a F12C      		mov r15,__zero_reg__
 8668 2b6c E12C      		mov r14,__zero_reg__
  57:uart.c        **** 	while((c = uart_rx()) != '\r' && c != '\n')
  58:uart.c        **** 	{
  59:uart.c        **** 		uart_tx(c);
  60:uart.c        **** 		buf[i++] = c;
  61:uart.c        **** 		if(i == size - 1)
 8670               	.LM951:
 8671 2b6e 6B01      		movw r12,r22
 8672 2b70 81E0      		ldi r24,1
 8673 2b72 C81A      		sub r12,r24
 8674 2b74 D108      		sbc r13,__zero_reg__
 8675               	.L453:
  57:uart.c        **** 	while((c = uart_rx()) != '\r' && c != '\n')
 8677               	.LM952:
 8678 2b76 0E94 0000 		call uart_rx
 8679 2b7a 182F      		mov r17,r24
  57:uart.c        **** 	while((c = uart_rx()) != '\r' && c != '\n')
 8681               	.LM953:
 8682 2b7c 8D30      		cpi r24,lo8(13)
 8683 2b7e 01F0      		breq .L454
  57:uart.c        **** 	while((c = uart_rx()) != '\r' && c != '\n')
 8685               	.LM954:
 8686 2b80 8A30      		cpi r24,lo8(10)
 8687 2b82 01F0      		breq .L454
  59:uart.c        **** 		buf[i++] = c;
 8689               	.LM955:
 8690 2b84 812F      		mov r24,r17
 8691 2b86 0E94 0000 		call uart_tx
  60:uart.c        **** 		if(i == size - 1)
 8693               	.LM956:
 8694 2b8a EFEF      		ldi r30,-1
 8695 2b8c EE1A      		sub r14,r30
 8696 2b8e FE0A      		sbc r15,r30
  60:uart.c        **** 		if(i == size - 1)
 8698               	.LM957:
 8699 2b90 F501      		movw r30,r10
 8700 2b92 1193      		st Z+,r17
 8701 2b94 5F01      		movw r10,r30
 8703               	.LM958:
 8704 2b96 CE14      		cp r12,r14
 8705 2b98 DF04      		cpc r13,r15
 8706 2b9a 01F4      		brne .L453
 8707               	.L454:
 8708               	.LBB377:
 8709               	.LBB378:
  26:uart.c        **** }
 8711               	.LM959:
 8712 2b9c 00E0      		ldi r16,lo8(.LC0)
 8713 2b9e 10E0      		ldi r17,hi8(.LC0)
 8714               	.L456:
  26:uart.c        **** }
 8716               	.LM960:
 8717 2ba0 F801      		movw r30,r16
 8718 2ba2 8191      		ld r24,Z+
 8719 2ba4 8F01      		movw r16,r30
  26:uart.c        **** }
 8721               	.LM961:
 8722 2ba6 8111      		cpse r24,__zero_reg__
 8723 2ba8 00C0      		rjmp .L457
 8724               	.LBE378:
 8725               	.LBE377:
  62:uart.c        **** 		{
  63:uart.c        **** 			break;
  64:uart.c        **** 		}
  65:uart.c        **** 	}
  66:uart.c        **** 
  67:uart.c        **** 	uart_tx_str("\r\n");
  68:uart.c        **** 	buf[i] = '\0';
 8727               	.LM962:
 8728 2baa CE0D      		add r28,r14
 8729 2bac DF1D      		adc r29,r15
 8730 2bae 1882      		st Y,__zero_reg__
 8731               	/* epilogue start */
  69:uart.c        **** }
 8733               	.LM963:
 8734 2bb0 DF91      		pop r29
 8735 2bb2 CF91      		pop r28
 8736 2bb4 1F91      		pop r17
 8737 2bb6 0F91      		pop r16
 8738 2bb8 FF90      		pop r15
 8739 2bba EF90      		pop r14
 8740 2bbc DF90      		pop r13
 8741 2bbe CF90      		pop r12
 8742 2bc0 BF90      		pop r11
 8743 2bc2 AF90      		pop r10
 8744 2bc4 0895      		ret
 8745               	.L457:
 8746               	.LBB380:
 8747               	.LBB379:
  26:uart.c        **** }
 8749               	.LM964:
 8750 2bc6 0E94 0000 		call uart_tx
 8751 2bca 00C0      		rjmp .L456
 8752               	.LBE379:
 8753               	.LBE380:
 8766               	.Lscope46:
 8770               	.global	network_request
 8772               	network_request:
 8774               	.Ltext68:
   1:network.c     **** static uint8_t connected;
   2:network.c     **** static char _response[1024];
   3:network.c     **** static uint16_t _response_len;
   4:network.c     **** static char _ip[32];
   5:network.c     **** 
   6:network.c     **** static void network_init(void)
   7:network.c     **** {
   8:network.c     **** 	uint8_t i;
   9:network.c     **** 	char c;
  10:network.c     **** 	cli();
  11:network.c     **** 	i = 0;
  12:network.c     **** 	for(;;)
  13:network.c     **** 	{
  14:network.c     **** 		c = uart_rx();
  15:network.c     **** 		if(c >= 32)
  16:network.c     **** 		{
  17:network.c     **** 			_ip[i++] = c;
  18:network.c     **** 		}
  19:network.c     **** 		else if(c == '\n')
  20:network.c     **** 		{
  21:network.c     **** 			_ip[i] = '\0';
  22:network.c     **** 			i = 0;
  23:network.c     **** 			if(connected == 0xFF)
  24:network.c     **** 			{
  25:network.c     **** 				connected = 1;
  26:network.c     **** 				break;
  27:network.c     **** 			}
  28:network.c     **** 
  29:network.c     **** 			if(_ip[0] == 'S')
  30:network.c     **** 			{
  31:network.c     **** 				connected = 0xFF;
  32:network.c     **** 			}
  33:network.c     **** 			else if(_ip[0] == 'F')
  34:network.c     **** 			{
  35:network.c     **** 				break;
  36:network.c     **** 			}
  37:network.c     **** 		}
  38:network.c     **** 	}
  39:network.c     **** 
  40:network.c     **** 	sei();
  41:network.c     **** }
  42:network.c     **** 
  43:network.c     **** void network_request(char *name)
  44:network.c     **** {
 8776               	.LM965:
 8777               	.LFBB47:
 8778 2bcc 0F93      		push r16
 8779 2bce 1F93      		push r17
 8780 2bd0 CF93      		push r28
 8781 2bd2 DF93      		push r29
 8782               	/* prologue: function */
 8783               	/* frame size = 0 */
 8784               	/* stack size = 4 */
 8785               	.L__stack_usage = 4
 8786 2bd4 EC01      		movw r28,r24
  45:network.c     **** 	uint16_t i = 0;
  46:network.c     **** 	char c;
  47:network.c     **** 
  48:network.c     **** 	if(!name[0])
 8788               	.LM966:
 8789 2bd6 8881      		ld r24,Y
 8790 2bd8 8823      		tst r24
 8791 2bda 01F0      		breq .L467
  49:network.c     **** 	{
  50:network.c     **** 		goto end;
  51:network.c     **** 	}
  52:network.c     **** 
  53:network.c     **** 	uart_flush();
 8793               	.LM967:
 8794 2bdc 0E94 0000 		call uart_flush
 8795               	.L463:
 8796               	.LBB383:
 8797               	.LBB384:
 8799               	.Ltext69:
  26:uart.c        **** }
 8801               	.LM968:
 8802 2be0 8991      		ld r24,Y+
  26:uart.c        **** }
 8804               	.LM969:
 8805 2be2 8111      		cpse r24,__zero_reg__
 8806 2be4 00C0      		rjmp .L464
 8807               	.LBE384:
 8808               	.LBE383:
 8810               	.Ltext70:
  54:network.c     **** 	uart_tx_str(name);
  55:network.c     **** 	uart_tx('\n');
 8812               	.LM970:
 8813 2be6 8AE0      		ldi r24,lo8(10)
 8814 2be8 0E94 0000 		call uart_tx
 8815 2bec 00E0      		ldi r16,lo8(_response)
 8816 2bee 10E0      		ldi r17,hi8(_response)
  45:network.c     **** 	char c;
 8818               	.LM971:
 8819 2bf0 D0E0      		ldi r29,0
 8820 2bf2 C0E0      		ldi r28,0
 8821               	.L465:
  56:network.c     **** 	while((c = uart_rx()) != '~')
 8823               	.LM972:
 8824 2bf4 0E94 0000 		call uart_rx
 8826               	.LM973:
 8827 2bf8 8E37      		cpi r24,lo8(126)
 8828 2bfa 01F4      		brne .L466
 8829               	.L462:
  57:network.c     **** 	{
  58:network.c     **** 		_response[i++] = c;
  59:network.c     **** 	}
  60:network.c     **** 
  61:network.c     **** end:
  62:network.c     **** 	_response[i] = '\0';
 8831               	.LM974:
 8832 2bfc C050      		subi r28,lo8(-(_response))
 8833 2bfe D040      		sbci r29,hi8(-(_response))
 8834 2c00 1882      		st Y,__zero_reg__
 8835               	/* epilogue start */
  63:network.c     **** 	_response_len = i;
  64:network.c     **** }
 8837               	.LM975:
 8838 2c02 DF91      		pop r29
 8839 2c04 CF91      		pop r28
 8840 2c06 1F91      		pop r17
 8841 2c08 0F91      		pop r16
 8842 2c0a 0895      		ret
 8843               	.L464:
 8844               	.LBB386:
 8845               	.LBB385:
 8847               	.Ltext71:
  26:uart.c        **** }
 8849               	.LM976:
 8850 2c0c 0E94 0000 		call uart_tx
 8851 2c10 00C0      		rjmp .L463
 8852               	.L466:
 8853               	.LBE385:
 8854               	.LBE386:
 8856               	.Ltext72:
  58:network.c     **** 	}
 8858               	.LM977:
 8859 2c12 2196      		adiw r28,1
  58:network.c     **** 	}
 8861               	.LM978:
 8862 2c14 F801      		movw r30,r16
 8863 2c16 8193      		st Z+,r24
 8864 2c18 8F01      		movw r16,r30
 8865 2c1a 00C0      		rjmp .L465
 8866               	.L467:
  45:network.c     **** 	char c;
 8868               	.LM979:
 8869 2c1c D0E0      		ldi r29,0
 8870 2c1e C0E0      		ldi r28,0
 8871 2c20 00C0      		rjmp .L462
 8883               	.Lscope47:
 8887               	form_message_button_send_click:
 8889               	.Ltext73:
  50:message.c     **** }
  51:message.c     **** 
  52:message.c     **** static void form_message_button_send_click(void)
  53:message.c     **** {
 8891               	.LM980:
 8892               	.LFBB48:
 8893               	/* prologue: function */
 8894               	/* frame size = 0 */
 8895               	/* stack size = 0 */
 8896               	.L__stack_usage = 0
  54:message.c     **** 	network_request(input_message);
 8898               	.LM981:
 8899 2c22 80E0      		ldi r24,lo8(input_message)
 8900 2c24 90E0      		ldi r25,hi8(input_message)
 8901 2c26 0E94 0000 		call network_request
  55:message.c     **** 	apps_open();
 8903               	.LM982:
 8904 2c2a 0C94 0000 		jmp apps_open
 8906               	.Lscope48:
 8910               	form_request_button_send_click:
 8912               	.Ltext74:
  47:request.c     **** 	network_request(input_message + 4);
 8914               	.LM983:
 8915               	.LFBB49:
 8916 2c2e EF92      		push r14
 8917 2c30 FF92      		push r15
 8918 2c32 0F93      		push r16
 8919 2c34 1F93      		push r17
 8920 2c36 CF93      		push r28
 8921 2c38 DF93      		push r29
 8922               	/* prologue: function */
 8923               	/* frame size = 0 */
 8924               	/* stack size = 6 */
 8925               	.L__stack_usage = 6
  48:request.c     **** 	lcd_color(LCD_WHITE);
 8927               	.LM984:
 8928 2c3a 80E0      		ldi r24,lo8(input_message+4)
 8929 2c3c 90E0      		ldi r25,hi8(input_message+4)
 8930 2c3e 0E94 0000 		call network_request
  49:request.c     **** 	lcd_rect(0, 75, 240, 165);
 8932               	.LM985:
 8933 2c42 8FEF      		ldi r24,lo8(-1)
 8934 2c44 9FEF      		ldi r25,lo8(-1)
 8935 2c46 9093 0000 		sts _color+1,r25
 8936 2c4a 8093 0000 		sts _color,r24
  50:request.c     **** 	lcd_color(LCD_BLACK);
 8938               	.LM986:
 8939 2c4e 25EA      		ldi r18,lo8(-91)
 8940 2c50 30E0      		ldi r19,0
 8941 2c52 40EF      		ldi r20,lo8(-16)
 8942 2c54 50E0      		ldi r21,0
 8943 2c56 6BE4      		ldi r22,lo8(75)
 8944 2c58 70E0      		ldi r23,0
 8945 2c5a 90E0      		ldi r25,0
 8946 2c5c 80E0      		ldi r24,0
 8947 2c5e 0E94 0000 		call lcd_rect
  51:request.c     **** 	lcd_string_ml(5, 75, 12, _response);
 8949               	.LM987:
 8950 2c62 1092 0000 		sts _color+1,__zero_reg__
 8951 2c66 1092 0000 		sts _color,__zero_reg__
 8952 2c6a 80E0      		ldi r24,lo8(_response)
 8953 2c6c E82E      		mov r14,r24
 8954 2c6e 80E0      		ldi r24,hi8(_response)
 8955 2c70 F82E      		mov r15,r24
 8956               	.LBB389:
 8957               	.LBB390:
 8959               	.Ltext75:
 234:graphics.c    **** 	{
 8961               	.LM988:
 8962 2c72 C5E0      		ldi r28,lo8(5)
 8963 2c74 D0E0      		ldi r29,0
 8964               	.LBE390:
 8965               	.LBE389:
 8967               	.Ltext76:
  51:request.c     **** 	lcd_string_ml(5, 75, 12, _response);
 8969               	.LM989:
 8970 2c76 0BE4      		ldi r16,lo8(75)
 8971 2c78 10E0      		ldi r17,0
 8972               	.L470:
 8973               	.LBB393:
 8974               	.LBB391:
 8976               	.Ltext77:
 234:graphics.c    **** 	{
 8978               	.LM990:
 8979 2c7a F701      		movw r30,r14
 8980 2c7c 4191      		ld r20,Z+
 8981 2c7e 7F01      		movw r14,r30
 234:graphics.c    **** 	{
 8983               	.LM991:
 8984 2c80 4111      		cpse r20,__zero_reg__
 8985 2c82 00C0      		rjmp .L473
 8986               	/* epilogue start */
 8987               	.LBE391:
 8988               	.LBE393:
 8990               	.Ltext78:
  53:request.c     **** 
 8992               	.LM992:
 8993 2c84 DF91      		pop r29
 8994 2c86 CF91      		pop r28
 8995 2c88 1F91      		pop r17
 8996 2c8a 0F91      		pop r16
 8997 2c8c FF90      		pop r15
 8998 2c8e EF90      		pop r14
 8999 2c90 0895      		ret
 9000               	.L473:
 9001               	.LBB394:
 9002               	.LBB392:
 9004               	.Ltext79:
 236:graphics.c    **** 		{
 9006               	.LM993:
 9007 2c92 4A30      		cpi r20,lo8(10)
 9008 2c94 01F4      		brne .L471
 238:graphics.c    **** 			x0 = x;
 9010               	.LM994:
 9011 2c96 045F      		subi r16,-12
 9012 2c98 1F4F      		sbci r17,-1
 239:graphics.c    **** 			continue;
 9014               	.LM995:
 9015 2c9a C5E0      		ldi r28,lo8(5)
 9016 2c9c D0E0      		ldi r29,0
 240:graphics.c    **** 		}
 9018               	.LM996:
 9019 2c9e 00C0      		rjmp .L470
 9020               	.L471:
 243:graphics.c    **** 	}
 9022               	.LM997:
 9023 2ca0 B801      		movw r22,r16
 9024 2ca2 CE01      		movw r24,r28
 9025 2ca4 0E94 0000 		call lcd_char
 243:graphics.c    **** 	}
 9027               	.LM998:
 9028 2ca8 C80F      		add r28,r24
 9029 2caa D11D      		adc r29,__zero_reg__
 9030 2cac 00C0      		rjmp .L470
 9031               	.LBE392:
 9032               	.LBE394:
 9055               	.Lscope49:
 9057               		.section	.rodata.str1.1
 9058               	.LC1:
 9059 0003 6461 7465 		.string	"datetime"
 9059      7469 6D65 
 9059      00
 9060               		.text
 9063               	form_clock_button_get_click:
 9065               	.Ltext80:
  51:clock.c       **** 	network_request("datetime");
 9067               	.LM999:
 9068               	.LFBB50:
 9069               	/* prologue: function */
 9070               	/* frame size = 0 */
 9071               	/* stack size = 0 */
 9072               	.L__stack_usage = 0
  52:clock.c       **** 	lcd_color(LCD_WHITE);
 9074               	.LM1000:
 9075 2cae 80E0      		ldi r24,lo8(.LC1)
 9076 2cb0 90E0      		ldi r25,hi8(.LC1)
 9077 2cb2 0E94 0000 		call network_request
  53:clock.c       **** 	lcd_rect(0, 50, 240, 20);
 9079               	.LM1001:
 9080 2cb6 8FEF      		ldi r24,lo8(-1)
 9081 2cb8 9FEF      		ldi r25,lo8(-1)
 9082 2cba 9093 0000 		sts _color+1,r25
 9083 2cbe 8093 0000 		sts _color,r24
  54:clock.c       **** 	lcd_color(LCD_BLACK);
 9085               	.LM1002:
 9086 2cc2 24E1      		ldi r18,lo8(20)
 9087 2cc4 30E0      		ldi r19,0
 9088 2cc6 40EF      		ldi r20,lo8(-16)
 9089 2cc8 50E0      		ldi r21,0
 9090 2cca 62E3      		ldi r22,lo8(50)
 9091 2ccc 70E0      		ldi r23,0
 9092 2cce 90E0      		ldi r25,0
 9093 2cd0 80E0      		ldi r24,0
 9094 2cd2 0E94 0000 		call lcd_rect
  55:clock.c       **** 	lcd_string(5, 50, _response);
 9096               	.LM1003:
 9097 2cd6 1092 0000 		sts _color+1,__zero_reg__
 9098 2cda 1092 0000 		sts _color,__zero_reg__
  56:clock.c       **** }
 9100               	.LM1004:
 9101 2cde 40E0      		ldi r20,lo8(_response)
 9102 2ce0 50E0      		ldi r21,hi8(_response)
 9103 2ce2 62E3      		ldi r22,lo8(50)
 9104 2ce4 70E0      		ldi r23,0
 9105 2ce6 85E0      		ldi r24,lo8(5)
 9106 2ce8 90E0      		ldi r25,0
 9107 2cea 0C94 0000 		jmp lcd_string
 9109               	.Lscope50:
 9111               		.section	.rodata.str1.1
 9112               	.LC2:
 9113 000c 496E 6974 		.string	"Initializing ..."
 9113      6961 6C69 
 9113      7A69 6E67 
 9113      202E 2E2E 
 9113      00
 9114               	.LC3:
 9115 001d 5B20 4857 		.string	"[ HW ] Initialized"
 9115      205D 2049 
 9115      6E69 7469 
 9115      616C 697A 
 9115      6564 00
 9116               	.LC4:
 9117 0030 5B20 5541 		.string	"[ UART ] Initialized"
 9117      5254 205D 
 9117      2049 6E69 
 9117      7469 616C 
 9117      697A 6564 
 9118               	.LC5:
 9119 0045 5B20 4E45 		.string	"[ NET ] Waiting for Connection"
 9119      5420 5D20 
 9119      5761 6974 
 9119      696E 6720 
 9119      666F 7220 
 9120               	.LC6:
 9121 0064 5B20 4E45 		.string	"[ NET ] IP Address: "
 9121      5420 5D20 
 9121      4950 2041 
 9121      6464 7265 
 9121      7373 3A20 
 9122               	.LC7:
 9123 0079 5B20 4E45 		.string	"[ NET ] Timed out"
 9123      5420 5D20 
 9123      5469 6D65 
 9123      6420 6F75 
 9123      7400 
 9124               	.LC8:
 9125 008b 5B20 4E45 		.string	"[ NET ] Disabled"
 9125      5420 5D20 
 9125      4469 7361 
 9125      626C 6564 
 9125      00
 9126               	.LC9:
 9127 009c 5B20 4F53 		.string	"[ OS ] Press any key to continue ..."
 9127      205D 2050 
 9127      7265 7373 
 9127      2061 6E79 
 9127      206B 6579 
 9128               		.section	.text.startup,"ax",@progbits
 9130               	.global	main
 9132               	main:
 9134               	.Ltext81:
  38:main.c        **** 	form_init_open();
 9136               	.LM1005:
 9137               	.LFBB51:
 9138 0000 CDB7      		in r28,__SP_L__
 9139 0002 DEB7      		in r29,__SP_H__
 9140 0004 6097      		sbiw r28,16
 9141 0006 0FB6      		in __tmp_reg__,__SREG__
 9142 0008 F894      		cli
 9143 000a DEBF      		out __SP_H__,r29
 9144 000c 0FBE      		out __SREG__,__tmp_reg__
 9145 000e CDBF      		out __SP_L__,r28
 9146               	/* prologue: function */
 9147               	/* frame size = 16 */
 9148               	/* stack size = 16 */
 9149               	.L__stack_usage = 16
 9150               	.LBB417:
 9151               	.LBB418:
 9152               	.LBB419:
 9153               	.LBB420:
 9155               	.Ltext82:
  33:buttons.c     **** 	PORTC |= (1 << 0);
 9157               	.LM1006:
 9158 0010 8CEF      		ldi r24,lo8(-4)
 9159 0012 8BB9      		out 0xb,r24
  34:buttons.c     **** }
 9161               	.LM1007:
 9162 0014 409A      		sbi 0x8,0
 9163               	.LBE420:
 9164               	.LBE419:
 9165               	.LBB421:
 9166               	.LBB422:
 9168               	.Ltext83:
   9:mstimer.c     **** 	TCCR2B = (1 << CS21) | (1 << CS20);
 9170               	.LM1008:
 9171 0016 82E0      		ldi r24,lo8(2)
 9172 0018 8093 B000 		sts 176,r24
  10:mstimer.c     **** 	OCR2A = 250;
 9174               	.LM1009:
 9175 001c 93E0      		ldi r25,lo8(3)
 9176 001e 9093 B100 		sts 177,r25
  11:mstimer.c     **** 	TIMSK2 = (1 << OCIE2A);
 9178               	.LM1010:
 9179 0022 9AEF      		ldi r25,lo8(-6)
 9180 0024 9093 B300 		sts 179,r25
  12:mstimer.c     **** }
 9182               	.LM1011:
 9183 0028 8093 7000 		sts 112,r24
 9184               	.LBE422:
 9185               	.LBE421:
 9187               	.Ltext84:
   8:init.c        **** 	lcd_init();
 9189               	.LM1012:
 9190               	/* #APP */
 9191               	 ;  8 "init.c" 1
 9192 002c 7894      		sei
 9193               	 ;  0 "" 2
 9194               	/* #NOAPP */
 9195               	.LBB423:
 9196               	.LBB424:
 9198               	.Ltext85:
   1:lcd.c         **** #define LCD_WIDTH      240
   2:lcd.c         **** #define LCD_HEIGHT     320
   3:lcd.c         **** 
   4:lcd.c         **** #define LCD_DELAY         0xFFFF
   5:lcd.c         **** #define LCD_DELAY8        0xFF
   6:lcd.c         **** 
   7:lcd.c         **** #define RD_OUT            PORTC
   8:lcd.c         **** #define RD_PIN           2
   9:lcd.c         **** 
  10:lcd.c         **** #define WR_OUT            PORTC
  11:lcd.c         **** #define WR_PIN           3
  12:lcd.c         **** 
  13:lcd.c         **** #define CD_OUT            PORTC
  14:lcd.c         **** #define CD_PIN           4
  15:lcd.c         **** 
  16:lcd.c         **** #define CS_OUT            PORTC
  17:lcd.c         **** #define CS_PIN           5
  18:lcd.c         **** 
  19:lcd.c         **** #define RESET_OUT         PORTC
  20:lcd.c         **** #define RESET_PIN        6
  21:lcd.c         **** 
  22:lcd.c         **** #define PIN_LOW(p, b)     (p) &= ~(1 << (b))
  23:lcd.c         **** #define PIN_HIGH(p, b)    (p) |= (1 << (b))
  24:lcd.c         **** #define PIN_OUTPUT(p, b)  *(&p - 1) |= (1 << (b))
  25:lcd.c         **** 
  26:lcd.c         **** #define RD_ACTIVE()       PIN_LOW(RD_OUT, RD_PIN)
  27:lcd.c         **** #define RD_IDLE()         PIN_HIGH(RD_OUT, RD_PIN)
  28:lcd.c         **** #define RD_OUTPUT()       PIN_OUTPUT(RD_OUT, RD_PIN)
  29:lcd.c         **** 
  30:lcd.c         **** #define WR_ACTIVE()       PIN_LOW(WR_OUT, WR_PIN)
  31:lcd.c         **** #define WR_IDLE()         PIN_HIGH(WR_OUT, WR_PIN)
  32:lcd.c         **** #define WR_OUTPUT()       PIN_OUTPUT(WR_OUT, WR_PIN)
  33:lcd.c         **** 
  34:lcd.c         **** #define CD_COMMAND()      PIN_LOW(CD_OUT, CD_PIN)
  35:lcd.c         **** #define CD_DATA()         PIN_HIGH(CD_OUT, CD_PIN)
  36:lcd.c         **** #define CD_OUTPUT()       PIN_OUTPUT(CD_OUT, CD_PIN)
  37:lcd.c         **** 
  38:lcd.c         **** #define CS_ACTIVE()       PIN_LOW(CS_OUT, CS_PIN)
  39:lcd.c         **** #define CS_IDLE()         PIN_HIGH(CS_OUT, CS_PIN)
  40:lcd.c         **** #define CS_OUTPUT()       PIN_OUTPUT(CS_OUT, CS_PIN)
  41:lcd.c         **** 
  42:lcd.c         **** #define RESET_ACTIVE()    PIN_LOW(RESET_OUT, RESET_PIN)
  43:lcd.c         **** #define RESET_IDLE()      PIN_HIGH(RESET_OUT, RESET_PIN)
  44:lcd.c         **** #define RESET_OUTPUT()    PIN_OUTPUT(RESET_OUT, RESET_PIN)
  45:lcd.c         **** 
  46:lcd.c         **** #define WR_STROBE() \
  47:lcd.c         **** do { \
  48:lcd.c         **** 	WR_ACTIVE(); \
  49:lcd.c         **** 	WR_IDLE(); \
  50:lcd.c         **** } while(0)
  51:lcd.c         **** 
  52:lcd.c         **** #define RD_STROBE() \
  53:lcd.c         **** do { \
  54:lcd.c         **** 	RD_IDLE(); \
  55:lcd.c         **** 	RD_ACTIVE(); \
  56:lcd.c         **** 	RD_ACTIVE(); \
  57:lcd.c         **** 	RD_ACTIVE(); \
  58:lcd.c         **** } while(0)
  59:lcd.c         **** 
  60:lcd.c         **** #define _WRITE_8(x) \
  61:lcd.c         **** do { \
  62:lcd.c         **** 	PORTA = x; \
  63:lcd.c         **** } while(0)
  64:lcd.c         **** 
  65:lcd.c         **** #define WRITE_8(x) \
  66:lcd.c         **** do { \
  67:lcd.c         **** 	_WRITE_8(x); \
  68:lcd.c         **** 	WR_STROBE(); \
  69:lcd.c         **** } while(0)
  70:lcd.c         **** 
  71:lcd.c         **** #define WRITE_16(x) \
  72:lcd.c         **** do { \
  73:lcd.c         **** 	WRITE_8((x) >> 8); \
  74:lcd.c         **** 	WRITE_8(x); \
  75:lcd.c         **** } while(0)
  76:lcd.c         **** 
  77:lcd.c         **** #define SET_WRITE_DIR() \
  78:lcd.c         **** do { \
  79:lcd.c         **** 	DDRA = 0xFF; \
  80:lcd.c         **** } while(0)
  81:lcd.c         **** 
  82:lcd.c         **** #define CTL_INIT() \
  83:lcd.c         **** do { \
  84:lcd.c         **** 	RD_OUTPUT(); \
  85:lcd.c         **** 	WR_OUTPUT(); \
  86:lcd.c         **** 	CD_OUTPUT(); \
  87:lcd.c         **** 	CS_OUTPUT(); \
  88:lcd.c         **** 	RESET_OUTPUT(); \
  89:lcd.c         **** } while(0)
  90:lcd.c         **** 
  91:lcd.c         **** #define WRITE_CMD(x) \
  92:lcd.c         **** do { \
  93:lcd.c         **** 	CD_COMMAND(); \
  94:lcd.c         **** 	WRITE_16(x); \
  95:lcd.c         **** } while(0)
  96:lcd.c         **** 
  97:lcd.c         **** #define WRITE_DATA(x) \
  98:lcd.c         **** do { \
  99:lcd.c         **** 	CD_DATA(); \
 100:lcd.c         **** 	WRITE_16(x); \
 101:lcd.c         **** } while(0)
 102:lcd.c         **** 
 103:lcd.c         **** #define WRITE_CMD_DATA(cmd, data) \
 104:lcd.c         **** do { \
 105:lcd.c         **** 	CS_ACTIVE(); \
 106:lcd.c         **** 	WRITE_CMD((cmd)); \
 107:lcd.c         **** 	WRITE_DATA((data)); \
 108:lcd.c         **** 	CS_IDLE(); \
 109:lcd.c         **** } while(0)
 110:lcd.c         **** 
 111:lcd.c         **** #define WRITE_CMD_PARAM_N(cmd, n, block) \
 112:lcd.c         **** do { \
 113:lcd.c         **** 	uint8_t i, u8; \
 114:lcd.c         **** 	CS_ACTIVE(); \
 115:lcd.c         **** 	WRITE_CMD((cmd)); \
 116:lcd.c         **** 	for(i = 0; i < n; ++i) \
 117:lcd.c         **** 	{ \
 118:lcd.c         **** 		u8 = block[i]; \
 119:lcd.c         **** 		CD_DATA(); \
 120:lcd.c         **** 		WRITE_8(u8); \
 121:lcd.c         **** 	} \
 122:lcd.c         **** \
 123:lcd.c         **** 	CS_IDLE(); \
 124:lcd.c         **** } while(0)
 125:lcd.c         **** 
 126:lcd.c         **** #define WRITE_CMD_PARAM_4(cmd, d0, d1, d2, d3) \
 127:lcd.c         **** do { \
 128:lcd.c         **** 	CS_ACTIVE(); \
 129:lcd.c         **** 	WRITE_CMD((cmd)); \
 130:lcd.c         **** 	CD_DATA(); \
 131:lcd.c         **** 	WRITE_8((d0)); \
 132:lcd.c         **** 	CD_DATA(); \
 133:lcd.c         **** 	WRITE_8((d1)); \
 134:lcd.c         **** 	CD_DATA(); \
 135:lcd.c         **** 	WRITE_8((d2)); \
 136:lcd.c         **** 	CD_DATA(); \
 137:lcd.c         **** 	WRITE_8((d3)); \
 138:lcd.c         **** 	CS_IDLE(); \
 139:lcd.c         **** } while(0)
 140:lcd.c         **** 
 141:lcd.c         **** #define LCD_WINDOW_BEGIN(x0, y0, x1, y1) \
 142:lcd.c         **** do { \
 143:lcd.c         **** 	WRITE_CMD_PARAM_4(0x2A, (uint8_t)((x0) >> 8), (uint8_t)(x0), (uint8_t)((x1) >> 8), (uint8_t)(x1));
 144:lcd.c         **** 	WRITE_CMD_PARAM_4(0x2B, (uint8_t)((y0) >> 8), (uint8_t)(y0), (uint8_t)((y1) >> 8), (uint8_t)(y1));
 145:lcd.c         **** 	CS_ACTIVE(); \
 146:lcd.c         **** 	WRITE_CMD(0x2C); \
 147:lcd.c         **** 	CD_DATA(); \
 148:lcd.c         **** } while(0)
 149:lcd.c         **** 
 150:lcd.c         **** #define LCD_WINDOW_END() \
 151:lcd.c         **** do { \
 152:lcd.c         **** 	CS_IDLE(); \
 153:lcd.c         **** } while(0)
 154:lcd.c         **** 
 155:lcd.c         **** static void lcd_init(void)
 156:lcd.c         **** {
 157:lcd.c         **** 	static const uint8_t ILI9341[] PROGMEM =
 158:lcd.c         **** 	{
 159:lcd.c         **** 		0x01, 0,
 160:lcd.c         **** 		LCD_DELAY8, 50,
 161:lcd.c         **** 		0x28, 0,
 162:lcd.c         **** 		0xF6, 3, 0x01, 0x01, 0x00,
 163:lcd.c         **** 		0xCF, 3, 0x00, 0x81, 0x30,
 164:lcd.c         **** 		0xED, 4, 0x64, 0x03, 0x12, 0x81,
 165:lcd.c         **** 		0xE8, 3, 0x85, 0x10, 0x78,
 166:lcd.c         **** 		0xCB, 5, 0x39, 0x2C, 0x00, 0x34, 0x02,
 167:lcd.c         **** 		0xF7, 1, 0x20,
 168:lcd.c         **** 		0xEA, 2, 0x00, 0x00,
 169:lcd.c         **** 		0xB0, 1, 0x00,
 170:lcd.c         **** 		0xB1, 2, 0x00, 0x1B,
 171:lcd.c         **** 		0xB4, 1, 0x00,
 172:lcd.c         **** 		0xC0, 1, 0x21,
 173:lcd.c         **** 		0xC1, 1, 0x11,
 174:lcd.c         **** 		0xC5, 2, 0x3F, 0x3C,
 175:lcd.c         **** 		0xC7, 1, 0xB5,
 176:lcd.c         **** 		0x36, 1, 0x48,
 177:lcd.c         **** 		0xF2, 1, 0x00,
 178:lcd.c         **** 		0x26, 1, 0x01,
 179:lcd.c         **** 		0xE0, 15, 0x0f, 0x26, 0x24, 0x0b, 0x0e, 0x09, 0x54, 0xa8, 0x46, 0x0c, 0x17, 0x09, 0x0f, 0x07, 0x0
 180:lcd.c         **** 		0xE1, 15, 0x00, 0x19, 0x1b, 0x04, 0x10, 0x07, 0x2a, 0x47, 0x39, 0x03, 0x06, 0x06, 0x30, 0x38, 0x0
 181:lcd.c         **** 		0x11, 0,
 182:lcd.c         **** 		LCD_DELAY8, 150,
 183:lcd.c         **** 		0x29, 0,
 184:lcd.c         **** 		0x3A, 1, 0x55,
 185:lcd.c         **** 	};
 186:lcd.c         **** 
 187:lcd.c         **** 	uint16_t size;
 188:lcd.c         **** 	uint8_t i, cmd, len, d[16];
 189:lcd.c         **** 	const uint8_t *p;
 190:lcd.c         **** 	SET_WRITE_DIR();
 9200               	.LM1013:
 9201 002e 8FEF      		ldi r24,lo8(-1)
 9202 0030 81B9      		out 0x1,r24
 191:lcd.c         **** 	CTL_INIT();
 9204               	.LM1014:
 9205 0032 3A9A      		sbi 0x7,2
 9206 0034 3B9A      		sbi 0x7,3
 9207 0036 3C9A      		sbi 0x7,4
 9208 0038 3D9A      		sbi 0x7,5
 9209 003a 3E9A      		sbi 0x7,6
 192:lcd.c         **** 	CS_IDLE();
 9211               	.LM1015:
 9212 003c 459A      		sbi 0x8,5
 193:lcd.c         **** 	RD_IDLE();
 9214               	.LM1016:
 9215 003e 429A      		sbi 0x8,2
 194:lcd.c         **** 	WR_IDLE();
 9217               	.LM1017:
 9218 0040 439A      		sbi 0x8,3
 195:lcd.c         **** 	RESET_IDLE();
 9220               	.LM1018:
 9221 0042 469A      		sbi 0x8,6
 196:lcd.c         **** 	wait_ms(50);
 9223               	.LM1019:
 9224 0044 82E3      		ldi r24,lo8(50)
 9225 0046 90E0      		ldi r25,0
 9226 0048 0E94 0000 		call wait_ms
 197:lcd.c         **** 	RESET_ACTIVE();
 9228               	.LM1020:
 9229 004c 4698      		cbi 0x8,6
 198:lcd.c         **** 	wait_ms(100);
 9231               	.LM1021:
 9232 004e 84E6      		ldi r24,lo8(100)
 9233 0050 90E0      		ldi r25,0
 9234 0052 0E94 0000 		call wait_ms
 199:lcd.c         **** 	RESET_IDLE();
 9236               	.LM1022:
 9237 0056 469A      		sbi 0x8,6
 200:lcd.c         **** 	wait_ms(100);
 9239               	.LM1023:
 9240 0058 84E6      		ldi r24,lo8(100)
 9241 005a 90E0      		ldi r25,0
 9242 005c 0E94 0000 		call wait_ms
 201:lcd.c         **** 	WRITE_CMD_DATA(0xB0, 0x0000);
 9244               	.LM1024:
 9245 0060 4598      		cbi 0x8,5
 9246 0062 4498      		cbi 0x8,4
 9247 0064 12B8      		out 0x2,__zero_reg__
 9248 0066 4398      		cbi 0x8,3
 9249 0068 439A      		sbi 0x8,3
 9250 006a 80EB      		ldi r24,lo8(-80)
 9251 006c 82B9      		out 0x2,r24
 9252 006e 4398      		cbi 0x8,3
 9253 0070 439A      		sbi 0x8,3
 9254 0072 449A      		sbi 0x8,4
 9255 0074 12B8      		out 0x2,__zero_reg__
 9256 0076 4398      		cbi 0x8,3
 9257 0078 439A      		sbi 0x8,3
 9258 007a 12B8      		out 0x2,__zero_reg__
 9259 007c 4398      		cbi 0x8,3
 9260 007e 439A      		sbi 0x8,3
 9261 0080 459A      		sbi 0x8,5
 202:lcd.c         **** 	p = ILI9341;
 203:lcd.c         **** 	size = sizeof(ILI9341);
 9263               	.LM1025:
 9264 0082 04E7      		ldi r16,lo8(116)
 9265 0084 10E0      		ldi r17,0
 202:lcd.c         **** 	p = ILI9341;
 9267               	.LM1026:
 9268 0086 E0E0      		ldi r30,lo8(ILI9341.0)
 9269 0088 F0E0      		ldi r31,hi8(ILI9341.0)
 204:lcd.c         **** 	while(size)
 205:lcd.c         **** 	{
 206:lcd.c         **** 		cmd = pgm_read_byte(p++);
 207:lcd.c         **** 		len = pgm_read_byte(p++);
 208:lcd.c         **** 		if(cmd == LCD_DELAY8)
 209:lcd.c         **** 		{
 210:lcd.c         **** 			wait_ms(len);
 211:lcd.c         **** 			len = 0;
 212:lcd.c         **** 		}
 213:lcd.c         **** 		else
 214:lcd.c         **** 		{
 215:lcd.c         **** 			for(i = 0; i < len; ++i)
 216:lcd.c         **** 			{
 217:lcd.c         **** 				d[i] = pgm_read_byte(p++);
 218:lcd.c         **** 			}
 219:lcd.c         **** 
 220:lcd.c         **** 			WRITE_CMD_PARAM_N(cmd, len, d);
 221:lcd.c         **** 		}
 222:lcd.c         **** 
 223:lcd.c         **** 		size -= len + 2;
 9271               	.LM1027:
 9272 008a 9EEF      		ldi r25,lo8(-2)
 9273 008c E92E      		mov r14,r25
 9274 008e FF24      		clr r15
 9275 0090 FA94      		dec r15
 9276               	.L482:
 9277               	.LBB425:
 206:lcd.c         **** 		len = pgm_read_byte(p++);
 9279               	.LM1028:
 9280               	/* #APP */
 9281               	 ;  206 "lcd.c" 1
 9282 0092 9491      		lpm r25, Z
 9283               		
 9284               	 ;  0 "" 2
 9285               	/* #NOAPP */
 9286               	.LBE425:
 9287               	.LBB426:
 207:lcd.c         **** 		if(cmd == LCD_DELAY8)
 9289               	.LM1029:
 9290 0094 6F01      		movw r12,r30
 9291 0096 22E0      		ldi r18,2
 9292 0098 C20E      		add r12,r18
 9293 009a D11C      		adc r13,__zero_reg__
 9294               	.LBE426:
 9295               	.LBB427:
 206:lcd.c         **** 		len = pgm_read_byte(p++);
 9297               	.LM1030:
 9298 009c 3196      		adiw r30,1
 9299               	.LBE427:
 9300               	.LBB428:
 207:lcd.c         **** 		if(cmd == LCD_DELAY8)
 9302               	.LM1031:
 9303               	/* #APP */
 9304               	 ;  207 "lcd.c" 1
 9305 009e 8491      		lpm r24, Z
 9306               		
 9307               	 ;  0 "" 2
 9308               	/* #NOAPP */
 9309               	.LBE428:
 208:lcd.c         **** 		{
 9311               	.LM1032:
 9312 00a0 9F3F      		cpi r25,lo8(-1)
 9313 00a2 01F0      		breq .L476
 9314 00a4 B601      		movw r22,r12
 9315 00a6 DE01      		movw r26,r28
 9316 00a8 1196      		adiw r26,1
 9317 00aa 9D01      		movw r18,r26
 9318 00ac 4A2F      		mov r20,r26
 9319               	.L477:
 215:lcd.c         **** 			{
 9321               	.LM1033:
 9322 00ae 522F      		mov r21,r18
 9323 00b0 5A1B      		sub r21,r26
 9324 00b2 5817      		cp r21,r24
 9325 00b4 00F4      		brsh .+2
 9326 00b6 00C0      		rjmp .L479
 9327 00b8 F601      		movw r30,r12
 9328 00ba E80F      		add r30,r24
 9329 00bc F11D      		adc r31,__zero_reg__
 9330               	.LBB429:
 220:lcd.c         **** 		}
 9332               	.LM1034:
 9333 00be 4598      		cbi 0x8,5
 9334 00c0 4498      		cbi 0x8,4
 9335 00c2 12B8      		out 0x2,__zero_reg__
 9336 00c4 4398      		cbi 0x8,3
 9337 00c6 439A      		sbi 0x8,3
 9338               	.L501:
 9339 00c8 92B9      		out 0x2,r25
 9340 00ca 4398      		cbi 0x8,3
 9341 00cc 439A      		sbi 0x8,3
 9342 00ce 9A2F      		mov r25,r26
 9343 00d0 941B      		sub r25,r20
 9344 00d2 9817      		cp r25,r24
 9345 00d4 00F4      		brsh .+2
 9346 00d6 00C0      		rjmp .L481
 9347 00d8 459A      		sbi 0x8,5
 9348 00da 00C0      		rjmp .L478
 9349               	.L476:
 9350               	.LBE429:
 210:lcd.c         **** 			len = 0;
 9352               	.LM1035:
 9353 00dc 90E0      		ldi r25,0
 9354 00de 0E94 0000 		call wait_ms
 9355               	.LBB430:
 207:lcd.c         **** 		if(cmd == LCD_DELAY8)
 9357               	.LM1036:
 9358 00e2 F601      		movw r30,r12
 9359               	.LBE430:
 211:lcd.c         **** 		}
 9361               	.LM1037:
 9362 00e4 80E0      		ldi r24,0
 9363               	.L478:
 9365               	.LM1038:
 9366 00e6 9701      		movw r18,r14
 9367 00e8 281B      		sub r18,r24
 9368 00ea 3109      		sbc r19,__zero_reg__
 9369 00ec 020F      		add r16,r18
 9370 00ee 131F      		adc r17,r19
 204:lcd.c         **** 	{
 9372               	.LM1039:
 9373 00f0 0115      		cp r16,__zero_reg__
 9374 00f2 1105      		cpc r17,__zero_reg__
 9375 00f4 01F4      		brne .L482
 224:lcd.c         **** 	}
 225:lcd.c         **** 
 226:lcd.c         **** 	d[0] = 0x48;
 9377               	.LM1040:
 9378 00f6 88E4      		ldi r24,lo8(72)
 9379 00f8 8983      		std Y+1,r24
 9380               	.LBB431:
 227:lcd.c         **** 	WRITE_CMD_PARAM_N(0x36, 1, d);
 9382               	.LM1041:
 9383 00fa 4598      		cbi 0x8,5
 9384 00fc 4498      		cbi 0x8,4
 9385 00fe 12B8      		out 0x2,__zero_reg__
 9386 0100 4398      		cbi 0x8,3
 9387 0102 439A      		sbi 0x8,3
 9388 0104 86E3      		ldi r24,lo8(54)
 9389 0106 82B9      		out 0x2,r24
 9390 0108 4398      		cbi 0x8,3
 9391 010a 439A      		sbi 0x8,3
 9392 010c 8981      		ldd r24,Y+1
 9393 010e 449A      		sbi 0x8,4
 9394 0110 82B9      		out 0x2,r24
 9395 0112 4398      		cbi 0x8,3
 9396 0114 439A      		sbi 0x8,3
 9397 0116 459A      		sbi 0x8,5
 9398               	.LBE431:
 228:lcd.c         **** 	WRITE_CMD_PARAM_4(0x2A, (uint8_t)((0) >> 8), (uint8_t)(0), (uint8_t)((LCD_WIDTH - 1) >> 8), (uint8
 9400               	.LM1042:
 9401 0118 4598      		cbi 0x8,5
 9402 011a 4498      		cbi 0x8,4
 9403 011c 12B8      		out 0x2,__zero_reg__
 9404 011e 4398      		cbi 0x8,3
 9405 0120 439A      		sbi 0x8,3
 9406 0122 8AE2      		ldi r24,lo8(42)
 9407 0124 82B9      		out 0x2,r24
 9408 0126 4398      		cbi 0x8,3
 9409 0128 439A      		sbi 0x8,3
 9410 012a 449A      		sbi 0x8,4
 9411 012c 12B8      		out 0x2,__zero_reg__
 9412 012e 4398      		cbi 0x8,3
 9413 0130 439A      		sbi 0x8,3
 9414 0132 449A      		sbi 0x8,4
 9415 0134 12B8      		out 0x2,__zero_reg__
 9416 0136 4398      		cbi 0x8,3
 9417 0138 439A      		sbi 0x8,3
 9418 013a 449A      		sbi 0x8,4
 9419 013c 12B8      		out 0x2,__zero_reg__
 9420 013e 4398      		cbi 0x8,3
 9421 0140 439A      		sbi 0x8,3
 9422 0142 449A      		sbi 0x8,4
 9423 0144 8FEE      		ldi r24,lo8(-17)
 9424 0146 82B9      		out 0x2,r24
 9425 0148 4398      		cbi 0x8,3
 9426 014a 439A      		sbi 0x8,3
 9427 014c 459A      		sbi 0x8,5
 229:lcd.c         **** 	WRITE_CMD_PARAM_4(0x2B, (uint8_t)((0) >> 8), (uint8_t)(0), (uint8_t)((LCD_HEIGHT - 1) >> 8), (uint
 9429               	.LM1043:
 9430 014e 4598      		cbi 0x8,5
 9431 0150 4498      		cbi 0x8,4
 9432 0152 12B8      		out 0x2,__zero_reg__
 9433 0154 4398      		cbi 0x8,3
 9434 0156 439A      		sbi 0x8,3
 9435 0158 8BE2      		ldi r24,lo8(43)
 9436 015a 82B9      		out 0x2,r24
 9437 015c 4398      		cbi 0x8,3
 9438 015e 439A      		sbi 0x8,3
 9439 0160 449A      		sbi 0x8,4
 9440 0162 12B8      		out 0x2,__zero_reg__
 9441 0164 4398      		cbi 0x8,3
 9442 0166 439A      		sbi 0x8,3
 9443 0168 449A      		sbi 0x8,4
 9444 016a 12B8      		out 0x2,__zero_reg__
 9445 016c 4398      		cbi 0x8,3
 9446 016e 439A      		sbi 0x8,3
 9447 0170 449A      		sbi 0x8,4
 9448 0172 81E0      		ldi r24,lo8(1)
 9449 0174 82B9      		out 0x2,r24
 9450 0176 4398      		cbi 0x8,3
 9451 0178 439A      		sbi 0x8,3
 9452 017a 449A      		sbi 0x8,4
 9453 017c 9FE3      		ldi r25,lo8(63)
 9454 017e 92B9      		out 0x2,r25
 9455 0180 4398      		cbi 0x8,3
 9456 0182 439A      		sbi 0x8,3
 9457 0184 459A      		sbi 0x8,5
 230:lcd.c         **** 	d[0] = 0;
 9459               	.LM1044:
 9460 0186 1982      		std Y+1,__zero_reg__
 231:lcd.c         **** 	d[1] = 0;
 9462               	.LM1045:
 9463 0188 1A82      		std Y+2,__zero_reg__
 232:lcd.c         **** 	d[2] = (uint8_t)(LCD_HEIGHT >> 8);
 9465               	.LM1046:
 9466 018a 8B83      		std Y+3,r24
 233:lcd.c         **** 	d[3] = (uint8_t)LCD_HEIGHT;
 9468               	.LM1047:
 9469 018c 80E4      		ldi r24,lo8(64)
 9470 018e 8C83      		std Y+4,r24
 234:lcd.c         **** 	d[4] = 0;
 9472               	.LM1048:
 9473 0190 1D82      		std Y+5,__zero_reg__
 235:lcd.c         **** 	d[5] = 0;
 9475               	.LM1049:
 9476 0192 1E82      		std Y+6,__zero_reg__
 9477               	.LBB432:
 236:lcd.c         **** 	WRITE_CMD_PARAM_N(0x33, 6, d);
 9479               	.LM1050:
 9480 0194 4598      		cbi 0x8,5
 9481 0196 4498      		cbi 0x8,4
 9482 0198 12B8      		out 0x2,__zero_reg__
 9483 019a 4398      		cbi 0x8,3
 9484 019c 439A      		sbi 0x8,3
 9485 019e 83E3      		ldi r24,lo8(51)
 9486 01a0 82B9      		out 0x2,r24
 9487 01a2 4398      		cbi 0x8,3
 9488 01a4 439A      		sbi 0x8,3
 9489 01a6 FE01      		movw r30,r28
 9490 01a8 3196      		adiw r30,1
 9491 01aa CE01      		movw r24,r28
 9492 01ac 0796      		adiw r24,7
 9493               	.L483:
 9494 01ae 2191      		ld r18,Z+
 9495 01b0 449A      		sbi 0x8,4
 9496 01b2 22B9      		out 0x2,r18
 9497 01b4 4398      		cbi 0x8,3
 9498 01b6 439A      		sbi 0x8,3
 9499 01b8 E817      		cp r30,r24
 9500 01ba F907      		cpc r31,r25
 9501 01bc 01F4      		brne .L483
 9502 01be 459A      		sbi 0x8,5
 9503               	.LBE432:
 237:lcd.c         **** 	d[0] = 0;
 9505               	.LM1051:
 9506 01c0 1982      		std Y+1,__zero_reg__
 238:lcd.c         **** 	d[1] = 0;
 9508               	.LM1052:
 9509 01c2 1A82      		std Y+2,__zero_reg__
 9510               	.LBB433:
 239:lcd.c         **** 	WRITE_CMD_PARAM_N(0x37, 2, d);
 9512               	.LM1053:
 9513 01c4 4598      		cbi 0x8,5
 9514 01c6 4498      		cbi 0x8,4
 9515 01c8 12B8      		out 0x2,__zero_reg__
 9516 01ca 4398      		cbi 0x8,3
 9517 01cc 439A      		sbi 0x8,3
 9518 01ce 87E3      		ldi r24,lo8(55)
 9519 01d0 82B9      		out 0x2,r24
 9520 01d2 4398      		cbi 0x8,3
 9521 01d4 439A      		sbi 0x8,3
 9522 01d6 8981      		ldd r24,Y+1
 9523 01d8 449A      		sbi 0x8,4
 9524 01da 82B9      		out 0x2,r24
 9525 01dc 4398      		cbi 0x8,3
 9526 01de 439A      		sbi 0x8,3
 9527 01e0 8A81      		ldd r24,Y+2
 9528 01e2 449A      		sbi 0x8,4
 9529 01e4 82B9      		out 0x2,r24
 9530 01e6 4398      		cbi 0x8,3
 9531 01e8 439A      		sbi 0x8,3
 9532 01ea 459A      		sbi 0x8,5
 9533               	.LBE433:
 240:lcd.c         **** 
 241:lcd.c         **** 	CS_ACTIVE();
 9535               	.LM1054:
 9536 01ec 4598      		cbi 0x8,5
 242:lcd.c         **** 	WRITE_CMD(0x13);
 9538               	.LM1055:
 9539 01ee 4498      		cbi 0x8,4
 9540 01f0 12B8      		out 0x2,__zero_reg__
 9541 01f2 4398      		cbi 0x8,3
 9542 01f4 439A      		sbi 0x8,3
 9543 01f6 83E1      		ldi r24,lo8(19)
 9544 01f8 82B9      		out 0x2,r24
 9545 01fa 4398      		cbi 0x8,3
 9546 01fc 439A      		sbi 0x8,3
 243:lcd.c         **** 	CS_IDLE();
 9548               	.LM1056:
 9549 01fe 459A      		sbi 0x8,5
 244:lcd.c         **** 
 245:lcd.c         **** 	CS_ACTIVE();
 9551               	.LM1057:
 9552 0200 4598      		cbi 0x8,5
 246:lcd.c         **** 	WRITE_CMD(0x20);
 9554               	.LM1058:
 9555 0202 4498      		cbi 0x8,4
 9556 0204 12B8      		out 0x2,__zero_reg__
 9557 0206 4398      		cbi 0x8,3
 9558 0208 439A      		sbi 0x8,3
 9559 020a 80E2      		ldi r24,lo8(32)
 9560 020c 82B9      		out 0x2,r24
 9561 020e 4398      		cbi 0x8,3
 9562 0210 439A      		sbi 0x8,3
 247:lcd.c         **** 	CS_IDLE();
 9564               	.LM1059:
 9565 0212 459A      		sbi 0x8,5
 9566               	.LBE424:
 9567               	.LBE423:
 9569               	.Ltext86:
  10:init.c        **** 	lcd_clear();
 9571               	.LM1060:
 9572 0214 8FEF      		ldi r24,lo8(-1)
 9573 0216 9FEF      		ldi r25,lo8(-1)
 9574 0218 9093 0000 		sts _color+1,r25
 9575 021c 8093 0000 		sts _color,r24
 9576               	.LBB437:
 9577               	.LBB438:
 9579               	.Ltext87:
  30:graphics.c    **** 	while(i--)
 9581               	.LM1061:
 9582 0220 4598      		cbi 0x8,5
 9583 0222 4498      		cbi 0x8,4
 9584 0224 12B8      		out 0x2,__zero_reg__
 9585 0226 4398      		cbi 0x8,3
 9586 0228 439A      		sbi 0x8,3
 9587 022a 8AE2      		ldi r24,lo8(42)
 9588 022c 82B9      		out 0x2,r24
 9589 022e 4398      		cbi 0x8,3
 9590 0230 439A      		sbi 0x8,3
 9591 0232 449A      		sbi 0x8,4
 9592 0234 12B8      		out 0x2,__zero_reg__
 9593 0236 4398      		cbi 0x8,3
 9594 0238 439A      		sbi 0x8,3
 9595 023a 449A      		sbi 0x8,4
 9596 023c 12B8      		out 0x2,__zero_reg__
 9597 023e 4398      		cbi 0x8,3
 9598 0240 439A      		sbi 0x8,3
 9599 0242 449A      		sbi 0x8,4
 9600 0244 12B8      		out 0x2,__zero_reg__
 9601 0246 4398      		cbi 0x8,3
 9602 0248 439A      		sbi 0x8,3
 9603 024a 449A      		sbi 0x8,4
 9604 024c 8FEE      		ldi r24,lo8(-17)
 9605 024e 82B9      		out 0x2,r24
 9606 0250 4398      		cbi 0x8,3
 9607 0252 439A      		sbi 0x8,3
 9608 0254 459A      		sbi 0x8,5
 9609 0256 4598      		cbi 0x8,5
 9610 0258 4498      		cbi 0x8,4
 9611 025a 12B8      		out 0x2,__zero_reg__
 9612 025c 4398      		cbi 0x8,3
 9613 025e 439A      		sbi 0x8,3
 9614 0260 8BE2      		ldi r24,lo8(43)
 9615 0262 82B9      		out 0x2,r24
 9616 0264 4398      		cbi 0x8,3
 9617 0266 439A      		sbi 0x8,3
 9618 0268 449A      		sbi 0x8,4
 9619 026a 12B8      		out 0x2,__zero_reg__
 9620 026c 4398      		cbi 0x8,3
 9621 026e 439A      		sbi 0x8,3
 9622 0270 449A      		sbi 0x8,4
 9623 0272 12B8      		out 0x2,__zero_reg__
 9624 0274 4398      		cbi 0x8,3
 9625 0276 439A      		sbi 0x8,3
 9626 0278 449A      		sbi 0x8,4
 9627 027a 81E0      		ldi r24,lo8(1)
 9628 027c 82B9      		out 0x2,r24
 9629 027e 4398      		cbi 0x8,3
 9630 0280 439A      		sbi 0x8,3
 9631 0282 449A      		sbi 0x8,4
 9632 0284 8FE3      		ldi r24,lo8(63)
 9633 0286 82B9      		out 0x2,r24
 9634 0288 4398      		cbi 0x8,3
 9635 028a 439A      		sbi 0x8,3
 9636 028c 459A      		sbi 0x8,5
 9637 028e 4598      		cbi 0x8,5
 9638 0290 4498      		cbi 0x8,4
 9639 0292 12B8      		out 0x2,__zero_reg__
 9640 0294 4398      		cbi 0x8,3
 9641 0296 439A      		sbi 0x8,3
 9642 0298 8CE2      		ldi r24,lo8(44)
 9643 029a 82B9      		out 0x2,r24
 9644 029c 4398      		cbi 0x8,3
 9645 029e 439A      		sbi 0x8,3
 9646 02a0 449A      		sbi 0x8,4
  31:graphics.c    **** 	{
 9648               	.LM1062:
 9649 02a2 21E0      		ldi r18,lo8(1)
 9650 02a4 3BE4      		ldi r19,lo8(75)
  33:graphics.c    **** 		WRITE_8(lo);
 9652               	.LM1063:
 9653 02a6 8FEF      		ldi r24,lo8(-1)
 9654               	.L484:
  31:graphics.c    **** 	{
 9656               	.LM1064:
 9657 02a8 2150      		subi r18,1
 9658 02aa 3109      		sbc r19,__zero_reg__
 9659 02ac 01F0      		breq .+2
 9660 02ae 00C0      		rjmp .L485
  46:graphics.c    **** }
 9662               	.LM1065:
 9663 02b0 459A      		sbi 0x8,5
 9664               	.LBE438:
 9665               	.LBE437:
 9667               	.Ltext88:
  13:init.c        **** 	lcd_rect(0, 0, LCD_WIDTH, 20);
 9669               	.LM1066:
 9670 02b2 8FE1      		ldi r24,lo8(31)
 9671 02b4 90E0      		ldi r25,0
 9672 02b6 9093 0000 		sts _color+1,r25
 9673 02ba 8093 0000 		sts _color,r24
  14:init.c        **** 
 9675               	.LM1067:
 9676 02be 24E1      		ldi r18,lo8(20)
 9677 02c0 30E0      		ldi r19,0
 9678 02c2 40EF      		ldi r20,lo8(-16)
 9679 02c4 50E0      		ldi r21,0
 9680 02c6 70E0      		ldi r23,0
 9681 02c8 60E0      		ldi r22,0
 9682 02ca 90E0      		ldi r25,0
 9683 02cc 80E0      		ldi r24,0
 9684 02ce 0E94 0000 		call lcd_rect
  16:init.c        **** 	lcd_string(5, 5, "Initializing ...");
 9686               	.LM1068:
 9687 02d2 8FEF      		ldi r24,lo8(-1)
 9688 02d4 9FEF      		ldi r25,lo8(-1)
 9689 02d6 9093 0000 		sts _color+1,r25
 9690 02da 8093 0000 		sts _color,r24
  17:init.c        **** 
 9692               	.LM1069:
 9693 02de 40E0      		ldi r20,lo8(.LC2)
 9694 02e0 50E0      		ldi r21,hi8(.LC2)
 9695 02e2 65E0      		ldi r22,lo8(5)
 9696 02e4 70E0      		ldi r23,0
 9697 02e6 85E0      		ldi r24,lo8(5)
 9698 02e8 90E0      		ldi r25,0
 9699 02ea 0E94 0000 		call lcd_string
  19:init.c        **** 
 9701               	.LM1070:
 9702 02ee 1092 0000 		sts _color+1,__zero_reg__
 9703 02f2 1092 0000 		sts _color,__zero_reg__
  23:init.c        **** 	y += 20;
 9705               	.LM1071:
 9706 02f6 40E0      		ldi r20,lo8(.LC3)
 9707 02f8 50E0      		ldi r21,hi8(.LC3)
 9708 02fa 69E1      		ldi r22,lo8(25)
 9709 02fc 70E0      		ldi r23,0
 9710 02fe 85E0      		ldi r24,lo8(5)
 9711 0300 90E0      		ldi r25,0
 9712 0302 0E94 0000 		call lcd_string
  27:init.c        **** 	{
 9714               	.LM1072:
 9715 0306 309B      		sbis 0x6,0
 9716 0308 00C0      		rjmp .L486
 9717               	.LBB440:
 9718               	.LBB441:
 9720               	.Ltext89:
  11:uart.c        **** 	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
 9722               	.LM1073:
 9723 030a 88E1      		ldi r24,lo8(24)
 9724 030c 8093 C100 		sts 193,r24
  12:uart.c        **** 	UBRR0L = (uint8_t)(_BAUD & 0xFF);
 9726               	.LM1074:
 9727 0310 86E0      		ldi r24,lo8(6)
 9728 0312 8093 C200 		sts 194,r24
  13:uart.c        **** 	UBRR0H = (uint8_t)((_BAUD >> 8) & 0xFF);
 9730               	.LM1075:
 9731 0316 87E7      		ldi r24,lo8(119)
 9732 0318 8093 C400 		sts 196,r24
  14:uart.c        **** }
 9734               	.LM1076:
 9735 031c 1092 C500 		sts 197,__zero_reg__
 9736               	.LBE441:
 9737               	.LBE440:
 9739               	.Ltext90:
  31:init.c        **** 		y += 20;
 9741               	.LM1077:
 9742 0320 40E0      		ldi r20,lo8(.LC4)
 9743 0322 50E0      		ldi r21,hi8(.LC4)
 9744 0324 6DE2      		ldi r22,lo8(45)
 9745 0326 70E0      		ldi r23,0
 9746 0328 85E0      		ldi r24,lo8(5)
 9747 032a 90E0      		ldi r25,0
 9748 032c 0E94 0000 		call lcd_string
  34:init.c        **** 		y += 20;
 9750               	.LM1078:
 9751 0330 40E0      		ldi r20,lo8(.LC5)
 9752 0332 50E0      		ldi r21,hi8(.LC5)
 9753 0334 61E4      		ldi r22,lo8(65)
 9754 0336 70E0      		ldi r23,0
 9755 0338 85E0      		ldi r24,lo8(5)
 9756 033a 90E0      		ldi r25,0
 9757 033c 0E94 0000 		call lcd_string
 9758               	.LBB442:
 9759               	.LBB443:
 9761               	.Ltext91:
  10:network.c     **** 	i = 0;
 9763               	.LM1079:
 9764               	/* #APP */
 9765               	 ;  10 "network.c" 1
 9766 0340 F894      		cli
 9767               	 ;  0 "" 2
  11:network.c     **** 	for(;;)
 9769               	.LM1080:
 9770               	/* #NOAPP */
 9771 0342 10E0      		ldi r17,0
  31:network.c     **** 			}
 9773               	.LM1081:
 9774 0344 0FEF      		ldi r16,lo8(-1)
 9775               	.L487:
  14:network.c     **** 		if(c >= 32)
 9777               	.LM1082:
 9778 0346 0E94 0000 		call uart_rx
  17:network.c     **** 		}
 9780               	.LM1083:
 9781 034a 212F      		mov r18,r17
 9782 034c 30E0      		ldi r19,0
  15:network.c     **** 		{
 9784               	.LM1084:
 9785 034e 8032      		cpi r24,lo8(32)
 9786 0350 00F0      		brlo .L488
  17:network.c     **** 		}
 9788               	.LM1085:
 9789 0352 1F5F      		subi r17,lo8(-(1))
  17:network.c     **** 		}
 9791               	.LM1086:
 9792 0354 2050      		subi r18,lo8(-(_ip))
 9793 0356 3040      		sbci r19,hi8(-(_ip))
 9794 0358 F901      		movw r30,r18
 9795 035a 8083      		st Z,r24
 9796 035c 00C0      		rjmp .L487
 9797               	.L479:
 9798               	.LBE443:
 9799               	.LBE442:
 9800               	.LBB446:
 9801               	.LBB436:
 9802               	.LBB434:
 9804               	.Ltext92:
 217:lcd.c         **** 			}
 9806               	.LM1087:
 9807 035e FB01      		movw r30,r22
 9808               	/* #APP */
 9809               	 ;  217 "lcd.c" 1
 9810 0360 5491      		lpm r21, Z
 9811               		
 9812               	 ;  0 "" 2
 9813               	/* #NOAPP */
 9814               	.LBE434:
 217:lcd.c         **** 			}
 9816               	.LM1088:
 9817 0362 F901      		movw r30,r18
 9818 0364 5193      		st Z+,r21
 9819 0366 9F01      		movw r18,r30
 9820 0368 6F5F      		subi r22,-1
 9821 036a 7F4F      		sbci r23,-1
 9822 036c 00C0      		rjmp .L477
 9823               	.L481:
 9824               	.LBB435:
 220:lcd.c         **** 		}
 9826               	.LM1089:
 9827 036e 9D91      		ld r25,X+
 9828 0370 449A      		sbi 0x8,4
 9829 0372 00C0      		rjmp .L501
 9830               	.L485:
 9831               	.LBE435:
 9832               	.LBE436:
 9833               	.LBE446:
 9834               	.LBB447:
 9835               	.LBB439:
 9837               	.Ltext93:
  33:graphics.c    **** 		WRITE_8(lo);
 9839               	.LM1090:
 9840 0374 82B9      		out 0x2,r24
 9841 0376 4398      		cbi 0x8,3
 9842 0378 439A      		sbi 0x8,3
  34:graphics.c    **** 
 9844               	.LM1091:
 9845 037a 82B9      		out 0x2,r24
 9846 037c 4398      		cbi 0x8,3
 9847 037e 439A      		sbi 0x8,3
  36:graphics.c    **** 		WRITE_8(lo);
 9849               	.LM1092:
 9850 0380 82B9      		out 0x2,r24
 9851 0382 4398      		cbi 0x8,3
 9852 0384 439A      		sbi 0x8,3
  37:graphics.c    **** 
 9854               	.LM1093:
 9855 0386 82B9      		out 0x2,r24
 9856 0388 4398      		cbi 0x8,3
 9857 038a 439A      		sbi 0x8,3
  39:graphics.c    **** 		WRITE_8(lo);
 9859               	.LM1094:
 9860 038c 82B9      		out 0x2,r24
 9861 038e 4398      		cbi 0x8,3
 9862 0390 439A      		sbi 0x8,3
  40:graphics.c    **** 
 9864               	.LM1095:
 9865 0392 82B9      		out 0x2,r24
 9866 0394 4398      		cbi 0x8,3
 9867 0396 439A      		sbi 0x8,3
  42:graphics.c    **** 		WRITE_8(lo);
 9869               	.LM1096:
 9870 0398 82B9      		out 0x2,r24
 9871 039a 4398      		cbi 0x8,3
 9872 039c 439A      		sbi 0x8,3
  43:graphics.c    **** 	}
 9874               	.LM1097:
 9875 039e 82B9      		out 0x2,r24
 9876 03a0 4398      		cbi 0x8,3
 9877 03a2 439A      		sbi 0x8,3
 9878 03a4 00C0      		rjmp .L484
 9879               	.L488:
 9880               	.LBE439:
 9881               	.LBE447:
 9882               	.LBB448:
 9883               	.LBB444:
 9885               	.Ltext94:
  19:network.c     **** 		{
 9887               	.LM1098:
 9888 03a6 8A30      		cpi r24,lo8(10)
 9889 03a8 01F4      		brne .L487
  23:network.c     **** 			{
 9891               	.LM1099:
 9892 03aa 8091 0000 		lds r24,connected
  21:network.c     **** 			i = 0;
 9894               	.LM1100:
 9895 03ae 2050      		subi r18,lo8(-(_ip))
 9896 03b0 3040      		sbci r19,hi8(-(_ip))
 9897 03b2 F901      		movw r30,r18
 9898 03b4 1082      		st Z,__zero_reg__
  23:network.c     **** 			{
 9900               	.LM1101:
 9901 03b6 8F3F      		cpi r24,lo8(-1)
 9902 03b8 01F4      		brne .L490
  25:network.c     **** 				break;
 9904               	.LM1102:
 9905 03ba 81E0      		ldi r24,lo8(1)
 9906 03bc 8093 0000 		sts connected,r24
 9907               	.L491:
  40:network.c     **** }
 9909               	.LM1103:
 9910               	/* #APP */
 9911               	 ;  40 "network.c" 1
 9912 03c0 7894      		sei
 9913               	 ;  0 "" 2
 9914               	/* #NOAPP */
 9915               	.LBE444:
 9916               	.LBE448:
 9918               	.Ltext95:
  38:init.c        **** 		{
 9920               	.LM1104:
 9921 03c2 8091 0000 		lds r24,connected
 9922 03c6 8823      		tst r24
 9923 03c8 01F0      		breq .L493
 9924               	.LBB449:
  40:init.c        **** 			lcd_string(x0, y, _ip);
 9926               	.LM1105:
 9927 03ca 40E0      		ldi r20,lo8(.LC6)
 9928 03cc 50E0      		ldi r21,hi8(.LC6)
 9929 03ce 65E5      		ldi r22,lo8(85)
 9930 03d0 70E0      		ldi r23,0
 9931 03d2 85E0      		ldi r24,lo8(5)
 9932 03d4 90E0      		ldi r25,0
 9933 03d6 0E94 0000 		call lcd_string
  41:init.c        **** 		}
 9935               	.LM1106:
 9936 03da 40E0      		ldi r20,lo8(_ip)
 9937 03dc 50E0      		ldi r21,hi8(_ip)
 9938 03de 65E5      		ldi r22,lo8(85)
 9939 03e0 70E0      		ldi r23,0
 9940               	.L502:
 9941               	.LBE449:
  45:init.c        **** 		}
 9943               	.LM1107:
 9944 03e2 0E94 0000 		call lcd_string
  48:init.c        **** 	}
 9946               	.LM1108:
 9947 03e6 09E6      		ldi r16,lo8(105)
 9948 03e8 10E0      		ldi r17,0
 9949               	.L494:
  62:init.c        **** 		lcd_rect(0, y - 5, LCD_WIDTH, 20);
 9951               	.LM1109:
 9952 03ea EE24      		clr r14
 9953 03ec EA94      		dec r14
 9954 03ee FE2C      		mov r15,r14
  63:init.c        **** 		wait_ms(500);
 9956               	.LM1110:
 9957 03f0 6801      		movw r12,r16
 9958 03f2 F5E0      		ldi r31,5
 9959 03f4 CF1A      		sub r12,r31
 9960 03f6 D108      		sbc r13,__zero_reg__
 9961 03f8 00C0      		rjmp .L495
 9962               	.L490:
 9963               	.LBB450:
 9964               	.LBB445:
 9966               	.Ltext96:
  29:network.c     **** 			{
 9968               	.LM1111:
 9969 03fa 8091 0000 		lds r24,_ip
  29:network.c     **** 			{
 9971               	.LM1112:
 9972 03fe 8335      		cpi r24,lo8(83)
 9973 0400 01F4      		brne .L492
  31:network.c     **** 			}
 9975               	.LM1113:
 9976 0402 0093 0000 		sts connected,r16
 9977               	.L498:
  22:network.c     **** 			if(connected == 0xFF)
 9979               	.LM1114:
 9980 0406 10E0      		ldi r17,0
 9981 0408 00C0      		rjmp .L487
 9982               	.L492:
  33:network.c     **** 			{
 9984               	.LM1115:
 9985 040a 8634      		cpi r24,lo8(70)
 9986 040c 01F4      		brne .L498
 9987 040e 00C0      		rjmp .L491
 9988               	.L493:
 9989               	.LBE445:
 9990               	.LBE450:
 9992               	.Ltext97:
  45:init.c        **** 		}
 9994               	.LM1116:
 9995 0410 40E0      		ldi r20,lo8(.LC7)
 9996 0412 50E0      		ldi r21,hi8(.LC7)
 9997 0414 65E5      		ldi r22,lo8(85)
 9998 0416 70E0      		ldi r23,0
 9999 0418 85E0      		ldi r24,lo8(5)
 10000 041a 90E0      		ldi r25,0
 10001 041c 00C0      		rjmp .L502
 10002               	.L486:
  52:init.c        **** 		y += 20;
 10004               	.LM1117:
 10005 041e 40E0      		ldi r20,lo8(.LC8)
 10006 0420 50E0      		ldi r21,hi8(.LC8)
 10007 0422 6DE2      		ldi r22,lo8(45)
 10008 0424 70E0      		ldi r23,0
 10009 0426 85E0      		ldi r24,lo8(5)
 10010 0428 90E0      		ldi r25,0
 10011 042a 0E94 0000 		call lcd_string
  53:init.c        **** 	}
 10013               	.LM1118:
 10014 042e 01E4      		ldi r16,lo8(65)
 10015 0430 10E0      		ldi r17,0
 10016 0432 00C0      		rjmp .L494
 10017               	.L496:
  58:init.c        **** 		lcd_string(5, y, "[ OS ] Press any key to continue ...");
 10019               	.LM1119:
 10020 0434 1092 0000 		sts _color+1,__zero_reg__
 10021 0438 1092 0000 		sts _color,__zero_reg__
  59:init.c        **** 		wait_ms(500);
 10023               	.LM1120:
 10024 043c 40E0      		ldi r20,lo8(.LC9)
 10025 043e 50E0      		ldi r21,hi8(.LC9)
 10026 0440 B801      		movw r22,r16
 10027 0442 85E0      		ldi r24,lo8(5)
 10028 0444 90E0      		ldi r25,0
 10029 0446 0E94 0000 		call lcd_string
  60:init.c        **** 
 10031               	.LM1121:
 10032 044a 84EF      		ldi r24,lo8(-12)
 10033 044c 91E0      		ldi r25,lo8(1)
 10034 044e 0E94 0000 		call wait_ms
  62:init.c        **** 		lcd_rect(0, y - 5, LCD_WIDTH, 20);
 10036               	.LM1122:
 10037 0452 F092 0000 		sts _color+1,r15
 10038 0456 E092 0000 		sts _color,r14
  63:init.c        **** 		wait_ms(500);
 10040               	.LM1123:
 10041 045a 24E1      		ldi r18,lo8(20)
 10042 045c 30E0      		ldi r19,0
 10043 045e 40EF      		ldi r20,lo8(-16)
 10044 0460 50E0      		ldi r21,0
 10045 0462 B601      		movw r22,r12
 10046 0464 90E0      		ldi r25,0
 10047 0466 80E0      		ldi r24,0
 10048 0468 0E94 0000 		call lcd_rect
  64:init.c        **** 	}
 10050               	.LM1124:
 10051 046c 84EF      		ldi r24,lo8(-12)
 10052 046e 91E0      		ldi r25,lo8(1)
 10053 0470 0E94 0000 		call wait_ms
 10054               	.L495:
  56:init.c        **** 	{
 10056               	.LM1125:
 10057 0474 8091 0000 		lds r24,any_key
 10058 0478 8111      		cpse r24,__zero_reg__
 10059 047a 00C0      		rjmp .L496
 10060               	.LBE418:
 10061               	.LBE417:
 10063               	.Ltext98:
  40:main.c        **** 	apps_open();
 10065               	.LM1126:
 10066 047c 0E94 0000 		call render_keyboard
  41:main.c        **** 	for(;;)
 10068               	.LM1127:
 10069 0480 0E94 0000 		call apps_open
 10070               	.L497:
 10071 0484 00C0      		rjmp .L497
 10125               	.Lscope51:
 10127               		.section	.rodata
 10130               	CSWTCH.225:
 10131 0000 0000      		.word	error_math
 10132 0002 0000      		.word	error_nomem
 10133 0004 0000      		.word	error_range
 10136               	CSWTCH.189:
 10137 0006 03        		.byte	3
 10138 0007 03        		.byte	3
 10139 0008 02        		.byte	2
 10140 0009 02        		.byte	2
 10141 000a 01        		.byte	1
 10142               		.section	.progmem.data,"a",@progbits
 10145               	ILI9341.0:
 10146 0000 0100      		.string	"\001"
 10147 0002 FF32 2800 		.string	"\3772("
 10148 0006 F603 0101 		.string	"\366\003\001\001"
 10148      00
 10149 000b CF03 00   		.string	"\317\003"
 10150 000e 8130 ED04 		.string	"\2010\355\004d\003\022\201\350\003\205\020x\313\0059,"
 10150      6403 1281 
 10150      E803 8510 
 10150      78CB 0539 
 10150      2C00 
 10151 0020 3402 F701 		.string	"4\002\367\001 \352\002"
 10151      20EA 0200 
 10152 0028 00        		.string	""
 10153 0029 B001 00   		.string	"\260\001"
 10154 002c B102 00   		.string	"\261\002"
 10155 002f 1BB4 0100 		.string	"\033\264\001"
 10156 0033 C001 21C1 		.string	"\300\001!\301\001\021\305\002?<\307\001\2656\001H\362\001"
 10156      0111 C502 
 10156      3F3C C701 
 10156      B536 0148 
 10156      F201 00
 10157 0046 2601 01E0 		.string	"&\001\001\340\017\017&$\013\016\tT\250F\f\027\t\017\007"
 10157      0F0F 2624 
 10157      0B0E 0954 
 10157      A846 0C17 
 10157      090F 0700 
 10158 005a E10F 00   		.string	"\341\017"
 10159 005d 191B 0410 		.string	"\031\033\004\020\007*G9\003\006\00608\017\021"
 10159      072A 4739 
 10159      0306 0630 
 10159      380F 1100 
 10160 006d FF96 2900 		.string	"\377\226)"
 10161 0071 3A01 55   		.ascii	":\001U"
 10163               		.data
 10166               	clock_form:
 10167 0000 01        		.byte	1
 10168 0001 0000      		.word	clock
 10169 0003 0000      		.word	clock_elements
 10170 0005 0200      		.word	2
 10171 0007 0000      		.word	gs(form_clock_key)
 10176               	clock_elements:
 10177 0009 01        		.byte	1
 10178 000a 01        		.byte	1
 10179 000b 0500      		.word	5
 10180 000d 0500      		.word	5
 10181 000f E600      		.word	230
 10182 0011 1400      		.word	20
 10183 0013 0000      		.word	get_time_and_date
 10184 0015 0000      		.word	gs(form_clock_button_get_click)
 10185 0017 01        		.byte	1
 10186 0018 01        		.byte	1
 10187 0019 0500      		.word	5
 10188 001b 3700      		.word	55
 10189 001d E600      		.word	230
 10190 001f 1400      		.word	20
 10191 0021 0000      		.word	start_timer
 10192 0023 0000      		.word	gs(form_clock_button_toggle_click)
 10196               	count_up:
 10197 0025 FFFF      		.word	-1
 10201               	message_form:
 10202 0027 01        		.byte	1
 10203 0028 0000      		.word	send_message
 10204 002a 0000      		.word	message_elements
 10205 002c 0200      		.word	2
 10206 002e 0000      		.word	gs(form_message_key)
 10210               	message_elements:
 10211 0030 02        		.byte	2
 10212 0031 0500      		.word	5
 10213 0033 0500      		.word	5
 10214 0035 E600      		.word	230
 10215 0037 00        		.byte	0
 10216 0038 00        		.byte	0
 10217 0039 00        		.byte	0
 10218 003a 3C        		.byte	60
 10219 003b 0000      		.word	input_message+4
 10220 003d 00        		.zero	1
 10221 003e 01        		.byte	1
 10222 003f 01        		.byte	1
 10223 0040 9B00      		.word	155
 10224 0042 1E00      		.word	30
 10225 0044 5000      		.word	80
 10226 0046 1400      		.word	20
 10227 0048 0000      		.word	send
 10228 004a 0000      		.word	gs(form_message_button_send_click)
 10232               	request_form:
 10233 004c 01        		.byte	1
 10234 004d 0000      		.word	request
 10235 004f 0000      		.word	request_elements
 10236 0051 0200      		.word	2
 10237 0053 0000      		.word	gs(form_request_key)
 10241               	request_elements:
 10242 0055 02        		.byte	2
 10243 0056 0500      		.word	5
 10244 0058 0500      		.word	5
 10245 005a E600      		.word	230
 10246 005c 00        		.byte	0
 10247 005d 00        		.byte	0
 10248 005e 00        		.byte	0
 10249 005f 3C        		.byte	60
 10250 0060 0000      		.word	input_message+4
 10251 0062 00        		.zero	1
 10252 0063 01        		.byte	1
 10253 0064 01        		.byte	1
 10254 0065 9B00      		.word	155
 10255 0067 1E00      		.word	30
 10256 0069 5000      		.word	80
 10257 006b 1400      		.word	20
 10258 006d 0000      		.word	request
 10259 006f 0000      		.word	gs(form_request_button_send_click)
 10263               	table_form:
 10264 0071 01        		.byte	1
 10265 0072 0000      		.word	calculator
 10266 0074 0000      		.word	table_elements
 10267 0076 0900      		.word	9
 10268 0078 0000      		.word	gs(form_table_key)
 10272               	table_elements:
 10273 007a 02        		.byte	2
 10274 007b 0500      		.word	5
 10275 007d 0500      		.word	5
 10276 007f B900      		.word	185
 10277 0081 00        		.byte	0
 10278 0082 00        		.byte	0
 10279 0083 00        		.byte	0
 10280 0084 20        		.byte	32
 10281 0085 0000      		.word	input_fx_buffer
 10282 0087 00        		.zero	1
 10283 0088 01        		.byte	1
 10284 0089 01        		.byte	1
 10285 008a C300      		.word	195
 10286 008c 0500      		.word	5
 10287 008e 2800      		.word	40
 10288 0090 1400      		.word	20
 10289 0092 0000      		.word	ok
 10290 0094 0000      		.word	gs(form_table_input_button_ok_click)
 10291 0096 00        		.byte	0
 10292 0097 01        		.byte	1
 10293 0098 0500      		.word	5
 10294 009a 2300      		.word	35
 10295 009c 0000      		.word	xeq
 10296 009e 0000 0000 		.zero	6
 10296      0000 
 10297 00a4 02        		.byte	2
 10298 00a5 2D00      		.word	45
 10299 00a7 1E00      		.word	30
 10300 00a9 BE00      		.word	190
 10301 00ab 00        		.byte	0
 10302 00ac 03        		.byte	3
 10303 00ad 03        		.byte	3
 10304 00ae 10        		.byte	16
 10305 00af 0000      		.word	input_x_buffer
 10306 00b1 00        		.zero	1
 10307 00b2 00        		.byte	0
 10308 00b3 01        		.byte	1
 10309 00b4 0500      		.word	5
 10310 00b6 3C00      		.word	60
 10311 00b8 0000      		.word	step
 10312 00ba 0000 0000 		.zero	6
 10312      0000 
 10313 00c0 02        		.byte	2
 10314 00c1 2D00      		.word	45
 10315 00c3 3700      		.word	55
 10316 00c5 BE00      		.word	190
 10317 00c7 00        		.byte	0
 10318 00c8 03        		.byte	3
 10319 00c9 03        		.byte	3
 10320 00ca 10        		.byte	16
 10321 00cb 0000      		.word	input_table_step_buffer
 10322 00cd 00        		.zero	1
 10323 00ce 01        		.byte	1
 10324 00cf 01        		.byte	1
 10325 00d0 0500      		.word	5
 10326 00d2 5000      		.word	80
 10327 00d4 6E00      		.word	110
 10328 00d6 1400      		.word	20
 10329 00d8 0000      		.word	prev
 10330 00da 0000      		.word	gs(form_table_input_button_prev_click)
 10331 00dc 01        		.byte	1
 10332 00dd 01        		.byte	1
 10333 00de 7D00      		.word	125
 10334 00e0 5000      		.word	80
 10335 00e2 6E00      		.word	110
 10336 00e4 1400      		.word	20
 10337 00e6 0000      		.word	next
 10338 00e8 0000      		.word	gs(form_table_input_button_next_click)
 10339 00ea 00        		.byte	0
 10340 00eb 01        		.byte	1
 10341 00ec 0500      		.word	5
 10342 00ee 6E00      		.word	110
 10343 00f0 0000      		.word	xeq+2
 10344 00f2 0000 0000 		.zero	6
 10344      0000 
 10346               		.local	ty
 10347               		.comm	ty,4,1
 10349               		.local	tx
 10350               		.comm	tx,4,1
 10352               		.local	tstep
 10353               		.comm	tstep,4,1
 10357               	input_table_step_buffer:
 10358 00f8 302E 3500 		.string	"0.5"
 10359 00fc 0000 0000 		.zero	12
 10359      0000 0000 
 10359      0000 0000 
 10363               	input_x_buffer:
 10364 0108 302E 3000 		.string	"0.0"
 10365 010c 0000 0000 		.zero	12
 10365      0000 0000 
 10365      0000 0000 
 10369               	plot_form_output:
 10370 0118 01        		.byte	1
 10371 0119 0000      		.word	function_plotter
 10372 011b 0000      		.word	0
 10373 011d 0000      		.word	0
 10374 011f 0000      		.word	gs(form_plot_output_key)
 10378               	plot_form_input:
 10379 0121 01        		.byte	1
 10380 0122 0000      		.word	function_plotter
 10381 0124 0000      		.word	calc_input_elements
 10382 0126 1300      		.word	19
 10383 0128 0000      		.word	gs(form_plot_input_key)
 10387               	calc_input_elements:
 10388 012a 00        		.byte	0
 10389 012b 01        		.byte	1
 10390 012c 0500      		.word	5
 10391 012e 0500      		.word	5
 10392 0130 0000      		.word	fx
 10393 0132 0000 0000 		.zero	6
 10393      0000 
 10394 0138 02        		.byte	2
 10395 0139 0500      		.word	5
 10396 013b 1400      		.word	20
 10397 013d E600      		.word	230
 10398 013f 00        		.byte	0
 10399 0140 03        		.byte	3
 10400 0141 03        		.byte	3
 10401 0142 20        		.byte	32
 10402 0143 0000      		.word	input_fx_buffer
 10403 0145 00        		.zero	1
 10404 0146 00        		.byte	0
 10405 0147 01        		.byte	1
 10406 0148 0500      		.word	5
 10407 014a 2D00      		.word	45
 10408 014c 0000      		.word	gx
 10409 014e 0000 0000 		.zero	6
 10409      0000 
 10410 0154 02        		.byte	2
 10411 0155 0500      		.word	5
 10412 0157 3C00      		.word	60
 10413 0159 E600      		.word	230
 10414 015b 00        		.byte	0
 10415 015c 03        		.byte	3
 10416 015d 03        		.byte	3
 10417 015e 20        		.byte	32
 10418 015f 0000      		.word	input_gx_buffer
 10419 0161 00        		.zero	1
 10420 0162 00        		.byte	0
 10421 0163 01        		.byte	1
 10422 0164 0500      		.word	5
 10423 0166 5500      		.word	85
 10424 0168 0000      		.word	center_x
 10425 016a 0000 0000 		.zero	6
 10425      0000 
 10426 0170 02        		.byte	2
 10427 0171 0500      		.word	5
 10428 0173 6400      		.word	100
 10429 0175 3200      		.word	50
 10430 0177 00        		.byte	0
 10431 0178 03        		.byte	3
 10432 0179 03        		.byte	3
 10433 017a 10        		.byte	16
 10434 017b 0000      		.word	input_center_x_buffer
 10435 017d 00        		.zero	1
 10436 017e 00        		.byte	0
 10437 017f 01        		.byte	1
 10438 0180 4100      		.word	65
 10439 0182 5500      		.word	85
 10440 0184 0000      		.word	center_y
 10441 0186 0000 0000 		.zero	6
 10441      0000 
 10442 018c 02        		.byte	2
 10443 018d 4100      		.word	65
 10444 018f 6400      		.word	100
 10445 0191 3200      		.word	50
 10446 0193 00        		.byte	0
 10447 0194 03        		.byte	3
 10448 0195 03        		.byte	3
 10449 0196 10        		.byte	16
 10450 0197 0000      		.word	input_center_y_buffer
 10451 0199 00        		.zero	1
 10452 019a 00        		.byte	0
 10453 019b 01        		.byte	1
 10454 019c 7D00      		.word	125
 10455 019e 5500      		.word	85
 10456 01a0 0000      		.word	scale_x
 10457 01a2 0000 0000 		.zero	6
 10457      0000 
 10458 01a8 02        		.byte	2
 10459 01a9 7D00      		.word	125
 10460 01ab 6400      		.word	100
 10461 01ad 3200      		.word	50
 10462 01af 00        		.byte	0
 10463 01b0 04        		.byte	4
 10464 01b1 04        		.byte	4
 10465 01b2 10        		.byte	16
 10466 01b3 0000      		.word	input_scale_x_buffer
 10467 01b5 00        		.zero	1
 10468 01b6 00        		.byte	0
 10469 01b7 01        		.byte	1
 10470 01b8 B900      		.word	185
 10471 01ba 5500      		.word	85
 10472 01bc 0000      		.word	scale_y
 10473 01be 0000 0000 		.zero	6
 10473      0000 
 10474 01c4 02        		.byte	2
 10475 01c5 B900      		.word	185
 10476 01c7 6400      		.word	100
 10477 01c9 3200      		.word	50
 10478 01cb 00        		.byte	0
 10479 01cc 04        		.byte	4
 10480 01cd 04        		.byte	4
 10481 01ce 10        		.byte	16
 10482 01cf 0000      		.word	input_scale_y_buffer
 10483 01d1 00        		.zero	1
 10484 01d2 00        		.byte	0
 10485 01d3 01        		.byte	1
 10486 01d4 0500      		.word	5
 10487 01d6 7D00      		.word	125
 10488 01d8 0000      		.word	grid_x
 10489 01da 0000 0000 		.zero	6
 10489      0000 
 10490 01e0 02        		.byte	2
 10491 01e1 0500      		.word	5
 10492 01e3 8C00      		.word	140
 10493 01e5 3200      		.word	50
 10494 01e7 00        		.byte	0
 10495 01e8 03        		.byte	3
 10496 01e9 03        		.byte	3
 10497 01ea 20        		.byte	32
 10498 01eb 0000      		.word	input_grid_x_buffer
 10499 01ed 00        		.zero	1
 10500 01ee 00        		.byte	0
 10501 01ef 01        		.byte	1
 10502 01f0 4100      		.word	65
 10503 01f2 7D00      		.word	125
 10504 01f4 0000      		.word	grid_y
 10505 01f6 0000 0000 		.zero	6
 10505      0000 
 10506 01fc 02        		.byte	2
 10507 01fd 4100      		.word	65
 10508 01ff 8C00      		.word	140
 10509 0201 3200      		.word	50
 10510 0203 00        		.byte	0
 10511 0204 03        		.byte	3
 10512 0205 03        		.byte	3
 10513 0206 10        		.byte	16
 10514 0207 0000      		.word	input_grid_y_buffer
 10515 0209 00        		.zero	1
 10516 020a 00        		.byte	0
 10517 020b 01        		.byte	1
 10518 020c 7D00      		.word	125
 10519 020e 7D00      		.word	125
 10520 0210 0000      		.word	step
 10521 0212 0000 0000 		.zero	6
 10521      0000 
 10522 0218 02        		.byte	2
 10523 0219 7D00      		.word	125
 10524 021b 8C00      		.word	140
 10525 021d 6E00      		.word	110
 10526 021f 00        		.byte	0
 10527 0220 05        		.byte	5
 10528 0221 05        		.byte	5
 10529 0222 10        		.byte	16
 10530 0223 0000      		.word	input_step_buffer
 10531 0225 00        		.zero	1
 10532 0226 01        		.byte	1
 10533 0227 01        		.byte	1
 10534 0228 9B00      		.word	155
 10535 022a C300      		.word	195
 10536 022c 5000      		.word	80
 10537 022e 1400      		.word	20
 10538 0230 0000      		.word	ok
 10539 0232 0000      		.word	gs(form_plot_input_button_ok_click)
 10541               		.local	pstep
 10542               		.comm	pstep,4,1
 10544               		.local	pgy
 10545               		.comm	pgy,4,1
 10547               		.local	pgx
 10548               		.comm	pgx,4,1
 10550               		.local	psy
 10551               		.comm	psy,4,1
 10553               		.local	psx
 10554               		.comm	psx,4,1
 10556               		.local	pcy
 10557               		.comm	pcy,4,1
 10559               		.local	pcx
 10560               		.comm	pcx,4,1
 10564               	input_grid_y_buffer:
 10565 0234 312E 3000 		.string	"1.0"
 10566 0238 0000 0000 		.zero	12
 10566      0000 0000 
 10566      0000 0000 
 10570               	input_grid_x_buffer:
 10571 0244 312E 3000 		.string	"1.0"
 10572 0248 0000 0000 		.zero	12
 10572      0000 0000 
 10572      0000 0000 
 10576               	input_scale_y_buffer:
 10577 0254 3230 2E30 		.string	"20.0"
 10577      00
 10578 0259 0000 0000 		.zero	11
 10578      0000 0000 
 10578      0000 00
 10582               	input_scale_x_buffer:
 10583 0264 3230 2E30 		.string	"20.0"
 10583      00
 10584 0269 0000 0000 		.zero	11
 10584      0000 0000 
 10584      0000 00
 10588               	input_center_y_buffer:
 10589 0274 302E 3000 		.string	"0.0"
 10590 0278 0000 0000 		.zero	12
 10590      0000 0000 
 10590      0000 0000 
 10594               	input_center_x_buffer:
 10595 0284 302E 3000 		.string	"0.0"
 10596 0288 0000 0000 		.zero	12
 10596      0000 0000 
 10596      0000 0000 
 10600               	input_step_buffer:
 10601 0294 302E 3030 		.string	"0.001"
 10601      3100 
 10602 029a 0000 0000 		.zero	10
 10602      0000 0000 
 10602      0000 
 10606               	input_gx_buffer:
 10607 02a4 312F 7800 		.string	"1/x"
 10608 02a8 0000 0000 		.zero	28
 10608      0000 0000 
 10608      0000 0000 
 10608      0000 0000 
 10608      0000 0000 
 10612               	input_fx_buffer:
 10613 02c4 782A 7800 		.string	"x*x"
 10614 02c8 0000 0000 		.zero	28
 10614      0000 0000 
 10614      0000 0000 
 10614      0000 0000 
 10614      0000 0000 
 10618               	form_apps:
 10619 02e4 01        		.byte	1
 10620 02e5 0000      		.word	applications
 10621 02e7 0000      		.word	apps_elements
 10622 02e9 0600      		.word	6
 10623 02eb 0000      		.word	0
 10627               	apps_elements:
 10628 02ed 01        		.byte	1
 10629 02ee 01        		.byte	1
 10630 02ef 0500      		.word	5
 10631 02f1 0500      		.word	5
 10632 02f3 E600      		.word	230
 10633 02f5 1400      		.word	20
 10634 02f7 0000      		.word	calculator
 10635 02f9 0000      		.word	gs(table_open)
 10636 02fb 01        		.byte	1
 10637 02fc 01        		.byte	1
 10638 02fd 0500      		.word	5
 10639 02ff 1E00      		.word	30
 10640 0301 E600      		.word	230
 10641 0303 1400      		.word	20
 10642 0305 0000      		.word	function_plotter
 10643 0307 0000      		.word	gs(plot_open)
 10644 0309 01        		.byte	1
 10645 030a 01        		.byte	1
 10646 030b 0500      		.word	5
 10647 030d 3700      		.word	55
 10648 030f E600      		.word	230
 10649 0311 1400      		.word	20
 10650 0313 0000      		.word	clock
 10651 0315 0000      		.word	gs(clock_open)
 10652 0317 01        		.byte	1
 10653 0318 01        		.byte	1
 10654 0319 0500      		.word	5
 10655 031b 5000      		.word	80
 10656 031d E600      		.word	230
 10657 031f 1400      		.word	20
 10658 0321 0000      		.word	request_resource
 10659 0323 0000      		.word	gs(request_open)
 10660 0325 01        		.byte	1
 10661 0326 01        		.byte	1
 10662 0327 0500      		.word	5
 10663 0329 6900      		.word	105
 10664 032b E600      		.word	230
 10665 032d 1400      		.word	20
 10666 032f 0000      		.word	send_message
 10667 0331 0000      		.word	gs(message_open)
 10668 0333 00        		.byte	0
 10669 0334 01        		.byte	1
 10670 0335 0500      		.word	5
 10671 0337 CD00      		.word	205
 10672 0339 0000      		.word	about
 10673 033b 0000 0000 		.zero	6
 10673      0000 
 10677               	any_key:
 10678 0341 01        		.byte	1
 10682               	input_message:
 10683 0342 6D73 675F 		.string	"msg_"
 10683      00
 10684 0347 0000 0000 		.zero	59
 10684      0000 0000 
 10684      0000 0000 
 10684      0000 0000 
 10684      0000 0000 
 10686               		.section	.progmem.data,"a",@progbits
 10689               	next:
 10690 0074 4E65 7874 		.string	"Next"
 10690      00
 10694               	prev:
 10695 0079 5072 6576 		.string	"Prev"
 10695      00
 10699               	xeq:
 10700 007e 5820 3D00 		.string	"X ="
 10704               	error_range:
 10705 0082 5261 6E67 		.string	"Range Error"
 10705      6520 4572 
 10705      726F 7200 
 10709               	error_nomem:
 10710 008e 4F75 7420 		.string	"Out of memory"
 10710      6F66 206D 
 10710      656D 6F72 
 10710      7900 
 10714               	error_math:
 10715 009c 4D61 7468 		.string	"Math Error"
 10715      2045 7272 
 10715      6F72 00
 10719               	error_syntax:
 10720 00a7 5379 6E74 		.string	"Syntax Error"
 10720      6178 2045 
 10720      7272 6F72 
 10720      00
 10724               	get_time_and_date:
 10725 00b4 4765 7420 		.string	"Get Time and Date"
 10725      5469 6D65 
 10725      2061 6E64 
 10725      2044 6174 
 10725      6500 
 10729               	stop_timer:
 10730 00c6 5374 6F70 		.string	"Stop Timer"
 10730      2054 696D 
 10730      6572 00
 10734               	start_timer:
 10735 00d1 5374 6172 		.string	"Start Timer"
 10735      7420 5469 
 10735      6D65 7200 
 10739               	request:
 10740 00dd 5265 7175 		.string	"Request"
 10740      6573 7400 
 10744               	clock:
 10745 00e5 436C 6F63 		.string	"Clock"
 10745      6B00 
 10749               	send:
 10750 00eb 5365 6E64 		.string	"Send"
 10750      00
 10754               	ok:
 10755 00f0 4F4B 00   		.string	"OK"
 10759               	grid_y:
 10760 00f3 4772 6964 		.string	"Grid Y:"
 10760      2059 3A00 
 10764               	grid_x:
 10765 00fb 4772 6964 		.string	"Grid X:"
 10765      2058 3A00 
 10769               	scale_y:
 10770 0103 5363 616C 		.string	"Scale Y:"
 10770      6520 593A 
 10770      00
 10774               	scale_x:
 10775 010c 5363 616C 		.string	"Scale X:"
 10775      6520 583A 
 10775      00
 10779               	center_y:
 10780 0115 4365 6E74 		.string	"Center Y:"
 10780      6572 2059 
 10780      3A00 
 10784               	center_x:
 10785 011f 4365 6E74 		.string	"Center X:"
 10785      6572 2058 
 10785      3A00 
 10789               	step:
 10790 0129 5374 6570 		.string	"Step:"
 10790      3A00 
 10794               	gx:
 10795 012f 6728 7829 		.string	"g(x) ="
 10795      203D 00
 10799               	fx:
 10800 0136 6628 7829 		.string	"f(x) ="
 10800      203D 00
 10804               	about:
 10805 013d 2843 2920 		.string	"(C) Anton Tchekov"
 10805      416E 746F 
 10805      6E20 5463 
 10805      6865 6B6F 
 10805      7600 
 10809               	send_message:
 10810 014f 5365 6E64 		.string	"Send Message"
 10810      204D 6573 
 10810      7361 6765 
 10810      00
 10814               	request_resource:
 10815 015c 5265 7175 		.string	"Request Resource"
 10815      6573 7420 
 10815      5265 736F 
 10815      7572 6365 
 10815      00
 10819               	calculator:
 10820 016d 4361 6C63 		.string	"Calculator"
 10820      756C 6174 
 10820      6F72 00
 10824               	function_plotter:
 10825 0178 4675 6E63 		.string	"Function Plotter"
 10825      7469 6F6E 
 10825      2050 6C6F 
 10825      7474 6572 
 10825      00
 10829               	applications:
 10830 0189 4170 706C 		.string	"Applications"
 10830      6963 6174 
 10830      696F 6E73 
 10830      00
 10834               	keys:
 10835 0196 00        		.byte	0
 10836 0197 01        		.byte	1
 10837 0198 10        		.byte	16
 10838 0199 FF        		.byte	-1
 10839 019a 01        		.byte	1
 10840 019b FF        		.byte	-1
 10841 019c 0E        		.byte	14
 10842 019d 60        		.byte	96
 10843 019e 7E        		.byte	126
 10844 019f 11        		.byte	17
 10845 01a0 01        		.byte	1
 10846 01a1 0F        		.byte	15
 10847 01a2 00        		.byte	0
 10848 01a3 02        		.byte	2
 10849 01a4 FF        		.byte	-1
 10850 01a5 0F        		.byte	15
 10851 01a6 31        		.byte	49
 10852 01a7 21        		.byte	33
 10853 01a8 21        		.byte	33
 10854 01a9 01        		.byte	1
 10855 01aa 0F        		.byte	15
 10856 01ab 01        		.byte	1
 10857 01ac 03        		.byte	3
 10858 01ad FF        		.byte	-1
 10859 01ae 10        		.byte	16
 10860 01af 32        		.byte	50
 10861 01b0 40        		.byte	64
 10862 01b1 31        		.byte	49
 10863 01b2 01        		.byte	1
 10864 01b3 0F        		.byte	15
 10865 01b4 02        		.byte	2
 10866 01b5 04        		.byte	4
 10867 01b6 FF        		.byte	-1
 10868 01b7 11        		.byte	17
 10869 01b8 33        		.byte	51
 10870 01b9 23        		.byte	35
 10871 01ba 41        		.byte	65
 10872 01bb 01        		.byte	1
 10873 01bc 0F        		.byte	15
 10874 01bd 03        		.byte	3
 10875 01be 05        		.byte	5
 10876 01bf FF        		.byte	-1
 10877 01c0 12        		.byte	18
 10878 01c1 34        		.byte	52
 10879 01c2 24        		.byte	36
 10880 01c3 51        		.byte	81
 10881 01c4 01        		.byte	1
 10882 01c5 0F        		.byte	15
 10883 01c6 04        		.byte	4
 10884 01c7 06        		.byte	6
 10885 01c8 FF        		.byte	-1
 10886 01c9 13        		.byte	19
 10887 01ca 35        		.byte	53
 10888 01cb 25        		.byte	37
 10889 01cc 61        		.byte	97
 10890 01cd 01        		.byte	1
 10891 01ce 0F        		.byte	15
 10892 01cf 05        		.byte	5
 10893 01d0 07        		.byte	7
 10894 01d1 FF        		.byte	-1
 10895 01d2 14        		.byte	20
 10896 01d3 36        		.byte	54
 10897 01d4 5E        		.byte	94
 10898 01d5 71        		.byte	113
 10899 01d6 01        		.byte	1
 10900 01d7 0F        		.byte	15
 10901 01d8 06        		.byte	6
 10902 01d9 08        		.byte	8
 10903 01da FF        		.byte	-1
 10904 01db 15        		.byte	21
 10905 01dc 37        		.byte	55
 10906 01dd 26        		.byte	38
 10907 01de 81        		.byte	-127
 10908 01df 01        		.byte	1
 10909 01e0 0F        		.byte	15
 10910 01e1 07        		.byte	7
 10911 01e2 09        		.byte	9
 10912 01e3 FF        		.byte	-1
 10913 01e4 16        		.byte	22
 10914 01e5 38        		.byte	56
 10915 01e6 2A        		.byte	42
 10916 01e7 91        		.byte	-111
 10917 01e8 01        		.byte	1
 10918 01e9 0F        		.byte	15
 10919 01ea 08        		.byte	8
 10920 01eb 0A        		.byte	10
 10921 01ec FF        		.byte	-1
 10922 01ed 17        		.byte	23
 10923 01ee 39        		.byte	57
 10924 01ef 28        		.byte	40
 10925 01f0 A1        		.byte	-95
 10926 01f1 01        		.byte	1
 10927 01f2 0F        		.byte	15
 10928 01f3 09        		.byte	9
 10929 01f4 0B        		.byte	11
 10930 01f5 FF        		.byte	-1
 10931 01f6 18        		.byte	24
 10932 01f7 30        		.byte	48
 10933 01f8 29        		.byte	41
 10934 01f9 B1        		.byte	-79
 10935 01fa 01        		.byte	1
 10936 01fb 0F        		.byte	15
 10937 01fc 0A        		.byte	10
 10938 01fd 0C        		.byte	12
 10939 01fe FF        		.byte	-1
 10940 01ff 19        		.byte	25
 10941 0200 2D        		.byte	45
 10942 0201 5F        		.byte	95
 10943 0202 C1        		.byte	-63
 10944 0203 01        		.byte	1
 10945 0204 0F        		.byte	15
 10946 0205 0B        		.byte	11
 10947 0206 0D        		.byte	13
 10948 0207 FF        		.byte	-1
 10949 0208 1A        		.byte	26
 10950 0209 2B        		.byte	43
 10951 020a 3D        		.byte	61
 10952 020b D1        		.byte	-47
 10953 020c 01        		.byte	1
 10954 020d 1F        		.byte	31
 10955 020e 0C        		.byte	12
 10956 020f FF        		.byte	-1
 10957 0210 FF        		.byte	-1
 10958 0211 1B        		.byte	27
 10959 0212 08        		.byte	8
 10960 0213 08        		.byte	8
 10961 0214 00        		.byte	0
 10962 0215 11        		.byte	17
 10963 0216 18        		.byte	24
 10964 0217 FF        		.byte	-1
 10965 0218 0F        		.byte	15
 10966 0219 00        		.byte	0
 10967 021a FF        		.byte	-1
 10968 021b 09        		.byte	9
 10969 021c 09        		.byte	9
 10970 021d 19        		.byte	25
 10971 021e 11        		.byte	17
 10972 021f 0F        		.byte	15
 10973 0220 0E        		.byte	14
 10974 0221 10        		.byte	16
 10975 0222 01        		.byte	1
 10976 0223 1C        		.byte	28
 10977 0224 71        		.byte	113
 10978 0225 51        		.byte	81
 10979 0226 29        		.byte	41
 10980 0227 11        		.byte	17
 10981 0228 0F        		.byte	15
 10982 0229 0F        		.byte	15
 10983 022a 11        		.byte	17
 10984 022b 02        		.byte	2
 10985 022c 1D        		.byte	29
 10986 022d 77        		.byte	119
 10987 022e 57        		.byte	87
 10988 022f 39        		.byte	57
 10989 0230 11        		.byte	17
 10990 0231 0F        		.byte	15
 10991 0232 10        		.byte	16
 10992 0233 12        		.byte	18
 10993 0234 03        		.byte	3
 10994 0235 1E        		.byte	30
 10995 0236 65        		.byte	101
 10996 0237 45        		.byte	69
 10997 0238 49        		.byte	73
 10998 0239 11        		.byte	17
 10999 023a 0F        		.byte	15
 11000 023b 11        		.byte	17
 11001 023c 13        		.byte	19
 11002 023d 04        		.byte	4
 11003 023e 1F        		.byte	31
 11004 023f 72        		.byte	114
 11005 0240 52        		.byte	82
 11006 0241 59        		.byte	89
 11007 0242 11        		.byte	17
 11008 0243 0F        		.byte	15
 11009 0244 12        		.byte	18
 11010 0245 14        		.byte	20
 11011 0246 05        		.byte	5
 11012 0247 20        		.byte	32
 11013 0248 74        		.byte	116
 11014 0249 54        		.byte	84
 11015 024a 69        		.byte	105
 11016 024b 11        		.byte	17
 11017 024c 0F        		.byte	15
 11018 024d 13        		.byte	19
 11019 024e 15        		.byte	21
 11020 024f 06        		.byte	6
 11021 0250 21        		.byte	33
 11022 0251 79        		.byte	121
 11023 0252 59        		.byte	89
 11024 0253 79        		.byte	121
 11025 0254 11        		.byte	17
 11026 0255 0F        		.byte	15
 11027 0256 14        		.byte	20
 11028 0257 16        		.byte	22
 11029 0258 07        		.byte	7
 11030 0259 22        		.byte	34
 11031 025a 75        		.byte	117
 11032 025b 55        		.byte	85
 11033 025c 89        		.byte	-119
 11034 025d 11        		.byte	17
 11035 025e 0F        		.byte	15
 11036 025f 15        		.byte	21
 11037 0260 17        		.byte	23
 11038 0261 08        		.byte	8
 11039 0262 23        		.byte	35
 11040 0263 69        		.byte	105
 11041 0264 49        		.byte	73
 11042 0265 99        		.byte	-103
 11043 0266 11        		.byte	17
 11044 0267 0F        		.byte	15
 11045 0268 16        		.byte	22
 11046 0269 18        		.byte	24
 11047 026a 09        		.byte	9
 11048 026b 24        		.byte	36
 11049 026c 6F        		.byte	111
 11050 026d 4F        		.byte	79
 11051 026e A9        		.byte	-87
 11052 026f 11        		.byte	17
 11053 0270 0F        		.byte	15
 11054 0271 17        		.byte	23
 11055 0272 19        		.byte	25
 11056 0273 0A        		.byte	10
 11057 0274 25        		.byte	37
 11058 0275 70        		.byte	112
 11059 0276 50        		.byte	80
 11060 0277 B9        		.byte	-71
 11061 0278 11        		.byte	17
 11062 0279 0F        		.byte	15
 11063 027a 18        		.byte	24
 11064 027b 1A        		.byte	26
 11065 027c 0B        		.byte	11
 11066 027d 26        		.byte	38
 11067 027e 7B        		.byte	123
 11068 027f 5B        		.byte	91
 11069 0280 C9        		.byte	-55
 11070 0281 11        		.byte	17
 11071 0282 0F        		.byte	15
 11072 0283 19        		.byte	25
 11073 0284 1B        		.byte	27
 11074 0285 0C        		.byte	12
 11075 0286 27        		.byte	39
 11076 0287 7D        		.byte	125
 11077 0288 5D        		.byte	93
 11078 0289 D9        		.byte	-39
 11079 028a 11        		.byte	17
 11080 028b 17        		.byte	23
 11081 028c 1A        		.byte	26
 11082 028d FF        		.byte	-1
 11083 028e 0D        		.byte	13
 11084 028f 27        		.byte	39
 11085 0290 7C        		.byte	124
 11086 0291 5C        		.byte	92
 11087 0292 1D        		.byte	29
 11088 0293 21        		.byte	33
 11089 0294 0F        		.byte	15
 11090 0295 FF        		.byte	-1
 11091 0296 1D        		.byte	29
 11092 0297 0F        		.byte	15
 11093 0298 28        		.byte	40
 11094 0299 61        		.byte	97
 11095 029a 41        		.byte	65
 11096 029b 2D        		.byte	45
 11097 029c 21        		.byte	33
 11098 029d 0F        		.byte	15
 11099 029e 1C        		.byte	28
 11100 029f 1E        		.byte	30
 11101 02a0 10        		.byte	16
 11102 02a1 29        		.byte	41
 11103 02a2 73        		.byte	115
 11104 02a3 53        		.byte	83
 11105 02a4 3D        		.byte	61
 11106 02a5 21        		.byte	33
 11107 02a6 0F        		.byte	15
 11108 02a7 1D        		.byte	29
 11109 02a8 1F        		.byte	31
 11110 02a9 11        		.byte	17
 11111 02aa 2A        		.byte	42
 11112 02ab 64        		.byte	100
 11113 02ac 44        		.byte	68
 11114 02ad 4D        		.byte	77
 11115 02ae 21        		.byte	33
 11116 02af 0F        		.byte	15
 11117 02b0 1E        		.byte	30
 11118 02b1 20        		.byte	32
 11119 02b2 12        		.byte	18
 11120 02b3 2B        		.byte	43
 11121 02b4 66        		.byte	102
 11122 02b5 46        		.byte	70
 11123 02b6 5D        		.byte	93
 11124 02b7 21        		.byte	33
 11125 02b8 0F        		.byte	15
 11126 02b9 1F        		.byte	31
 11127 02ba 21        		.byte	33
 11128 02bb 13        		.byte	19
 11129 02bc 2C        		.byte	44
 11130 02bd 67        		.byte	103
 11131 02be 47        		.byte	71
 11132 02bf 6D        		.byte	109
 11133 02c0 21        		.byte	33
 11134 02c1 0F        		.byte	15
 11135 02c2 20        		.byte	32
 11136 02c3 22        		.byte	34
 11137 02c4 14        		.byte	20
 11138 02c5 2D        		.byte	45
 11139 02c6 68        		.byte	104
 11140 02c7 48        		.byte	72
 11141 02c8 7D        		.byte	125
 11142 02c9 21        		.byte	33
 11143 02ca 0F        		.byte	15
 11144 02cb 21        		.byte	33
 11145 02cc 23        		.byte	35
 11146 02cd 15        		.byte	21
 11147 02ce 2E        		.byte	46
 11148 02cf 6A        		.byte	106
 11149 02d0 4A        		.byte	74
 11150 02d1 8D        		.byte	-115
 11151 02d2 21        		.byte	33
 11152 02d3 0F        		.byte	15
 11153 02d4 22        		.byte	34
 11154 02d5 24        		.byte	36
 11155 02d6 16        		.byte	22
 11156 02d7 2F        		.byte	47
 11157 02d8 6B        		.byte	107
 11158 02d9 4B        		.byte	75
 11159 02da 9D        		.byte	-99
 11160 02db 21        		.byte	33
 11161 02dc 0F        		.byte	15
 11162 02dd 23        		.byte	35
 11163 02de 25        		.byte	37
 11164 02df 17        		.byte	23
 11165 02e0 30        		.byte	48
 11166 02e1 6C        		.byte	108
 11167 02e2 4C        		.byte	76
 11168 02e3 AD        		.byte	-83
 11169 02e4 21        		.byte	33
 11170 02e5 0F        		.byte	15
 11171 02e6 24        		.byte	36
 11172 02e7 26        		.byte	38
 11173 02e8 18        		.byte	24
 11174 02e9 31        		.byte	49
 11175 02ea 3A        		.byte	58
 11176 02eb 3B        		.byte	59
 11177 02ec BD        		.byte	-67
 11178 02ed 21        		.byte	33
 11179 02ee 0F        		.byte	15
 11180 02ef 25        		.byte	37
 11181 02f0 27        		.byte	39
 11182 02f1 19        		.byte	25
 11183 02f2 31        		.byte	49
 11184 02f3 22        		.byte	34
 11185 02f4 27        		.byte	39
 11186 02f5 CD        		.byte	-51
 11187 02f6 21        		.byte	33
 11188 02f7 23        		.byte	35
 11189 02f8 26        		.byte	38
 11190 02f9 FF        		.byte	-1
 11191 02fa 1A        		.byte	26
 11192 02fb 31        		.byte	49
 11193 02fc 0A        		.byte	10
 11194 02fd 0A        		.byte	10
 11195 02fe 21        		.byte	33
 11196 02ff 31        		.byte	49
 11197 0300 0F        		.byte	15
 11198 0301 FF        		.byte	-1
 11199 0302 29        		.byte	41
 11200 0303 1C        		.byte	28
 11201 0304 32        		.byte	50
 11202 0305 7A        		.byte	122
 11203 0306 5A        		.byte	90
 11204 0307 31        		.byte	49
 11205 0308 31        		.byte	49
 11206 0309 0F        		.byte	15
 11207 030a 28        		.byte	40
 11208 030b 2A        		.byte	42
 11209 030c 1D        		.byte	29
 11210 030d 32        		.byte	50
 11211 030e 78        		.byte	120
 11212 030f 58        		.byte	88
 11213 0310 41        		.byte	65
 11214 0311 31        		.byte	49
 11215 0312 0F        		.byte	15
 11216 0313 29        		.byte	41
 11217 0314 2B        		.byte	43
 11218 0315 1E        		.byte	30
 11219 0316 32        		.byte	50
 11220 0317 63        		.byte	99
 11221 0318 43        		.byte	67
 11222 0319 51        		.byte	81
 11223 031a 31        		.byte	49
 11224 031b 0F        		.byte	15
 11225 031c 2A        		.byte	42
 11226 031d 2C        		.byte	44
 11227 031e 1F        		.byte	31
 11228 031f 32        		.byte	50
 11229 0320 76        		.byte	118
 11230 0321 56        		.byte	86
 11231 0322 61        		.byte	97
 11232 0323 31        		.byte	49
 11233 0324 0F        		.byte	15
 11234 0325 2B        		.byte	43
 11235 0326 2D        		.byte	45
 11236 0327 20        		.byte	32
 11237 0328 32        		.byte	50
 11238 0329 62        		.byte	98
 11239 032a 42        		.byte	66
 11240 032b 71        		.byte	113
 11241 032c 31        		.byte	49
 11242 032d 0F        		.byte	15
 11243 032e 2C        		.byte	44
 11244 032f 2E        		.byte	46
 11245 0330 21        		.byte	33
 11246 0331 32        		.byte	50
 11247 0332 6E        		.byte	110
 11248 0333 4E        		.byte	78
 11249 0334 81        		.byte	-127
 11250 0335 31        		.byte	49
 11251 0336 0F        		.byte	15
 11252 0337 2D        		.byte	45
 11253 0338 2F        		.byte	47
 11254 0339 22        		.byte	34
 11255 033a 32        		.byte	50
 11256 033b 6D        		.byte	109
 11257 033c 4D        		.byte	77
 11258 033d 91        		.byte	-111
 11259 033e 31        		.byte	49
 11260 033f 0F        		.byte	15
 11261 0340 2E        		.byte	46
 11262 0341 30        		.byte	48
 11263 0342 23        		.byte	35
 11264 0343 32        		.byte	50
 11265 0344 3C        		.byte	60
 11266 0345 2C        		.byte	44
 11267 0346 A1        		.byte	-95
 11268 0347 31        		.byte	49
 11269 0348 0F        		.byte	15
 11270 0349 2F        		.byte	47
 11271 034a 31        		.byte	49
 11272 034b 24        		.byte	36
 11273 034c 32        		.byte	50
 11274 034d 3E        		.byte	62
 11275 034e 2E        		.byte	46
 11276 034f B1        		.byte	-79
 11277 0350 31        		.byte	49
 11278 0351 0F        		.byte	15
 11279 0352 30        		.byte	48
 11280 0353 FF        		.byte	-1
 11281 0354 25        		.byte	37
 11282 0355 32        		.byte	50
 11283 0356 3F        		.byte	63
 11284 0357 2F        		.byte	47
 11285 0358 41        		.byte	65
 11286 0359 41        		.byte	65
 11287 035a 5F        		.byte	95
 11288 035b FF        		.byte	-1
 11289 035c FF        		.byte	-1
 11290 035d 2C        		.byte	44
 11291 035e FF        		.byte	-1
 11292 035f 20        		.byte	32
 11293 0360 20        		.byte	32
 11297               		.data
 11300               	kbd_mode:
 11301 0382 02        		.byte	2
 11303               		.local	cur_key
 11304               		.comm	cur_key,1,1
 11306               		.local	_ip
 11307               		.comm	_ip,32,1
 11309               		.local	_response
 11310               		.comm	_response,1024,1
 11312               		.local	connected
 11313               		.comm	connected,1,1
 11315               		.local	current_element
 11316               		.comm	current_element,1,1
 11318               		.local	current_form
 11319               		.comm	current_form,2,1
 11321               		.local	tok_num_list
 11322               		.comm	tok_num_list,128,1
 11324               		.local	tok_type_list
 11325               		.comm	tok_type_list,32,1
 11327               		.local	num_stack
 11328               		.comm	num_stack,128,1
 11330               		.local	op_stack
 11331               		.comm	op_stack,32,1
 11333               		.local	tok_cnt
 11334               		.comm	tok_cnt,1,1
 11336               		.local	_color
 11337               		.comm	_color,2,1
 11339               	.global	font_default_chars
 11340               		.section	.progmem.data,"a",@progbits
 11343               	font_default_chars:
 11344 0361 00        		.string	""
 11345 0362 00        		.string	""
 11346 0363 00        		.string	""
 11347 0364 00        		.string	""
 11348 0365 00        		.string	""
 11349 0366 00        		.string	""
 11350 0367 00        		.string	""
 11351 0368 00        		.string	""
 11352 0369 00        		.string	""
 11353 036a 00        		.string	""
 11354 036b 00        		.string	""
 11355 036c 00        		.string	""
 11356 036d 00        		.string	""
 11357 036e 0101 0101 		.string	"\001\001\001\001\001"
 11357      0100 
 11358 0374 0100      		.string	"\001"
 11359 0376 00        		.string	""
 11360 0377 00        		.string	""
 11361 0378 0505 0500 		.string	"\005\005\005"
 11362 037c 00        		.string	""
 11363 037d 00        		.string	""
 11364 037e 00        		.string	""
 11365 037f 00        		.string	""
 11366 0380 00        		.string	""
 11367 0381 00        		.string	""
 11368 0382 00        		.string	""
 11369 0383 00        		.string	""
 11370 0384 2828 7E14 		.string	"((~\024?\n\n"
 11370      3F0A 0A00 
 11371 038c 00        		.string	""
 11372 038d 00        		.string	""
 11373 038e 041E 0505 		.string	"\004\036\005\005\016\024\024\017\004"
 11373      0E14 140F 
 11373      0400 
 11374 0398 00        		.string	""
 11375 0399 00        		.string	""
 11376 039a 2225 152A 		.string	"\"%\025*TR\""
 11376      5452 2200 
 11377 03a2 00        		.string	""
 11378 03a3 00        		.string	""
 11379 03a4 00        		.string	""
 11380 03a5 0C12 0A04 		.string	"\f\022\n\004*\021."
 11380      2A11 2E00 
 11381 03ad 00        		.string	""
 11382 03ae 00        		.string	""
 11383 03af 0101 0100 		.string	"\001\001\001"
 11384 03b3 00        		.string	""
 11385 03b4 00        		.string	""
 11386 03b5 00        		.string	""
 11387 03b6 00        		.string	""
 11388 03b7 00        		.string	""
 11389 03b8 00        		.string	""
 11390 03b9 00        		.string	""
 11391 03ba 0402 0201 		.string	"\004\002\002\001\001\001\002\002\004"
 11391      0101 0202 
 11391      0400 
 11392 03c4 00        		.string	""
 11393 03c5 0102 0204 		.string	"\001\002\002\004\004\004\002\002\001"
 11393      0404 0202 
 11393      0100 
 11394 03cf 00        		.string	""
 11395 03d0 0A04 1B04 		.string	"\n\004\033\004\n"
 11395      0A00 
 11396 03d6 00        		.string	""
 11397 03d7 00        		.string	""
 11398 03d8 00        		.string	""
 11399 03d9 00        		.string	""
 11400 03da 00        		.string	""
 11401 03db 00        		.string	""
 11402 03dc 00        		.string	""
 11403 03dd 0404 1F04 		.string	"\004\004\037\004\004"
 11403      0400 
 11404 03e3 00        		.string	""
 11405 03e4 00        		.string	""
 11406 03e5 00        		.string	""
 11407 03e6 00        		.string	""
 11408 03e7 00        		.string	""
 11409 03e8 00        		.string	""
 11410 03e9 00        		.string	""
 11411 03ea 00        		.string	""
 11412 03eb 00        		.string	""
 11413 03ec 00        		.string	""
 11414 03ed 0201 00   		.string	"\002\001"
 11415 03f0 00        		.string	""
 11416 03f1 00        		.string	""
 11417 03f2 00        		.string	""
 11418 03f3 00        		.string	""
 11419 03f4 00        		.string	""
 11420 03f5 0700      		.string	"\007"
 11421 03f7 00        		.string	""
 11422 03f8 00        		.string	""
 11423 03f9 00        		.string	""
 11424 03fa 00        		.string	""
 11425 03fb 00        		.string	""
 11426 03fc 00        		.string	""
 11427 03fd 00        		.string	""
 11428 03fe 00        		.string	""
 11429 03ff 00        		.string	""
 11430 0400 00        		.string	""
 11431 0401 00        		.string	""
 11432 0402 00        		.string	""
 11433 0403 0100      		.string	"\001"
 11434 0405 00        		.string	""
 11435 0406 00        		.string	""
 11436 0407 00        		.string	""
 11437 0408 0808 0402 		.string	"\b\b\004\002\002\001\001"
 11437      0201 0100 
 11438 0410 00        		.string	""
 11439 0411 00        		.string	""
 11440 0412 00        		.string	""
 11441 0413 0609 0909 		.string	"\006\t\t\t\t\t\006"
 11441      0909 0600 
 11442 041b 00        		.string	""
 11443 041c 00        		.string	""
 11444 041d 00        		.string	""
 11445 041e 0203 0202 		.string	"\002\003\002\002\002\002\002"
 11445      0202 0200 
 11446 0426 00        		.string	""
 11447 0427 00        		.string	""
 11448 0428 00        		.string	""
 11449 0429 0609 0804 		.string	"\006\t\b\004\002\001\017"
 11449      0201 0F00 
 11450 0431 00        		.string	""
 11451 0432 00        		.string	""
 11452 0433 00        		.string	""
 11453 0434 0609 0804 		.string	"\006\t\b\004\b\t\006"
 11453      0809 0600 
 11454 043c 00        		.string	""
 11455 043d 00        		.string	""
 11456 043e 00        		.string	""
 11457 043f 080C 0A09 		.string	"\b\f\n\t\017\b\b"
 11457      0F08 0800 
 11458 0447 00        		.string	""
 11459 0448 00        		.string	""
 11460 0449 00        		.string	""
 11461 044a 0F01 0107 		.string	"\017\001\001\007\b\b\007"
 11461      0808 0700 
 11462 0452 00        		.string	""
 11463 0453 00        		.string	""
 11464 0454 00        		.string	""
 11465 0455 0402 0107 		.string	"\004\002\001\007\t\t\006"
 11465      0909 0600 
 11466 045d 00        		.string	""
 11467 045e 00        		.string	""
 11468 045f 00        		.string	""
 11469 0460 0F08 0404 		.string	"\017\b\004\004\002\002\002"
 11469      0202 0200 
 11470 0468 00        		.string	""
 11471 0469 00        		.string	""
 11472 046a 00        		.string	""
 11473 046b 0609 0906 		.string	"\006\t\t\006\t\t\006"
 11473      0909 0600 
 11474 0473 00        		.string	""
 11475 0474 00        		.string	""
 11476 0475 00        		.string	""
 11477 0476 0609 090E 		.string	"\006\t\t\016\b\004\002"
 11477      0804 0200 
 11478 047e 00        		.string	""
 11479 047f 00        		.string	""
 11480 0480 00        		.string	""
 11481 0481 00        		.string	""
 11482 0482 00        		.string	""
 11483 0483 0100      		.string	"\001"
 11484 0485 00        		.string	""
 11485 0486 00        		.string	""
 11486 0487 0100      		.string	"\001"
 11487 0489 00        		.string	""
 11488 048a 00        		.string	""
 11489 048b 00        		.string	""
 11490 048c 00        		.string	""
 11491 048d 00        		.string	""
 11492 048e 0200      		.string	"\002"
 11493 0490 00        		.string	""
 11494 0491 00        		.string	""
 11495 0492 0201 00   		.string	"\002\001"
 11496 0495 00        		.string	""
 11497 0496 00        		.string	""
 11498 0497 00        		.string	""
 11499 0498 100C 030C 		.string	"\020\f\003\f\020"
 11499      1000 
 11500 049e 00        		.string	""
 11501 049f 00        		.string	""
 11502 04a0 00        		.string	""
 11503 04a1 00        		.string	""
 11504 04a2 00        		.string	""
 11505 04a3 00        		.string	""
 11506 04a4 1F00      		.string	"\037"
 11507 04a6 1F00      		.string	"\037"
 11508 04a8 00        		.string	""
 11509 04a9 00        		.string	""
 11510 04aa 00        		.string	""
 11511 04ab 00        		.string	""
 11512 04ac 00        		.string	""
 11513 04ad 00        		.string	""
 11514 04ae 0106 1806 		.string	"\001\006\030\006\001"
 11514      0100 
 11515 04b4 00        		.string	""
 11516 04b5 00        		.string	""
 11517 04b6 00        		.string	""
 11518 04b7 00        		.string	""
 11519 04b8 0708 0402 		.string	"\007\b\004\002\002"
 11519      0200 
 11520 04be 0200      		.string	"\002"
 11521 04c0 00        		.string	""
 11522 04c1 00        		.string	""
 11523 04c2 00        		.string	""
 11524 04c3 00        		.string	""
 11525 04c4 1C22 5955 		.string	"\034\"YU)\002\034"
 11525      2902 1C00 
 11526 04cc 00        		.string	""
 11527 04cd 00        		.string	""
 11528 04ce 0609 090F 		.string	"\006\t\t\017\t\t\t"
 11528      0909 0900 
 11529 04d6 00        		.string	""
 11530 04d7 00        		.string	""
 11531 04d8 00        		.string	""
 11532 04d9 0709 0907 		.string	"\007\t\t\007\t\t\007"
 11532      0909 0700 
 11533 04e1 00        		.string	""
 11534 04e2 00        		.string	""
 11535 04e3 00        		.string	""
 11536 04e4 0C02 0101 		.string	"\f\002\001\001\001\002\f"
 11536      0102 0C00 
 11537 04ec 00        		.string	""
 11538 04ed 00        		.string	""
 11539 04ee 00        		.string	""
 11540 04ef 0709 1111 		.string	"\007\t\021\021\021\t\007"
 11540      1109 0700 
 11541 04f7 00        		.string	""
 11542 04f8 00        		.string	""
 11543 04f9 00        		.string	""
 11544 04fa 0701 0107 		.string	"\007\001\001\007\001\001\007"
 11544      0101 0700 
 11545 0502 00        		.string	""
 11546 0503 00        		.string	""
 11547 0504 00        		.string	""
 11548 0505 0701 0107 		.string	"\007\001\001\007\001\001\001"
 11548      0101 0100 
 11549 050d 00        		.string	""
 11550 050e 00        		.string	""
 11551 050f 00        		.string	""
 11552 0510 1C02 0119 		.string	"\034\002\001\031\021\022\034"
 11552      1112 1C00 
 11553 0518 00        		.string	""
 11554 0519 00        		.string	""
 11555 051a 00        		.string	""
 11556 051b 1111 111F 		.string	"\021\021\021\037\021\021\021"
 11556      1111 1100 
 11557 0523 00        		.string	""
 11558 0524 00        		.string	""
 11559 0525 00        		.string	""
 11560 0526 0101 0101 		.string	"\001\001\001\001\001\001\001"
 11560      0101 0100 
 11561 052e 00        		.string	""
 11562 052f 00        		.string	""
 11563 0530 00        		.string	""
 11564 0531 0404 0404 		.string	"\004\004\004\004\004\004\003"
 11564      0404 0300 
 11565 0539 00        		.string	""
 11566 053a 00        		.string	""
 11567 053b 00        		.string	""
 11568 053c 1109 0503 		.string	"\021\t\005\003\005\t\021"
 11568      0509 1100 
 11569 0544 00        		.string	""
 11570 0545 00        		.string	""
 11571 0546 00        		.string	""
 11572 0547 0101 0101 		.string	"\001\001\001\001\001\001\017"
 11572      0101 0F00 
 11573 054f 00        		.string	""
 11574 0550 00        		.string	""
 11575 0551 00        		.string	""
 11576 0552 6363 5555 		.string	"ccUUUII"
 11576      5549 4900 
 11577 055a 00        		.string	""
 11578 055b 00        		.string	""
 11579 055c 00        		.string	""
 11580 055d 1113 1515 		.string	"\021\023\025\025\031\021\021"
 11580      1911 1100 
 11581 0565 00        		.string	""
 11582 0566 00        		.string	""
 11583 0567 00        		.string	""
 11584 0568 0C12 2121 		.string	"\f\022!!!\022\f"
 11584      2112 0C00 
 11585 0570 00        		.string	""
 11586 0571 00        		.string	""
 11587 0572 00        		.string	""
 11588 0573 0709 0907 		.string	"\007\t\t\007\001\001\001"
 11588      0101 0100 
 11589 057b 00        		.string	""
 11590 057c 00        		.string	""
 11591 057d 00        		.string	""
 11592 057e 0C12 2121 		.string	"\f\022!!!\022\f0"
 11592      2112 0C30 
 11592      00
 11593 0587 00        		.string	""
 11594 0588 00        		.string	""
 11595 0589 0709 0907 		.string	"\007\t\t\007\005\t\t"
 11595      0509 0900 
 11596 0591 00        		.string	""
 11597 0592 00        		.string	""
 11598 0593 00        		.string	""
 11599 0594 0E01 0106 		.string	"\016\001\001\006\b\b\007"
 11599      0808 0700 
 11600 059c 00        		.string	""
 11601 059d 00        		.string	""
 11602 059e 00        		.string	""
 11603 059f 1F04 0404 		.string	"\037\004\004\004\004\004\004"
 11603      0404 0400 
 11604 05a7 00        		.string	""
 11605 05a8 00        		.string	""
 11606 05a9 00        		.string	""
 11607 05aa 1111 1111 		.string	"\021\021\021\021\021\021\016"
 11607      1111 0E00 
 11608 05b2 00        		.string	""
 11609 05b3 00        		.string	""
 11610 05b4 00        		.string	""
 11611 05b5 1111 110A 		.string	"\021\021\021\n\n\004\004"
 11611      0A04 0400 
 11612 05bd 00        		.string	""
 11613 05be 00        		.string	""
 11614 05bf 00        		.string	""
 11615 05c0 4949 5555 		.string	"IIUU\"\"\""
 11615      2222 2200 
 11616 05c8 00        		.string	""
 11617 05c9 00        		.string	""
 11618 05ca 00        		.string	""
 11619 05cb 1111 0A04 		.string	"\021\021\n\004\n\021\021"
 11619      0A11 1100 
 11620 05d3 00        		.string	""
 11621 05d4 00        		.string	""
 11622 05d5 00        		.string	""
 11623 05d6 1111 0A04 		.string	"\021\021\n\004\004\004\004"
 11623      0404 0400 
 11624 05de 00        		.string	""
 11625 05df 00        		.string	""
 11626 05e0 00        		.string	""
 11627 05e1 1F10 0804 		.string	"\037\020\b\004\002\001\037"
 11627      0201 1F00 
 11628 05e9 00        		.string	""
 11629 05ea 00        		.string	""
 11630 05eb 0301 0101 		.string	"\003\001\001\001\001\001\001\001\003"
 11630      0101 0101 
 11630      0300 
 11631 05f5 00        		.string	""
 11632 05f6 00        		.string	""
 11633 05f7 0101 0204 		.string	"\001\001\002\004\004\b\b"
 11633      0408 0800 
 11634 05ff 00        		.string	""
 11635 0600 00        		.string	""
 11636 0601 0302 0202 		.string	"\003\002\002\002\002\002\002\002\003"
 11636      0202 0202 
 11636      0300 
 11637 060b 00        		.string	""
 11638 060c 00        		.string	""
 11639 060d 0404 0A0A 		.string	"\004\004\n\n\021"
 11639      1100 
 11640 0613 00        		.string	""
 11641 0614 00        		.string	""
 11642 0615 00        		.string	""
 11643 0616 00        		.string	""
 11644 0617 00        		.string	""
 11645 0618 00        		.string	""
 11646 0619 00        		.string	""
 11647 061a 00        		.string	""
 11648 061b 00        		.string	""
 11649 061c 00        		.string	""
 11650 061d 00        		.string	""
 11651 061e 00        		.string	""
 11652 061f 0F00      		.string	"\017"
 11653 0621 00        		.string	""
 11654 0622 0102 00   		.string	"\001\002"
 11655 0625 00        		.string	""
 11656 0626 00        		.string	""
 11657 0627 00        		.string	""
 11658 0628 00        		.string	""
 11659 0629 00        		.string	""
 11660 062a 00        		.string	""
 11661 062b 00        		.string	""
 11662 062c 00        		.string	""
 11663 062d 00        		.string	""
 11664 062e 00        		.string	""
 11665 062f 00        		.string	""
 11666 0630 0E09 0909 		.string	"\016\t\t\t\016"
 11666      0E00 
 11667 0636 00        		.string	""
 11668 0637 00        		.string	""
 11669 0638 00        		.string	""
 11670 0639 0101 0709 		.string	"\001\001\007\t\t\t\007"
 11670      0909 0700 
 11671 0641 00        		.string	""
 11672 0642 00        		.string	""
 11673 0643 00        		.string	""
 11674 0644 00        		.string	""
 11675 0645 00        		.string	""
 11676 0646 0601 0101 		.string	"\006\001\001\001\006"
 11676      0600 
 11677 064c 00        		.string	""
 11678 064d 00        		.string	""
 11679 064e 00        		.string	""
 11680 064f 0808 0E09 		.string	"\b\b\016\t\t\t\016"
 11680      0909 0E00 
 11681 0657 00        		.string	""
 11682 0658 00        		.string	""
 11683 0659 00        		.string	""
 11684 065a 00        		.string	""
 11685 065b 00        		.string	""
 11686 065c 0609 0F01 		.string	"\006\t\017\001\016"
 11686      0E00 
 11687 0662 00        		.string	""
 11688 0663 00        		.string	""
 11689 0664 00        		.string	""
 11690 0665 0C02 0702 		.string	"\f\002\007\002\002\002\002"
 11690      0202 0200 
 11691 066d 00        		.string	""
 11692 066e 00        		.string	""
 11693 066f 00        		.string	""
 11694 0670 00        		.string	""
 11695 0671 00        		.string	""
 11696 0672 0E09 0909 		.string	"\016\t\t\t\016\b\006"
 11696      0E08 0600 
 11697 067a 00        		.string	""
 11698 067b 0101 0709 		.string	"\001\001\007\t\t\t\t"
 11698      0909 0900 
 11699 0683 00        		.string	""
 11700 0684 00        		.string	""
 11701 0685 00        		.string	""
 11702 0686 0100      		.string	"\001"
 11703 0688 0101 0101 		.string	"\001\001\001\001\001"
 11703      0100 
 11704 068e 00        		.string	""
 11705 068f 00        		.string	""
 11706 0690 00        		.string	""
 11707 0691 0200      		.string	"\002"
 11708 0693 0202 0202 		.string	"\002\002\002\002\002\001"
 11708      0201 00
 11709 069a 00        		.string	""
 11710 069b 00        		.string	""
 11711 069c 0101 0905 		.string	"\001\001\t\005\003\005\t"
 11711      0305 0900 
 11712 06a4 00        		.string	""
 11713 06a5 00        		.string	""
 11714 06a6 00        		.string	""
 11715 06a7 0101 0101 		.string	"\001\001\001\001\001\001\001"
 11715      0101 0100 
 11716 06af 00        		.string	""
 11717 06b0 00        		.string	""
 11718 06b1 00        		.string	""
 11719 06b2 00        		.string	""
 11720 06b3 00        		.string	""
 11721 06b4 3749 4949 		.string	"7IIII"
 11721      4900 
 11722 06ba 00        		.string	""
 11723 06bb 00        		.string	""
 11724 06bc 00        		.string	""
 11725 06bd 00        		.string	""
 11726 06be 00        		.string	""
 11727 06bf 0709 0909 		.string	"\007\t\t\t\t"
 11727      0900 
 11728 06c5 00        		.string	""
 11729 06c6 00        		.string	""
 11730 06c7 00        		.string	""
 11731 06c8 00        		.string	""
 11732 06c9 00        		.string	""
 11733 06ca 0609 0909 		.string	"\006\t\t\t\006"
 11733      0600 
 11734 06d0 00        		.string	""
 11735 06d1 00        		.string	""
 11736 06d2 00        		.string	""
 11737 06d3 00        		.string	""
 11738 06d4 00        		.string	""
 11739 06d5 0709 0909 		.string	"\007\t\t\t\007\001\001"
 11739      0701 0100 
 11740 06dd 00        		.string	""
 11741 06de 00        		.string	""
 11742 06df 00        		.string	""
 11743 06e0 0E09 0909 		.string	"\016\t\t\t\016\b\b"
 11743      0E08 0800 
 11744 06e8 00        		.string	""
 11745 06e9 00        		.string	""
 11746 06ea 00        		.string	""
 11747 06eb 0503 0101 		.string	"\005\003\001\001\001"
 11747      0100 
 11748 06f1 00        		.string	""
 11749 06f2 00        		.string	""
 11750 06f3 00        		.string	""
 11751 06f4 00        		.string	""
 11752 06f5 00        		.string	""
 11753 06f6 0601 0204 		.string	"\006\001\002\004\003"
 11753      0300 
 11754 06fc 00        		.string	""
 11755 06fd 00        		.string	""
 11756 06fe 00        		.string	""
 11757 06ff 00        		.string	""
 11758 0700 0207 0202 		.string	"\002\007\002\002\002\004"
 11758      0204 00
 11759 0707 00        		.string	""
 11760 0708 00        		.string	""
 11761 0709 00        		.string	""
 11762 070a 00        		.string	""
 11763 070b 00        		.string	""
 11764 070c 0909 0909 		.string	"\t\t\t\t\016"
 11764      0E00 
 11765 0712 00        		.string	""
 11766 0713 00        		.string	""
 11767 0714 00        		.string	""
 11768 0715 00        		.string	""
 11769 0716 00        		.string	""
 11770 0717 110A 0A04 		.string	"\021\n\n\004\004"
 11770      0400 
 11771 071d 00        		.string	""
 11772 071e 00        		.string	""
 11773 071f 00        		.string	""
 11774 0720 00        		.string	""
 11775 0721 00        		.string	""
 11776 0722 1515 150A 		.string	"\025\025\025\n\n"
 11776      0A00 
 11777 0728 00        		.string	""
 11778 0729 00        		.string	""
 11779 072a 00        		.string	""
 11780 072b 00        		.string	""
 11781 072c 00        		.string	""
 11782 072d 110A 040A 		.string	"\021\n\004\n\021"
 11782      1100 
 11783 0733 00        		.string	""
 11784 0734 00        		.string	""
 11785 0735 00        		.string	""
 11786 0736 00        		.string	""
 11787 0737 00        		.string	""
 11788 0738 110A 0A04 		.string	"\021\n\n\004\004\002\001"
 11788      0402 0100 
 11789 0740 00        		.string	""
 11790 0741 00        		.string	""
 11791 0742 00        		.string	""
 11792 0743 0704 0201 		.string	"\007\004\002\001\007"
 11792      0700 
 11793 0749 00        		.string	""
 11794 074a 00        		.string	""
 11795 074b 0402 0202 		.string	"\004\002\002\002\001\002\002\002\004"
 11795      0102 0202 
 11795      0400 
 11796 0755 00        		.string	""
 11797 0756 0101 0101 		.string	"\001\001\001\001\001\001\001\001\001"
 11797      0101 0101 
 11797      0100 
 11798 0760 00        		.string	""
 11799 0761 0102 0202 		.string	"\001\002\002\002\004\002\002\002\001"
 11799      0402 0202 
 11799      0100 
 11800 076b 00        		.string	""
 11801 076c 00        		.string	""
 11802 076d 00        		.string	""
 11803 076e 00        		.string	""
 11804 076f 2619 00   		.string	"&\031"
 11805 0772 00        		.string	""
 11806 0773 00        		.string	""
 11807 0774 00        		.string	""
 11808 0775 00        		.string	""
 11810               	.global	font_default_widths
 11813               	font_default_widths:
 11814 0776 0202 0408 		.ascii	"\002\002\004\b\006\b\007\002\004\004\006\006\003\004\002\005"
 11814      0608 0702 
 11814      0404 0606 
 11814      0304 0205 
 11815 0786 0503 0505 		.ascii	"\005\003\005\005\005\005\005\005\005\005\002\003\006\006\006"
 11815      0505 0505 
 11815      0505 0203 
 11815      0606 06
 11816 0795 0508 0505 		.ascii	"\005\b\005\005\005\006\004\004\006\006\002\004\006\005\b\006"
 11816      0506 0404 
 11816      0606 0204 
 11816      0605 0806 
 11817 07a5 0705 0705 		.ascii	"\007\005\007\005\005\006\006\006\b\006\006\006\003\005\003\006"
 11817      0506 0606 
 11817      0806 0606 
 11817      0305 0306 
 11818 07b5 0503 0505 		.ascii	"\005\003\005\005\004\005\005\005\005\005\002\003\005\002\b\005"
 11818      0405 0505 
 11818      0505 0203 
 11818      0502 0805 
 11819 07c5 0505 0504 		.ascii	"\005\005\005\004\004\004\005\006\006\006\006\004\004\002\004"
 11819      0404 0506 
 11819      0606 0604 
 11819      0402 04
 11820 07d4 07        		.ascii	"\007"
 11822               		.local	ms
 11823               		.comm	ms,2,1
 11825               		.local	button_ticks
 11826               		.comm	button_ticks,14,1
 11828               		.section	.rodata
 11831               	button_pins:
 11832 000b 0410 0840 		.ascii	"\004\020\b@ \001\200"
 11832      2001 80
 11836               	button_ports:
 11837 0012 2900      		.word	41
 11838 0014 2900      		.word	41
 11839 0016 2900      		.word	41
 11840 0018 2900      		.word	41
 11841 001a 2900      		.word	41
 11842 001c 2600      		.word	38
 11843 001e 2900      		.word	41
 11845               		.text
 11847               	.Letext0:
 11848               		.ident	"GCC: (GNU) 10.2.0"
 11849               	.global __do_copy_data
 11850               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccvPhhCS.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccvPhhCS.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccvPhhCS.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccvPhhCS.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccvPhhCS.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccvPhhCS.s:18     .text:0000000000000000 wait_ms
     /tmp/ccvPhhCS.s:11337  .bss:0000000000000590 ms
     /tmp/ccvPhhCS.s:64     .text:000000000000001c lcd_rect
     /tmp/ccvPhhCS.s:11334  .bss:000000000000058e _color
     /tmp/ccvPhhCS.s:258    .text:0000000000000124 lcd_rect_border
     /tmp/ccvPhhCS.s:341    .text:0000000000000196 lcd_rect_border2
     /tmp/ccvPhhCS.s:426    .text:0000000000000208 uart_tx
     /tmp/ccvPhhCS.s:457    .text:0000000000000216 key_shift
     /tmp/ccvPhhCS.s:11300  .data:0000000000000382 kbd_mode
     /tmp/ccvPhhCS.s:10834  .progmem.data:0000000000000196 keys
     /tmp/ccvPhhCS.s:530    .text:0000000000000234 calc_solve
     /tmp/ccvPhhCS.s:11331  .bss:000000000000058d tok_cnt
     /tmp/ccvPhhCS.s:11322  .bss:00000000000004cd tok_type_list
     /tmp/ccvPhhCS.s:11325  .bss:00000000000004ed num_stack
     /tmp/ccvPhhCS.s:11319  .bss:000000000000044d tok_num_list
     /tmp/ccvPhhCS.s:1182   .text:0000000000000614 lcd_pixel
     /tmp/ccvPhhCS.s:1306   .text:00000000000006c4 lcd_char
     /tmp/ccvPhhCS.s:11813  .progmem.data:0000000000000776 font_default_widths
     /tmp/ccvPhhCS.s:11343  .progmem.data:0000000000000361 font_default_chars
     /tmp/ccvPhhCS.s:1470   .text:0000000000000774 lcd_string
     /tmp/ccvPhhCS.s:1531   .text:00000000000007b2 print_result
                             .bss:0000000000000000 ty
     /tmp/ccvPhhCS.s:1619   .text:0000000000000838 render_key
     /tmp/ccvPhhCS.s:1767   .text:00000000000008da render_key_sel
     /tmp/ccvPhhCS.s:1914   .text:0000000000000980 render_keys
     /tmp/ccvPhhCS.s:10560  .bss:0000000000000028 cur_key
     /tmp/ccvPhhCS.s:1963   .text:00000000000009a4 render_keyboard
     /tmp/ccvPhhCS.s:2323   .text:0000000000000bb0 timer_update
     /tmp/ccvPhhCS.s:10196  .data:0000000000000025 count_up
     /tmp/ccvPhhCS.s:11307  .bss:0000000000000049 _response
     /tmp/ccvPhhCS.s:2608   .text:0000000000000d52 lcd_string_P.isra.0
     /tmp/ccvPhhCS.s:2675   .text:0000000000000d8e print_error
     /tmp/ccvPhhCS.s:10719  .progmem.data:00000000000000a7 error_syntax
     /tmp/ccvPhhCS.s:10130  .rodata:0000000000000000 CSWTCH.225
     /tmp/ccvPhhCS.s:2749   .text:0000000000000de6 label_render
     /tmp/ccvPhhCS.s:2805   .text:0000000000000e0c calc_prepare
     /tmp/ccvPhhCS.s:11328  .bss:000000000000056d op_stack
     /tmp/ccvPhhCS.s:10136  .rodata:0000000000000006 CSWTCH.189
     /tmp/ccvPhhCS.s:3779   .text:000000000000131c plot_render
     /tmp/ccvPhhCS.s:10551  .bss:000000000000001c psx
     /tmp/ccvPhhCS.s:10557  .bss:0000000000000024 pcx
     /tmp/ccvPhhCS.s:10548  .bss:0000000000000018 psy
     /tmp/ccvPhhCS.s:10554  .bss:0000000000000020 pcy
     /tmp/ccvPhhCS.s:10545  .bss:0000000000000014 pgx
     /tmp/ccvPhhCS.s:10542  .bss:0000000000000010 pgy
     /tmp/ccvPhhCS.s:10612  .data:00000000000002c4 input_fx_buffer
     /tmp/ccvPhhCS.s:10606  .data:00000000000002a4 input_gx_buffer
     /tmp/ccvPhhCS.s:10353  .bss:000000000000000c pstep
     /tmp/ccvPhhCS.s:5068   .text:0000000000001be4 form_table_input_button_ok_click
     /tmp/ccvPhhCS.s:10363  .data:0000000000000108 input_x_buffer
     /tmp/ccvPhhCS.s:10347  .bss:0000000000000004 tx
     /tmp/ccvPhhCS.s:5190   .text:0000000000001c74 input_render
     /tmp/ccvPhhCS.s:5415   .text:0000000000001d5e update_x
     /tmp/ccvPhhCS.s:10272  .data:000000000000007a table_elements
     /tmp/ccvPhhCS.s:5523   .text:0000000000001dda form_table_input_button_next_click
     /tmp/ccvPhhCS.s:10357  .data:00000000000000f8 input_table_step_buffer
     /tmp/ccvPhhCS.s:10350  .bss:0000000000000008 tstep
     /tmp/ccvPhhCS.s:5638   .text:0000000000001ea0 form_table_input_button_prev_click
     /tmp/ccvPhhCS.s:5756   .text:0000000000001f66 button_render
     /tmp/ccvPhhCS.s:6118   .text:000000000000208a element_render_sel
     /tmp/ccvPhhCS.s:6166   .text:00000000000020ae event_button
     /tmp/ccvPhhCS.s:10677  .data:0000000000000341 any_key
     /tmp/ccvPhhCS.s:11316  .bss:000000000000044b current_form
     /tmp/ccvPhhCS.s:11313  .bss:000000000000044a current_element
     /tmp/ccvPhhCS.s:7248   .text:00000000000024b8 form_open
     /tmp/ccvPhhCS.s:7507   .text:00000000000025cc apps_open
     /tmp/ccvPhhCS.s:11310  .bss:0000000000000449 connected
     /tmp/ccvPhhCS.s:10618  .data:00000000000002e4 form_apps
     /tmp/ccvPhhCS.s:7542   .text:00000000000025e8 form_plot_input_key
     /tmp/ccvPhhCS.s:7575   .text:00000000000025f6 form_table_key
     /tmp/ccvPhhCS.s:7604   .text:0000000000002600 form_clock_key
     /tmp/ccvPhhCS.s:10734  .progmem.data:00000000000000d1 start_timer
     /tmp/ccvPhhCS.s:10176  .data:0000000000000009 clock_elements
     /tmp/ccvPhhCS.s:7646   .text:0000000000002622 form_message_key
     /tmp/ccvPhhCS.s:7659   .text:000000000000262c form_request_key
     /tmp/ccvPhhCS.s:7673   .text:0000000000002636 plot_open
     /tmp/ccvPhhCS.s:10378  .data:0000000000000121 plot_form_input
     /tmp/ccvPhhCS.s:7693   .text:000000000000263e table_open
     /tmp/ccvPhhCS.s:10263  .data:0000000000000071 table_form
     /tmp/ccvPhhCS.s:7728   .text:0000000000002662 request_open
     /tmp/ccvPhhCS.s:10241  .data:0000000000000055 request_elements
     /tmp/ccvPhhCS.s:10232  .data:000000000000004c request_form
     /tmp/ccvPhhCS.s:7778   .text:0000000000002684 message_open
     /tmp/ccvPhhCS.s:10201  .data:0000000000000027 message_form
     /tmp/ccvPhhCS.s:7828   .text:00000000000026a6 clock_open
     /tmp/ccvPhhCS.s:10166  .data:0000000000000000 clock_form
     /tmp/ccvPhhCS.s:7848   .text:00000000000026ae form_plot_input_button_ok_click
     /tmp/ccvPhhCS.s:10369  .data:0000000000000118 plot_form_output
     /tmp/ccvPhhCS.s:10594  .data:0000000000000284 input_center_x_buffer
     /tmp/ccvPhhCS.s:10588  .data:0000000000000274 input_center_y_buffer
     /tmp/ccvPhhCS.s:10582  .data:0000000000000264 input_scale_x_buffer
     /tmp/ccvPhhCS.s:10576  .data:0000000000000254 input_scale_y_buffer
     /tmp/ccvPhhCS.s:10570  .data:0000000000000244 input_grid_x_buffer
     /tmp/ccvPhhCS.s:10564  .data:0000000000000234 input_grid_y_buffer
     /tmp/ccvPhhCS.s:10600  .data:0000000000000294 input_step_buffer
     /tmp/ccvPhhCS.s:8087   .text:00000000000028a6 form_plot_output_key
     /tmp/ccvPhhCS.s:8243   .text:00000000000029c8 form_clock_button_toggle_click
     /tmp/ccvPhhCS.s:10729  .progmem.data:00000000000000c6 stop_timer
     /tmp/ccvPhhCS.s:8300   .text:0000000000002a0a __vector_9
     /tmp/ccvPhhCS.s:11836  .rodata:0000000000000012 button_ports
     /tmp/ccvPhhCS.s:11831  .rodata:000000000000000b button_pins
     /tmp/ccvPhhCS.s:11823  .bss:0000000000000592 button_ticks
     /tmp/ccvPhhCS.s:8575   .text:0000000000002b36 uart_flush
     /tmp/ccvPhhCS.s:8610   .text:0000000000002b44 uart_rx
     /tmp/ccvPhhCS.s:8645   .text:0000000000002b52 uart_rx_str
     /tmp/ccvPhhCS.s:8772   .text:0000000000002bcc network_request
     /tmp/ccvPhhCS.s:8887   .text:0000000000002c22 form_message_button_send_click
     /tmp/ccvPhhCS.s:10682  .data:0000000000000342 input_message
     /tmp/ccvPhhCS.s:8910   .text:0000000000002c2e form_request_button_send_click
     /tmp/ccvPhhCS.s:9063   .text:0000000000002cae form_clock_button_get_click
     /tmp/ccvPhhCS.s:9132   .text.startup:0000000000000000 main
     /tmp/ccvPhhCS.s:10145  .progmem.data:0000000000000000 ILI9341.0
     /tmp/ccvPhhCS.s:11304  .bss:0000000000000029 _ip
     /tmp/ccvPhhCS.s:10714  .progmem.data:000000000000009c error_math
     /tmp/ccvPhhCS.s:10709  .progmem.data:000000000000008e error_nomem
     /tmp/ccvPhhCS.s:10704  .progmem.data:0000000000000082 error_range
     /tmp/ccvPhhCS.s:10744  .progmem.data:00000000000000e5 clock
     /tmp/ccvPhhCS.s:10724  .progmem.data:00000000000000b4 get_time_and_date
     /tmp/ccvPhhCS.s:10809  .progmem.data:000000000000014f send_message
     /tmp/ccvPhhCS.s:10210  .data:0000000000000030 message_elements
     /tmp/ccvPhhCS.s:10749  .progmem.data:00000000000000eb send
     /tmp/ccvPhhCS.s:10739  .progmem.data:00000000000000dd request
     /tmp/ccvPhhCS.s:10819  .progmem.data:000000000000016d calculator
     /tmp/ccvPhhCS.s:10754  .progmem.data:00000000000000f0 ok
     /tmp/ccvPhhCS.s:10699  .progmem.data:000000000000007e xeq
     /tmp/ccvPhhCS.s:10789  .progmem.data:0000000000000129 step
     /tmp/ccvPhhCS.s:10694  .progmem.data:0000000000000079 prev
     /tmp/ccvPhhCS.s:10689  .progmem.data:0000000000000074 next
     /tmp/ccvPhhCS.s:10824  .progmem.data:0000000000000178 function_plotter
     /tmp/ccvPhhCS.s:10387  .data:000000000000012a calc_input_elements
     /tmp/ccvPhhCS.s:10799  .progmem.data:0000000000000136 fx
     /tmp/ccvPhhCS.s:10794  .progmem.data:000000000000012f gx
     /tmp/ccvPhhCS.s:10784  .progmem.data:000000000000011f center_x
     /tmp/ccvPhhCS.s:10779  .progmem.data:0000000000000115 center_y
     /tmp/ccvPhhCS.s:10774  .progmem.data:000000000000010c scale_x
     /tmp/ccvPhhCS.s:10769  .progmem.data:0000000000000103 scale_y
     /tmp/ccvPhhCS.s:10764  .progmem.data:00000000000000fb grid_x
     /tmp/ccvPhhCS.s:10759  .progmem.data:00000000000000f3 grid_y
     /tmp/ccvPhhCS.s:10829  .progmem.data:0000000000000189 applications
     /tmp/ccvPhhCS.s:10627  .data:00000000000002ed apps_elements
     /tmp/ccvPhhCS.s:10814  .progmem.data:000000000000015c request_resource
     /tmp/ccvPhhCS.s:10804  .progmem.data:000000000000013d about

UNDEFINED SYMBOLS
__addsf3
__subsf3
__mulsf3
__eqsf2
__divsf3
__gesf2
__lesf2
__tablejump2__
log
sin
cos
tan
acos
atan
pow
asin
dtostrf
__udivmodhi4
__floatsisf
isdigit
__fixsfsi
__ltsf2
ceil
atof
__do_copy_data
__do_clear_bss
